(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(537),o=t.n(r),i=t(645),a=t.n(i)()(o());a.push([n.id,":root {\n    --strong-accent: #3500D3;\n    --main-bg: #240090;\n    --main-dark-bg: #0C0032; \n    --secondary-dark-bg: #282828\n}\nbody {\n    margin: 0 auto;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    background-color: var(--main-dark-bg);\n    color: white;\n}\n.container {\n    display: flex;\n    flex-direction: row;\n    gap: 40px;\n}\n\n.clickable {\n    cursor: pointer;\n}\n\n.popup {\n    /* position: absolute; */\n    width: 1500px;\n    height: 700px;\n    background-color: var(--main-dark-bg);\n    /* display: none; */\n}\n\n.blocker {\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    content: '';\n    position: fixed;\n}\n\n.pregame-space {\n    /* margin: 1px; */\n    /* width: 30px;\n    height: 30px; */\n    /* border: black 1px solid; */\n    background-color: white;\n    cursor: pointer;\n}\n\n.pregame-container {\n    display: flex;\n    flex-direction: row;\n    position: relative;\n}\n\n.start-button {\n    background-color: var(--main-bg);\n    display: none;\n    cursor: pointer;\n}\n.ship-container {\n    height: auto;\n    display: flex;\n    flex-direction:column;\n    gap: 20px;\n}\n\n.ship {\n    height: 30px;\n    background-color: var(--strong-accent);\n    cursor: pointer;\n}\n\n.carrier {\n    width: 150px;\n}\n\n.battleship {\n    width: 120px;\n}\n\n.cruiser, .submarine {\n    width: 90px;\n}\n\n.destroyer {\n    width: 60px;\n}\n\n.gameboard-container, .initial-grid {\n    width: 500px;\n    height: 500px;\n    display: flex;\n    flex-direction: column;\n    background-color: var(--main-dark-bg);\n}\n\n.row {\n    flex: 1;\n    display: flex;\n}\n\n.column {\n    margin: 1px;\n    flex: 1;\n    /* background-color: #c2cad0; */\n    background-color: var(--secondary-dark-bg);\n    text-align: center;\n    /* line-height:50px; */\n    font-size: 40px;\n    box-sizing: border-box;\n}\n\ni {\n    font-size: 10px;\n}\n\n.text-div {\n    background-color: var(--main-dark-bg);\n}\n\n.selected-ship-off-grid {\n    background-color: #C2CAD0;\n    border: white solid 2px;\n    box-sizing: border-box;\n}\n\n\n.ship-in-space {\n    /* background-color: white; */\n    background-color: #C2CAD0;\n}\n\n.grey-out {\n    background-color: white;\n}\n\n.valid-hovering {\n    background-color: white;\n}\n\n.invalid-hovering {\n    background-color: #e7717d;\n}\n\n.ship-head-hover {\n    background-color: #3500D3;\n}\n\n\n.selected-ship-on-grid {\n    background-color: darkgrey;\n    \n}\n\n.game-column {\n    border: 1px solid transparent;\n}\n\n.game-column:hover {\n    border: 1px solid var(--strong-accent)\n}\n\n.correct-guess {\n    border: 1px solid white;\n}\n\n.incorrect-guess {\n    border: 1px solid orangered;\n}\n\n.sunk-ship {\n    background-color: var(--strong-accent);\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,wBAAwB;IACxB,kBAAkB;IAClB,uBAAuB;IACvB;AACJ;AACA;IACI,cAAc;IACd,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,qCAAqC;IACrC,YAAY;AAChB;AACA;IACI,aAAa;IACb,mBAAmB;IACnB,SAAS;AACb;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,wBAAwB;IACxB,aAAa;IACb,aAAa;IACb,qCAAqC;IACrC,mBAAmB;AACvB;;AAEA;IACI,MAAM;IACN,SAAS;IACT,OAAO;IACP,QAAQ;IACR,WAAW;IACX,eAAe;AACnB;;AAEA;IACI,iBAAiB;IACjB;mBACe;IACf,6BAA6B;IAC7B,uBAAuB;IACvB,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,kBAAkB;AACtB;;AAEA;IACI,gCAAgC;IAChC,aAAa;IACb,eAAe;AACnB;AACA;IACI,YAAY;IACZ,aAAa;IACb,qBAAqB;IACrB,SAAS;AACb;;AAEA;IACI,YAAY;IACZ,sCAAsC;IACtC,eAAe;AACnB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,aAAa;IACb,sBAAsB;IACtB,qCAAqC;AACzC;;AAEA;IACI,OAAO;IACP,aAAa;AACjB;;AAEA;IACI,WAAW;IACX,OAAO;IACP,+BAA+B;IAC/B,0CAA0C;IAC1C,kBAAkB;IAClB,sBAAsB;IACtB,eAAe;IACf,sBAAsB;AAC1B;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,qCAAqC;AACzC;;AAEA;IACI,yBAAyB;IACzB,uBAAuB;IACvB,sBAAsB;AAC1B;;;AAGA;IACI,6BAA6B;IAC7B,yBAAyB;AAC7B;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;;AAGA;IACI,0BAA0B;;AAE9B;;AAEA;IACI,6BAA6B;AACjC;;AAEA;IACI;AACJ;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,2BAA2B;AAC/B;;AAEA;IACI,sCAAsC;AAC1C",sourcesContent:[":root {\n    --strong-accent: #3500D3;\n    --main-bg: #240090;\n    --main-dark-bg: #0C0032; \n    --secondary-dark-bg: #282828\n}\nbody {\n    margin: 0 auto;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    background-color: var(--main-dark-bg);\n    color: white;\n}\n.container {\n    display: flex;\n    flex-direction: row;\n    gap: 40px;\n}\n\n.clickable {\n    cursor: pointer;\n}\n\n.popup {\n    /* position: absolute; */\n    width: 1500px;\n    height: 700px;\n    background-color: var(--main-dark-bg);\n    /* display: none; */\n}\n\n.blocker {\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    content: '';\n    position: fixed;\n}\n\n.pregame-space {\n    /* margin: 1px; */\n    /* width: 30px;\n    height: 30px; */\n    /* border: black 1px solid; */\n    background-color: white;\n    cursor: pointer;\n}\n\n.pregame-container {\n    display: flex;\n    flex-direction: row;\n    position: relative;\n}\n\n.start-button {\n    background-color: var(--main-bg);\n    display: none;\n    cursor: pointer;\n}\n.ship-container {\n    height: auto;\n    display: flex;\n    flex-direction:column;\n    gap: 20px;\n}\n\n.ship {\n    height: 30px;\n    background-color: var(--strong-accent);\n    cursor: pointer;\n}\n\n.carrier {\n    width: 150px;\n}\n\n.battleship {\n    width: 120px;\n}\n\n.cruiser, .submarine {\n    width: 90px;\n}\n\n.destroyer {\n    width: 60px;\n}\n\n.gameboard-container, .initial-grid {\n    width: 500px;\n    height: 500px;\n    display: flex;\n    flex-direction: column;\n    background-color: var(--main-dark-bg);\n}\n\n.row {\n    flex: 1;\n    display: flex;\n}\n\n.column {\n    margin: 1px;\n    flex: 1;\n    /* background-color: #c2cad0; */\n    background-color: var(--secondary-dark-bg);\n    text-align: center;\n    /* line-height:50px; */\n    font-size: 40px;\n    box-sizing: border-box;\n}\n\ni {\n    font-size: 10px;\n}\n\n.text-div {\n    background-color: var(--main-dark-bg);\n}\n\n.selected-ship-off-grid {\n    background-color: #C2CAD0;\n    border: white solid 2px;\n    box-sizing: border-box;\n}\n\n\n.ship-in-space {\n    /* background-color: white; */\n    background-color: #C2CAD0;\n}\n\n.grey-out {\n    background-color: white;\n}\n\n.valid-hovering {\n    background-color: white;\n}\n\n.invalid-hovering {\n    background-color: #e7717d;\n}\n\n.ship-head-hover {\n    background-color: #3500D3;\n}\n\n\n.selected-ship-on-grid {\n    background-color: darkgrey;\n    \n}\n\n.game-column {\n    border: 1px solid transparent;\n}\n\n.game-column:hover {\n    border: 1px solid var(--strong-accent)\n}\n\n.correct-guess {\n    border: 1px solid white;\n}\n\n.incorrect-guess {\n    border: 1px solid orangered;\n}\n\n.sunk-ship {\n    background-color: var(--strong-accent);\n}"],sourceRoot:""}]);const s=a},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var l=0;l<n.length;l++){var d=[].concat(n[l]);r&&a[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),e.push(d))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[e].concat([i]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var i={},a=[],s=0;s<n.length;s++){var c=n[s],l=r.base?c[0]+r.base:c[0],d=i[l]||0,u="".concat(l," ").concat(d);i[l]=d+1;var A=t(u),h={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==A)e[A].references++,e[A].updater(h);else{var p=o(h,r);r.byIndex=s,e.splice(s,0,{identifier:u,updater:p,references:1})}a.push(u)}return a}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var i=r(n=n||[],o=o||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var s=t(i[a]);e[s].references--}for(var c=r(n,o),l=0;l<i.length;l++){var d=t(i[l]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}i=c}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,exports:{}};return n[r](i,i.exports,t),i.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{var n=t(379),e=t.n(n),r=t(795),o=t.n(r),i=t(569),a=t.n(i),s=t(565),c=t.n(s),l=t(216),d=t.n(l),u=t(589),A=t.n(u),h=t(426),p={};p.styleTagTransform=A(),p.setAttributes=c(),p.insert=a().bind(null,"head"),p.domAPI=o(),p.insertStyleElement=d(),e()(h.Z,p),h.Z&&h.Z.locals&&h.Z.locals;class f{constructor(n){this.length=n,this.hits=0,this.sunk=!1}setSunk(){this.sunk=!0}hit(){this.hits++}isSunk(){this.length===this.hits&&this.setSunk()}}class g{constructor(){this.hasShip=!1,this.wasGuessed=!1,this.missedHit=!1,this.ship=null}}class C{constructor(){this.grid=function(){let n=[];for(let e=0;e<10;e++){let e=[];for(let n=0;n<10;n++){const n=new g;e.push(n)}n.push(e)}return n}(),this.allShipCoords=[],this.guessedCoords=[],this.sunkShipCoords=[]}isOutOfBounds(n,e){return n>9||e>9}checkIfAlreadyPlaced(n,e){return!0===this.grid[e][n].hasShip}populateShipCoordsArray(n,e){this.allShipCoords.push([n,e])}placeShip(n,e,[t,r]){let o=!1;if(this.isOutOfBounds(t,r))return"out of bounds";let i=function(n){if(!(n<1||n>5))return new f(n)}(n);if(i)switch(e){case"horizontal":for(let e=0;e<n;e++){if(this.isOutOfBounds(t+e,r))return void(o=!0);if(this.checkIfAlreadyPlaced(t+e,r))return o=!0,"position already occupied: tried horizontal"}if(!o)for(let e=0;e<n;e++)this.grid[r][t+e].hasShip=!0,this.grid[r][t+e].ship=i,this.populateShipCoordsArray(t+e,r);break;case"vertical":for(let e=0;e<n;e++){if(this.isOutOfBounds(t,r+e))return void(o=!0);if(this.checkIfAlreadyPlaced(t,r+e))return o=!0,"position already occupied: tried vertical"}if(!o)for(let e=0;e<n;e++)this.grid[r+e][t].hasShip=!0,this.grid[r+e][t].ship=i,this.populateShipCoordsArray(t,r+e)}}getPosition(n,e){return this.grid[e][n]}checkShipExists(n,e){return this.grid[e][n].hasShip}getShip(n,e){return this.grid[e][n].ship}checkMissedHit(n,e){return this.grid[e][n].missedHit}checkWasGuessed(n,e){return this.grid[e][n].wasGuessed}checkIsGameOver(){let n=this.allShipCoords.map((n=>JSON.stringify(n))),e=this.guessedCoords.map((n=>JSON.stringify(n)));return n.every((n=>e.includes(n)))}receiveAttack(n,e){if(this.checkWasGuessed(n,e))return"already attacked";this.getPosition(n,e).wasGuessed=!0,this.guessedCoords.push([n,e]),this.checkShipExists(n,e)?(this.getShip(n,e).hit(),this.getShip(n,e).isSunk(),this.getShip(n,e).sunk):this.getPosition(n,e).missedHit=!0}}class m{constructor(n){this.name="Player"}attack(n,[e,t]){n.receiveAttack(e,t)}}class b extends m{constructor(){super(),this.name="Computer"}randomAttack(n){const e=Math.floor(10*Math.random()),t=Math.floor(10*Math.random());n.checkWasGuessed(e,t)||this.attack(n,[e,t])}}!function(){let n=function(){let n=new C,e=new C;const t=()=>e,r=new m,o=new b;let i=r,a=e,s=!1;function c(n){let e=JSON.stringify(t().allShipCoords),r=e;function o(){return["horizontal","vertical"][Math.round(Math.random())]}function i(){return[Math.floor(10*Math.random()),Math.floor(10*Math.random())]}let a=!1;for(;!a;)"horizontal"===o()?(t().placeShip(n,"horizontal",i()),r=JSON.stringify(t().allShipCoords),e!==r&&(a=!0)):"vertical"===o()&&(t().placeShip(n,"vertical",i()),r=JSON.stringify(t().allShipCoords),e!==r&&(a=!0))}function l(){i=i===r?o:r,a=a===n?e:n}function d(n){n.checkIsGameOver()&&(s=!0)}return c(5),c(4),c(3),c(3),c(2),{playRound:function(n=null){switch(i){case r:if(i.attack(a,n),d(a),s)break;l();break;case o:if(function(){if("Computer"!==i.name)return;let n=JSON.stringify(a.guessedCoords),e=n,t=!1;for(;!t;)i.randomAttack(a),e=JSON.stringify(a.guessedCoords),n!==e&&(t=!0)}(),d(a),s)break;l()}},getPlayerGameboard:()=>n,getComputerGameboard:t,getIsGameOver:()=>s,getCurrentPlayer:()=>i}}(),e=null,t=!1,r=!1;function o(){r=!1}function i(){t=!1}function a(n,e){switch(!0){case n.contains("carrier"):return e("carrier");case n.contains("battleship"):return e("battleship");case n.contains("cruiser"):return e("cruiser");case n.contains("submarine"):return e("submarine");case n.contains("destroyer"):return e("destroyer")}}let s={carrier:{length:5,orientation:"horizontal",isPlaced:!1},battleship:{length:4,orientation:"horizontal",isPlaced:!1},cruiser:{length:3,orientation:"horizontal",isPlaced:!1},submarine:{length:3,orientation:"horizontal",isPlaced:!1},destroyer:{length:2,orientation:"horizontal",isPlaced:!1}};function c(){return s[e].orientation}function l(){return s[e].isPlaced=!0}function d(){return e}function u(n){e=n}function A(n){a(n.classList,u)}function h(){e=null}function p(){return s[e].length}let f=document.querySelector("body");function g(n,e=null,t=null,...r){const o=document.createElement(n);return r.forEach((n=>o.classList.add(n))),e&&(o.textContent=e),t&&t.appendChild(o),o}function v(n){let e=document.querySelectorAll(`.${n}`);e&&e.forEach((e=>{e.classList.remove(n)}))}function I(){v("valid-hovering"),v("invalid-hovering"),v("ship-head-hover")}function y(){let n=document.querySelector(".selected-ship-off-grid");n&&n.classList.remove("selected-ship-off-grid")}function k(n,e){document.querySelector(`[data-col="${n}"][data-row="${e}"]`).classList.add("valid-hovering")}function x(n,e){document.querySelector(`[data-col="${n}"][data-row="${e}"]`).classList.add("invalid-hovering")}function B(n){!function(n){let e=!1;const t=parseInt(n.dataset.row),r=parseInt(n.dataset.col);let o=p();if("horizontal"===c()){for(let n=r;n<r+o;n++)if(n>9||P(n,t)){e=!0;break}if(e){if(e)for(let n=r;n<r+o&&!(n>9);n++)x(n,t)}else for(let n=r;n<r+o;n++)k(n,t)}else if("vertical"===c()){for(let n=t;n<t+o;n++)if(n>9||P(r,n)){e=!0;break}if(e){if(e)for(let n=t;n<t+o&&!(n>9);n++)x(r,n)}else for(let n=t;n<t+o;n++)k(r,n)}}(n)}function S(n,e){let t=document.querySelector(`[data-col="${n}"][data-row="${e}"]`);t.classList.add("ship-in-space"),t.classList.add(d())}function w(n){n.classList.add("ship-head")}function E(){const n=document.querySelector(`.ship-head.${d()}`);console.log(n),n&&n.classList.remove("ship-head")}function L(n){return n.classList.contains("ship-head")}function q(){document.querySelectorAll(".selected-ship-on-grid").forEach((n=>{n.classList.remove("selected-ship-on-grid")}))}function O(){let n=document.querySelector("i");n.parentNode.removeChild(n)}function z(n){let e=!1;const t=parseInt(n.dataset.row),o=parseInt(n.dataset.col);let i=p();if("horizontal"===c()&&!r||"vertical"===c()&&r){for(let n=o;n<o+i;n++)if(n>9||P(n,t)){e=!0;break}if(!e)for(let n=o;n<o+i;n++)S(n,t)}else if("vertical"===c()&&!r||"horizontal"==c()&&r){for(let n=t;n<t+i;n++)if(n>9||P(o,n)){e=!0;break}if(!e)for(let n=t;n<t+i;n++)S(o,n)}}function P(n,e){return document.querySelector(`[data-col="${n}"][data-row="${e}"]`).classList.contains("ship-in-space")}function G(n){let e=!1;const t=p(),o=parseInt(n.dataset.row),i=parseInt(n.dataset.col);if("horizontal"===c()&&!r||"vertical"===c()&&L(n)){for(let n=i+1;n<i+t;n++)if(n>9||P(n,o)){e=!0;break}}else if("vertical"===c()&&!r||"horizontal"==c()&&L(n))for(let n=o+1;n<o+t;n++)if(n>9||P(i,n)){e=!0;break}return e}function M(n){document.querySelector(".initial-grid").querySelectorAll(`.${n}`).forEach((e=>{e.classList.remove(n),e.classList.remove("ship-in-space")}))}function N(){console.log(`remove current ship from grid: ${d()}`),M(d())}function $(){let n=!0;for(let e in s)!1===s[e].isPlaced&&(n=!1);n&&function(){const n=document.querySelector(".start-button");n.style.display="block",console.log(n)}()}function Y(n,e){if(!n.hasShip&&!n.wasGuessed)return" ";n.hasShip&&!n.wasGuessed&&(e.textContent="."),!n.hasShip&&n.wasGuessed&&(e.textContent="·",e.classList.add("incorrect-guess")),n.hasShip&&n.wasGuessed&&(function(n,e){const t=document.querySelector("#x-template").content.cloneNode(!0);n.appendChild(t.children[0])}(e),e.classList.add("correct-guess"))}function J(n,e){n.ship&&n.ship.sunk&&(console.log("uh huh yea yea yea"),e.classList.add("sunk-ship"))}function T(){!function(n){let e=document.querySelector(".gameboard-container.right");n.grid.map(((n,t)=>{let r=g("div",null,e,"row");n.map((n=>{let e=g("div",null,r,"column");Y(n,e),J(n,e)}))}))}(n.getPlayerGameboard()),function(n){let e=document.querySelector(".gameboard-container.left");n.grid.map(((n,t)=>{let r=g("div",null,e,"row");n.map(((n,e)=>{let o=g("div",null,r,"column","game-column",function(n){return n.hasShip||n.wasGuessed?n.hasShip&&!n.wasGuessed?"clickable":!n.hasShip&&n.wasGuessed||n.hasShip&&n.wasGuessed?"unclickable":void 0:"clickable"}(n));Y(n,o),J(n,o),o.dataset.col=e,o.dataset.row=t}))}))}(n.getComputerGameboard())}function W(){document.querySelectorAll(".gameboard-container").forEach((n=>n.textContent=""))}function j(){return document.querySelector(".text-div")}function D(){let e=n.getCurrentPlayer().name;j().textContent=`${e}'s turn!`}f.addEventListener("mouseover",(n=>{n.target.classList.contains("pregame-space")&&(I(),e&&B(n.target),a(n.target.classList,(function(n){document.querySelector(`.${n}.ship-head`).classList.add("ship-head-hover")})))})),f.addEventListener("mouseover",(n=>{n.target.classList.contains("ship-head")&&r&&function(n){const e=p();let t=!1;const r=parseInt(n.dataset.col),o=parseInt(n.dataset.row);if("horizontal"===c()){for(let n=o+1;n<o+e;n++)(n>9||P(r,n))&&(t=!0);if(t)for(let n=o;n<o+e&&!(n>9);n++)x(r,n);if(!t)for(let n=o;n<o+e;n++)k(r,n)}else if("vertical"===c()){for(let n=r+1;n<r+e;n++)(n>9||P(n,o))&&(t=!0);if(t)for(let n=r;n<r+e&&!(n>9);n++)x(n,o);if(!t)for(let n=r;n<r+e;n++)k(n,o)}}(n.target)})),document.querySelector(".initial-grid").addEventListener("mouseleave",(()=>{I()})),f.addEventListener("click",(n=>{if(n.target.classList.contains("ship-head")){function c(n){n.querySelector("i")&&n.removeChild(n.querySelector("i"));const e=document.querySelector("#rotate-template").content.cloneNode(!0);n.appendChild(e.children[0])}if(r){if(r){if(G(n.target))return;N(),q(),O(),z(n.target),I(),s[e].orientation="horizontal"===s[e].orientation?"vertical":"horizontal",h(),o(),i()}}else r=!0,t=!0,A(n.target),a(n.target.classList,(function(n){document.querySelector(".initial-grid").querySelectorAll(`.${n}`).forEach((n=>{n.classList.add("selected-ship-on-grid")}))})),c(n.target),B(n.target)}})),f.addEventListener("click",(n=>{if(e&&n.target.classList.contains("pregame-space")){if(G(n.target))return;t?L(n.target)?L(n.target):(E(),O(),q(),N(),i(),o(),z(n.target),I(),w(n.target),l(),h(),$()):(document.querySelector(".selected-ship-off-grid").classList.add("grey-out"),y(),z(n.target),I(),w(n.target),l(),h(),$())}})),f.addEventListener("click",(n=>{let e=n.target.classList;e.contains("ship")&&(y(),I(),e.add("selected-ship-off-grid"),A(n.target),e.contains("grey-out")&&(E(),a(n.target.classList,M)))})),f.addEventListener("click",(e=>{e.target.classList.contains("start-button")&&(document.querySelectorAll(".ship-head").forEach((e=>{let[t,r]=a(e.classList,(n=>[s[n].length,s[n].orientation]));n.getPlayerGameboard().placeShip(t,r,[parseInt(e.dataset.col),parseInt(e.dataset.row)])})),document.querySelector(".popup").style.display="none",T(),D())})),function(){let n=document.querySelector(".initial-grid");for(let e=0;e<10;e++){let t=g("div",null,n,"row");for(let n=0;n<10;n++){let r=g("div","",t,"column","pregame-space");r.dataset.row=e,r.dataset.col=n}}}(),f.addEventListener("click",(e=>{if(e.target.classList.contains("clickable")){const t=e.target.dataset;n.playRound([parseInt(t.col),parseInt(t.row)]),W(),T(),D(),n.getIsGameOver()?(document.querySelectorAll(".clickable").forEach((n=>{n.classList.remove("clickable"),n.classList.add("unclickable")})),j().textContent=`${n.getCurrentPlayer().name} has won!`):setTimeout((()=>{n.playRound(),W(),T(),D()}),1e3)}}))}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,