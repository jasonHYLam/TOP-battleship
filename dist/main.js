(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(537),o=n.n(r),s=n(645),a=n.n(s)()(o());a.push([e.id,"body {\n    margin: 0 auto;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    background-color: black;\n}\n.container {\n    display: flex;\n    flex-direction: row;\n    gap: 40px;\n}\n\n.clickable {\n    cursor: pointer;\n}\n\n.gameboard-container {\n    width: 500px;\n    height: 500px;\n    display: flex;\n    flex-direction: column;\n    background-color: bisque;\n}\n\n.row {\n    flex: 1;\n    display: flex;\n}\n\n.column {\n    flex: 1;\n    background-color: grey;\n    /* justify-content: center; */\n    text-align: center;\n}\n\n\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,cAAc;IACd,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,uBAAuB;AAC3B;AACA;IACI,aAAa;IACb,mBAAmB;IACnB,SAAS;AACb;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,aAAa;IACb,sBAAsB;IACtB,wBAAwB;AAC5B;;AAEA;IACI,OAAO;IACP,aAAa;AACjB;;AAEA;IACI,OAAO;IACP,sBAAsB;IACtB,6BAA6B;IAC7B,kBAAkB;AACtB",sourcesContent:["body {\n    margin: 0 auto;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    background-color: black;\n}\n.container {\n    display: flex;\n    flex-direction: row;\n    gap: 40px;\n}\n\n.clickable {\n    cursor: pointer;\n}\n\n.gameboard-container {\n    width: 500px;\n    height: 500px;\n    display: flex;\n    flex-direction: column;\n    background-color: bisque;\n}\n\n.row {\n    flex: 1;\n    display: flex;\n}\n\n.column {\n    flex: 1;\n    background-color: grey;\n    /* justify-content: center; */\n    text-align: center;\n}\n\n\n"],sourceRoot:""}]);const i=a},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,s){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(a[c]=!0)}for(var l=0;l<e.length;l++){var u=[].concat(e[l]);r&&a[u[0]]||(void 0!==s&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=s),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),t.push(u))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),s="/*# ".concat(o," */");return[t].concat([s]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var s={},a=[],i=0;i<e.length;i++){var c=e[i],l=r.base?c[0]+r.base:c[0],u=s[l]||0,d="".concat(l," ").concat(u);s[l]=u+1;var h=n(d),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==h)t[h].references++,t[h].updater(p);else{var f=o(p,r);r.byIndex=i,t.splice(i,0,{identifier:d,updater:f,references:1})}a.push(d)}return a}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var s=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<s.length;a++){var i=n(s[a]);t[i].references--}for(var c=r(e,o),l=0;l<s.length;l++){var u=n(s[l]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}s=c}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var s=n.sourceMap;s&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var s=t[r]={id:r,exports:{}};return e[r](s,s.exports,n),s.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{var e=n(379),t=n.n(e),r=n(795),o=n.n(r),s=n(569),a=n.n(s),i=n(565),c=n.n(i),l=n(216),u=n.n(l),d=n(589),h=n.n(d),p=n(426),f={};f.styleTagTransform=h(),f.setAttributes=c(),f.insert=a().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=u(),t()(p.Z,f),p.Z&&p.Z.locals&&p.Z.locals;class A{constructor(e){this.length=e,this.hits=0,this.sunk=!1}setSunk(){this.sunk=!0}hit(){this.hits++}isSunk(){this.length===this.hits&&this.setSunk()}}class m{constructor(){this.hasShip=!1,this.wasGuessed=!1,this.missedHit=!1,this.ship=null}}class g{constructor(){this.grid=function(){let e=[];for(let t=0;t<10;t++){let t=[];for(let e=0;e<10;e++){const e=new m;t.push(e)}e.push(t)}return e}(),this.allShipCoords=[],this.guessedCoords=[]}isOutOfBounds(e,t){return e>9||t>9}checkIfAlreadyPlaced(e,t){return!0===this.grid[t][e].hasShip}populateShipCoordsArray(e,t){this.allShipCoords.push([e,t])}placeShip(e,t,[n,r]){if(this.isOutOfBounds(n,r))return"out of bounds";let o=function(e){if(!(e<1||e>5))return new A(e)}(e);if(o)switch(t){case"horizontal":for(let t=0;t<e;t++){if(this.isOutOfBounds(r,n+t))return"out of bounds";if(this.checkIfAlreadyPlaced(r,n+t))return"position already occupied"}for(let t=0;t<e;t++)this.grid[r][n+t].hasShip=!0,this.grid[r][n+t].ship=o,this.populateShipCoordsArray(n+t,r);break;case"vertical":for(let t=0;t<e;t++){if(this.isOutOfBounds(r+t,n))return"out of bounds";if(this.checkIfAlreadyPlaced(r+t,n))return"position already occupied"}for(let t=0;t<e;t++)this.grid[r+t][n].hasShip=!0,this.grid[r+t][n].ship=o,this.populateShipCoordsArray(n,r+t)}}placeAllShipsOnBoard(){this.placeShip(5,["horizontal","vertical"].Math.round(Math.random()),[Math.floor(10*Math.random()),Math.floor(10*Math.random())])}getPosition(e,t){return this.grid[t][e]}checkShipExists(e,t){return this.grid[t][e].hasShip}getShip(e,t){return this.grid[t][e].ship}checkMissedHit(e,t){return this.grid[t][e].missedHit}checkWasGuessed(e,t){return this.grid[t][e].wasGuessed}checkIsGameOver(){let e=this.allShipCoords.map((e=>JSON.stringify(e))),t=this.guessedCoords.map((e=>JSON.stringify(e)));return console.log(e),console.log(t),console.log(e.every((e=>t.includes(e)))),e.every((e=>t.includes(e)))}receiveAttack(e,t){if(this.checkWasGuessed(e,t))return"already attacked";this.getPosition(e,t).wasGuessed=!0,this.guessedCoords.push([e,t]),this.checkShipExists(e,t)?(this.getShip(e,t).hit(),this.getShip(e,t).isSunk()):this.getPosition(e,t).missedHit=!0}}class v{constructor(e){}attack(e,[t,n]){e.receiveAttack(t,n)}}class y extends v{constructor(){super()}randomAttack(e){const t=Math.floor(10*Math.random()),n=Math.floor(10*Math.random());e.checkWasGuessed(t,n)||this.attack(e,[t,n])}}!function(){let e=function(){let e=new g,t=new g;const n=new v,r=new y;let o=n,s=t,a=!1;function i(){o=o===n?r:n,s=s===e?t:e}function c(e){e.checkIsGameOver()&&(a=!0)}return e.placeShip(2,"vertical",[1,2]),t.placeShip(3,"vertical",[5,6]),t.placeShip(2,"vertical",[1,2]),{playRound:function(e=null){switch(o){case n:console.log("player"),o.attack(s,e),c(s),i();break;case r:console.log("computer"),function(){let e=JSON.stringify(s.guessedCoords),t=e,n=!1;for(;!n;)o.randomAttack(s),t=JSON.stringify(s.guessedCoords),e!==t&&(n=!0)}(),c(s),i()}},getPlayerGameboard:()=>e,getComputerGameboard:()=>t}}();function t(e,t=null,n=null,...r){const o=document.createElement(e);return r.forEach((e=>o.classList.add(e))),t&&(o.textContent=t),n&&n.appendChild(o),o}function n(e){return e.hasShip||e.wasGuessed?e.hasShip&&!e.wasGuessed?"o":!e.hasShip&&e.wasGuessed?"m":e.hasShip&&e.wasGuessed?"X":void 0:"."}function r(){!function(e){let r=document.querySelector(".gameboard-container.right");e.grid.map(((e,o)=>{let s=t("div",null,r,"row");e.map((e=>{t("div",n(e),s,"column")}))}))}(e.getPlayerGameboard()),function(e){let r=document.querySelector(".gameboard-container.left");e.grid.map(((e,o)=>{let s=t("div",null,r,"row");e.map(((e,r)=>{let a=t("div",n(e),s,"column",function(e){return e.hasShip||e.wasGuessed?e.hasShip&&!e.wasGuessed?"clickable":!e.hasShip&&e.wasGuessed||e.hasShip&&e.wasGuessed?"unclickable":void 0:"clickable"}(e));a.dataset.col=r,a.dataset.row=o}))}))}(e.getComputerGameboard())}function o(){document.querySelectorAll(".gameboard-container").forEach((e=>e.textContent=""))}r(),document.querySelector("body").addEventListener("click",(t=>{if(t.target.classList.contains("clickable")){const n=t.target.dataset;e.playRound([parseInt(n.col),parseInt(n.row)]),o(),r(),function(){if(console.log(e.getPlayerGameboard().checkIsGameOver()),console.log(e.getComputerGameboard().checkIsGameOver()),e.getPlayerGameboard().checkIsGameOver()||e.getComputerGameboard().checkIsGameOver())return!0}()?(console.log("a"),document.querySelectorAll(".clickable").forEach((e=>{e.classList.remove("clickable"),e.classList.add("unclickable")}))):(console.log("b"),e.playRound(),o(),r())}}))}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,