(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>s});var r=t(537),o=t.n(r),i=t(645),a=t.n(i)()(o());a.push([e.id,"body {\n    margin: 0 auto;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    background-color: black;\n}\n.container {\n    display: flex;\n    flex-direction: row;\n    gap: 40px;\n}\n\n.clickable {\n    cursor: pointer;\n}\n\n.popup {\n    /* position: absolute; */\n    width: 1500px;\n    height: 700px;\n    background-color: cornflowerblue;\n}\n\n.blocker {\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    content: '';\n    position: fixed;\n}\n\n.pregame-space {\n    margin: 1px;\n    /* width: 30px;\n    height: 30px; */\n    border: black 1px solid;\n    background-color: white;\n    cursor: pointer;\n}\n\n.pregame-container {\n    display: flex;\n    flex-direction: row;\n    position: relative;\n}\n.ship-container {\n    height: auto;\n    display: flex;\n    flex-direction:column;\n    gap: 20px;\n}\n\n.ship {\n    height: 30px;\n    background-color: white;\n    cursor: pointer;\n}\n\n.carrier {\n    width: 150px;\n}\n\n.battleship {\n    width: 120px;\n}\n\n.cruiser, .submarine {\n    width: 90px;\n}\n\n.destroyer {\n    width: 60px;\n}\n\n.gameboard-container, .initial-grid {\n    width: 500px;\n    height: 500px;\n    display: flex;\n    flex-direction: column;\n    background-color: bisque;\n}\n\n.row {\n    flex: 1;\n    display: flex;\n}\n\n.column {\n    flex: 1;\n    background-color: grey;\n    /* justify-content: center; */\n    text-align: center;\n}\n\n\n\n.selected-ship-off-grid {\n    background-color: beige;\n    border: white solid 2px;\n    box-sizing: border-box;\n}\n\n\n.ship-in-space {\n    background-color: white;\n}\n\n.grey-out {\n    background-color: darkslategrey;\n}\n\n.valid-hovering {\n    background-color: aqua;\n}\n\n.invalid-hovering {\n    background-color: coral;\n}\n\n.ship-head-hover {\n    background-color: goldenrod;\n}\n\n\n.selected-ship-on-grid {\n    background-color: darkgrey;\n    \n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,cAAc;IACd,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,uBAAuB;AAC3B;AACA;IACI,aAAa;IACb,mBAAmB;IACnB,SAAS;AACb;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,wBAAwB;IACxB,aAAa;IACb,aAAa;IACb,gCAAgC;AACpC;;AAEA;IACI,MAAM;IACN,SAAS;IACT,OAAO;IACP,QAAQ;IACR,WAAW;IACX,eAAe;AACnB;;AAEA;IACI,WAAW;IACX;mBACe;IACf,uBAAuB;IACvB,uBAAuB;IACvB,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,kBAAkB;AACtB;AACA;IACI,YAAY;IACZ,aAAa;IACb,qBAAqB;IACrB,SAAS;AACb;;AAEA;IACI,YAAY;IACZ,uBAAuB;IACvB,eAAe;AACnB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,aAAa;IACb,sBAAsB;IACtB,wBAAwB;AAC5B;;AAEA;IACI,OAAO;IACP,aAAa;AACjB;;AAEA;IACI,OAAO;IACP,sBAAsB;IACtB,6BAA6B;IAC7B,kBAAkB;AACtB;;;;AAIA;IACI,uBAAuB;IACvB,uBAAuB;IACvB,sBAAsB;AAC1B;;;AAGA;IACI,uBAAuB;AAC3B;;AAEA;IACI,+BAA+B;AACnC;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,2BAA2B;AAC/B;;;AAGA;IACI,0BAA0B;;AAE9B",sourcesContent:["body {\n    margin: 0 auto;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    background-color: black;\n}\n.container {\n    display: flex;\n    flex-direction: row;\n    gap: 40px;\n}\n\n.clickable {\n    cursor: pointer;\n}\n\n.popup {\n    /* position: absolute; */\n    width: 1500px;\n    height: 700px;\n    background-color: cornflowerblue;\n}\n\n.blocker {\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    content: '';\n    position: fixed;\n}\n\n.pregame-space {\n    margin: 1px;\n    /* width: 30px;\n    height: 30px; */\n    border: black 1px solid;\n    background-color: white;\n    cursor: pointer;\n}\n\n.pregame-container {\n    display: flex;\n    flex-direction: row;\n    position: relative;\n}\n.ship-container {\n    height: auto;\n    display: flex;\n    flex-direction:column;\n    gap: 20px;\n}\n\n.ship {\n    height: 30px;\n    background-color: white;\n    cursor: pointer;\n}\n\n.carrier {\n    width: 150px;\n}\n\n.battleship {\n    width: 120px;\n}\n\n.cruiser, .submarine {\n    width: 90px;\n}\n\n.destroyer {\n    width: 60px;\n}\n\n.gameboard-container, .initial-grid {\n    width: 500px;\n    height: 500px;\n    display: flex;\n    flex-direction: column;\n    background-color: bisque;\n}\n\n.row {\n    flex: 1;\n    display: flex;\n}\n\n.column {\n    flex: 1;\n    background-color: grey;\n    /* justify-content: center; */\n    text-align: center;\n}\n\n\n\n.selected-ship-off-grid {\n    background-color: beige;\n    border: white solid 2px;\n    box-sizing: border-box;\n}\n\n\n.ship-in-space {\n    background-color: white;\n}\n\n.grey-out {\n    background-color: darkslategrey;\n}\n\n.valid-hovering {\n    background-color: aqua;\n}\n\n.invalid-hovering {\n    background-color: coral;\n}\n\n.ship-head-hover {\n    background-color: goldenrod;\n}\n\n\n.selected-ship-on-grid {\n    background-color: darkgrey;\n    \n}"],sourceRoot:""}]);const s=a},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);r&&a[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),n.push(d))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[n].concat([i]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var i={},a=[],s=0;s<e.length;s++){var c=e[s],l=r.base?c[0]+r.base:c[0],d=i[l]||0,u="".concat(l," ").concat(d);i[l]=d+1;var A=t(u),h={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==A)n[A].references++,n[A].updater(h);else{var p=o(h,r);r.byIndex=s,n.splice(s,0,{identifier:u,updater:p,references:1})}a.push(u)}return a}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var s=t(i[a]);n[s].references--}for(var c=r(e,o),l=0;l<i.length;l++){var d=t(i[l]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}i=c}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var i=n[r]={id:r,exports:{}};return e[r](i,i.exports,t),i.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0,(()=>{var e=t(379),n=t.n(e),r=t(795),o=t.n(r),i=t(569),a=t.n(i),s=t(565),c=t.n(s),l=t(216),d=t.n(l),u=t(589),A=t.n(u),h=t(426),p={};p.styleTagTransform=A(),p.setAttributes=c(),p.insert=a().bind(null,"head"),p.domAPI=o(),p.insertStyleElement=d(),n()(h.Z,p),h.Z&&h.Z.locals&&h.Z.locals;class f{constructor(e){this.length=e,this.hits=0,this.sunk=!1}setSunk(){this.sunk=!0}hit(){this.hits++}isSunk(){this.length===this.hits&&this.setSunk()}}class g{constructor(){this.hasShip=!1,this.wasGuessed=!1,this.missedHit=!1,this.ship=null}}class m{constructor(){this.grid=function(){let e=[];for(let n=0;n<10;n++){let n=[];for(let e=0;e<10;e++){const e=new g;n.push(e)}e.push(n)}return e}(),this.allShipCoords=[],this.guessedCoords=[]}isOutOfBounds(e,n){return e>9||n>9}checkIfAlreadyPlaced(e,n){return!0===this.grid[n][e].hasShip}populateShipCoordsArray(e,n){this.allShipCoords.push([e,n])}placeShip(e,n,[t,r]){if(this.isOutOfBounds(t,r))return"out of bounds";let o=function(e){if(!(e<1||e>5))return new f(e)}(e);if(o)switch(n){case"horizontal":for(let n=0;n<e;n++){if(this.isOutOfBounds(r,t+n))return"out of bounds";if(this.checkIfAlreadyPlaced(r,t+n))return"position already occupied"}for(let n=0;n<e;n++)this.grid[r][t+n].hasShip=!0,this.grid[r][t+n].ship=o,this.populateShipCoordsArray(t+n,r);break;case"vertical":for(let n=0;n<e;n++){if(this.isOutOfBounds(r+n,t))return"out of bounds";if(this.checkIfAlreadyPlaced(r+n,t))return"position already occupied"}for(let n=0;n<e;n++)this.grid[r+n][t].hasShip=!0,this.grid[r+n][t].ship=o,this.populateShipCoordsArray(t,r+n)}}placeAllShipsOnBoard(){this.placeShip(5,["horizontal","vertical"].Math.round(Math.random()),[Math.floor(10*Math.random()),Math.floor(10*Math.random())])}getPosition(e,n){return this.grid[n][e]}checkShipExists(e,n){return this.grid[n][e].hasShip}getShip(e,n){return this.grid[n][e].ship}checkMissedHit(e,n){return this.grid[n][e].missedHit}checkWasGuessed(e,n){return this.grid[n][e].wasGuessed}checkIsGameOver(){let e=this.allShipCoords.map((e=>JSON.stringify(e))),n=this.guessedCoords.map((e=>JSON.stringify(e)));return console.log(e),console.log(n),console.log(e.every((e=>n.includes(e)))),e.every((e=>n.includes(e)))}receiveAttack(e,n){if(this.checkWasGuessed(e,n))return"already attacked";this.getPosition(e,n).wasGuessed=!0,this.guessedCoords.push([e,n]),this.checkShipExists(e,n)?(this.getShip(e,n).hit(),this.getShip(e,n).isSunk()):this.getPosition(e,n).missedHit=!0}}class b{constructor(e){}attack(e,[n,t]){e.receiveAttack(n,t)}}class v extends b{constructor(){super()}randomAttack(e){const n=Math.floor(10*Math.random()),t=Math.floor(10*Math.random());e.checkWasGuessed(n,t)||this.attack(e,[n,t])}}!function(){let e=null,n=!1;function t(e,n){switch(!0){case e.contains("carrier"):n("carrier");break;case e.contains("battleship"):n("battleship");break;case e.contains("cruiser"):n("cruiser");break;case e.contains("submarine"):n("submarine");break;case e.contains("destroyer"):n("destroyer")}}let r={carrier:5,battleship:4,cruiser:3,submarine:3,destroyer:2};function o(){return e}function i(n){e=n}function a(e){t(e.classList,i)}function s(){return r[e]}let c=document.querySelector("body");function l(e,n=null,t=null,...r){const o=document.createElement(e);return r.forEach((e=>o.classList.add(e))),n&&(o.textContent=n),t&&t.appendChild(o),o}function d(e){let n=document.querySelectorAll(`.${e}`);n&&n.forEach((n=>{n.classList.remove(e)}))}function u(){d("valid-hovering"),d("invalid-hovering"),d("ship-head-hover")}function A(){let e=document.querySelector(".selected-ship-off-grid");e&&e.classList.remove("selected-ship-off-grid")}function h(e){function n(e,n){document.querySelector(`[data-col="${e}"][data-row="${n}"]`).classList.add("invalid-hovering")}!function(e,t){let r=!1;const o=parseInt(e.dataset.row),i=parseInt(e.dataset.col);let a=parseInt(t);for(let e=i;e<i+a;e++)if(e>9||p(e,o)){r=!0;break}if(r){if(r)for(let e=i;e<i+a;e++)n(e,o)}else for(let e=i;e<i+a;e++)s=e,c=o,document.querySelector(`[data-col="${s}"][data-row="${c}"]`).classList.add("valid-hovering");var s,c}(e,s())}function p(e,n){return document.querySelector(`[data-col="${e}"][data-row="${n}"]`).classList.contains("ship-in-space")}function f(e){document.querySelector(".initial-grid").querySelectorAll(`.${e}`).forEach((n=>{n.classList.remove(e),n.classList.remove("ship-in-space")}))}function g(e){return e.hasShip||e.wasGuessed?e.hasShip&&!e.wasGuessed?"o":!e.hasShip&&e.wasGuessed?"m":e.hasShip&&e.wasGuessed?"X":void 0:"."}c.addEventListener("mouseover",(n=>{n.target.classList.contains("pregame-space")&&(u(),e&&h(n.target),t(n.target.classList,(function(e){document.querySelector(`.${e}.ship-head`).classList.add("ship-head-hover")})))})),document.querySelector(".initial-grid").addEventListener("mouseleave",(()=>{u()})),c.addEventListener("click",(r=>{r.target.classList.contains("ship-head")&&(console.log("clicked ship head"),n=!0,a(r.target),t(r.target.classList,(function(e){document.querySelector(".initial-grid").querySelectorAll(`.${e}`).forEach((e=>{e.classList.add("selected-ship-on-grid")}))})),console.log(e),h(r.target))})),c.addEventListener("click",(t=>{if(e&&t.target.classList.contains("pregame-space")){if(function(e){let n=!1;const t=s(),r=parseInt(e.dataset.row),o=parseInt(e.dataset.col);for(let e=o;e<o+t;e++)e>10&&(n=!0),p(e,r)&&(n=!0);return n}(t.target))return;n?(document.querySelector(`.ship-head.${o()}`).classList.remove("ship-head"),document.querySelectorAll(".selected-ship-on-grid").forEach((e=>{e.classList.remove("selected-ship-on-grid")})),f(o()),n=!1):(document.querySelector(".selected-ship-off-grid").classList.add("grey-out"),A()),document.querySelectorAll(".valid-hovering").forEach((e=>function(e){e.classList.add("ship-in-space"),e.classList.add(o())}(e))),u(),t.target.classList.add("ship-head"),e=null}})),c.addEventListener("click",(e=>{let n=e.target.classList;n.contains("ship")&&(n.contains("grey-out")&&t(e.target.classList,f),A(),u(),n.add("selected-ship-off-grid"),a(e.target))}));let C=function(){let e=new m,n=new m;const t=new b,r=new v;let o=t,i=n,a=!1;function s(){o=o===t?r:t,i=i===e?n:e}function c(e){e.checkIsGameOver()&&(a=!0)}return e.placeShip(2,"vertical",[1,2]),n.placeShip(3,"vertical",[5,6]),n.placeShip(2,"vertical",[1,2]),{playRound:function(e=null){switch(o){case t:console.log("player"),o.attack(i,e),c(i),s();break;case r:console.log("computer"),function(){let e=JSON.stringify(i.guessedCoords),n=e,t=!1;for(;!t;)o.randomAttack(i),n=JSON.stringify(i.guessedCoords),e!==n&&(t=!0)}(),c(i),s()}},getPlayerGameboard:()=>e,getComputerGameboard:()=>n,getIsGameOver:()=>a}}();function y(){!function(e){let n=document.querySelector(".gameboard-container.right");e.grid.map(((e,t)=>{let r=l("div",null,n,"row");e.map((e=>{l("div",g(e),r,"column")}))}))}(C.getPlayerGameboard()),function(e){let n=document.querySelector(".gameboard-container.left");e.grid.map(((e,t)=>{let r=l("div",null,n,"row");e.map(((e,n)=>{let o=l("div",g(e),r,"column",function(e){return e.hasShip||e.wasGuessed?e.hasShip&&!e.wasGuessed?"clickable":!e.hasShip&&e.wasGuessed||e.hasShip&&e.wasGuessed?"unclickable":void 0:"clickable"}(e));o.dataset.col=n,o.dataset.row=t}))}))}(C.getComputerGameboard())}function I(){document.querySelectorAll(".gameboard-container").forEach((e=>e.textContent=""))}!function(){let e=document.querySelector(".initial-grid");for(let n=0;n<10;n++){let t=l("div",null,e,"row");for(let e=0;e<10;e++){let r=l("div","",t,"column","pregame-space");r.dataset.row=n,r.dataset.col=e}}}(),y(),c.addEventListener("click",(e=>{if(e.target.classList.contains("clickable")){const n=e.target.dataset;C.playRound([parseInt(n.col),parseInt(n.row)]),I(),y(),C.getIsGameOver()?document.querySelectorAll(".clickable").forEach((e=>{e.classList.remove("clickable"),e.classList.add("unclickable")})):(console.log("b"),C.playRound(),I(),y())}}))}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,