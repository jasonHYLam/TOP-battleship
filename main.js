(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>s});var r=t(537),o=t.n(r),i=t(645),a=t.n(i)()(o());a.push([e.id,"body {\n    margin: 0 auto;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    background-color: black;\n}\n.container {\n    display: flex;\n    flex-direction: row;\n    gap: 40px;\n}\n\n.clickable {\n    cursor: pointer;\n}\n\n.popup {\n    /* position: absolute; */\n    width: 1500px;\n    height: 700px;\n    background-color: cornflowerblue;\n}\n\n.blocker {\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    content: '';\n    position: fixed;\n}\n\n.pregame-space {\n    margin: 1px;\n    /* width: 30px;\n    height: 30px; */\n    border: black 1px solid;\n    background-color: white;\n    cursor: pointer;\n}\n\n.pregame-container {\n    display: flex;\n    flex-direction: row;\n    position: relative;\n}\n.ship-container {\n    height: auto;\n    display: flex;\n    flex-direction:column;\n    gap: 20px;\n}\n\n.ship {\n    height: 30px;\n    background-color: white;\n    cursor: pointer;\n}\n\n.carrier {\n    width: 150px;\n}\n\n.battleship {\n    width: 120px;\n}\n\n.cruiser, .submarine {\n    width: 90px;\n}\n\n.destroyer {\n    width: 60px;\n}\n\n.gameboard-container, .initial-grid {\n    width: 500px;\n    height: 500px;\n    display: flex;\n    flex-direction: column;\n    background-color: bisque;\n}\n\n.row {\n    flex: 1;\n    display: flex;\n}\n\n.column {\n    flex: 1;\n    background-color: grey;\n    /* justify-content: center; */\n    text-align: center;\n}\n\n\n\n.selected-ship-off-grid {\n    background-color: beige;\n    border: white solid 2px;\n    box-sizing: border-box;\n}\n\n\n.ship-in-space {\n    background-color: white;\n}\n\n.grey-out {\n    background-color: darkslategrey;\n}\n\n.valid-hovering {\n    background-color: aqua;\n}\n\n.invalid-hovering {\n    background-color: coral;\n}\n\n.ship-head-hover {\n    background-color: goldenrod;\n}\n\n\n.selected-ship-on-grid {\n    background-color: darkgrey;\n    \n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,cAAc;IACd,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,uBAAuB;AAC3B;AACA;IACI,aAAa;IACb,mBAAmB;IACnB,SAAS;AACb;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,wBAAwB;IACxB,aAAa;IACb,aAAa;IACb,gCAAgC;AACpC;;AAEA;IACI,MAAM;IACN,SAAS;IACT,OAAO;IACP,QAAQ;IACR,WAAW;IACX,eAAe;AACnB;;AAEA;IACI,WAAW;IACX;mBACe;IACf,uBAAuB;IACvB,uBAAuB;IACvB,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,kBAAkB;AACtB;AACA;IACI,YAAY;IACZ,aAAa;IACb,qBAAqB;IACrB,SAAS;AACb;;AAEA;IACI,YAAY;IACZ,uBAAuB;IACvB,eAAe;AACnB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,aAAa;IACb,sBAAsB;IACtB,wBAAwB;AAC5B;;AAEA;IACI,OAAO;IACP,aAAa;AACjB;;AAEA;IACI,OAAO;IACP,sBAAsB;IACtB,6BAA6B;IAC7B,kBAAkB;AACtB;;;;AAIA;IACI,uBAAuB;IACvB,uBAAuB;IACvB,sBAAsB;AAC1B;;;AAGA;IACI,uBAAuB;AAC3B;;AAEA;IACI,+BAA+B;AACnC;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,2BAA2B;AAC/B;;;AAGA;IACI,0BAA0B;;AAE9B",sourcesContent:["body {\n    margin: 0 auto;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    background-color: black;\n}\n.container {\n    display: flex;\n    flex-direction: row;\n    gap: 40px;\n}\n\n.clickable {\n    cursor: pointer;\n}\n\n.popup {\n    /* position: absolute; */\n    width: 1500px;\n    height: 700px;\n    background-color: cornflowerblue;\n}\n\n.blocker {\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    content: '';\n    position: fixed;\n}\n\n.pregame-space {\n    margin: 1px;\n    /* width: 30px;\n    height: 30px; */\n    border: black 1px solid;\n    background-color: white;\n    cursor: pointer;\n}\n\n.pregame-container {\n    display: flex;\n    flex-direction: row;\n    position: relative;\n}\n.ship-container {\n    height: auto;\n    display: flex;\n    flex-direction:column;\n    gap: 20px;\n}\n\n.ship {\n    height: 30px;\n    background-color: white;\n    cursor: pointer;\n}\n\n.carrier {\n    width: 150px;\n}\n\n.battleship {\n    width: 120px;\n}\n\n.cruiser, .submarine {\n    width: 90px;\n}\n\n.destroyer {\n    width: 60px;\n}\n\n.gameboard-container, .initial-grid {\n    width: 500px;\n    height: 500px;\n    display: flex;\n    flex-direction: column;\n    background-color: bisque;\n}\n\n.row {\n    flex: 1;\n    display: flex;\n}\n\n.column {\n    flex: 1;\n    background-color: grey;\n    /* justify-content: center; */\n    text-align: center;\n}\n\n\n\n.selected-ship-off-grid {\n    background-color: beige;\n    border: white solid 2px;\n    box-sizing: border-box;\n}\n\n\n.ship-in-space {\n    background-color: white;\n}\n\n.grey-out {\n    background-color: darkslategrey;\n}\n\n.valid-hovering {\n    background-color: aqua;\n}\n\n.invalid-hovering {\n    background-color: coral;\n}\n\n.ship-head-hover {\n    background-color: goldenrod;\n}\n\n\n.selected-ship-on-grid {\n    background-color: darkgrey;\n    \n}"],sourceRoot:""}]);const s=a},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);r&&a[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),n.push(d))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[n].concat([i]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var i={},a=[],s=0;s<e.length;s++){var c=e[s],l=r.base?c[0]+r.base:c[0],d=i[l]||0,u="".concat(l," ").concat(d);i[l]=d+1;var A=t(u),h={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==A)n[A].references++,n[A].updater(h);else{var p=o(h,r);r.byIndex=s,n.splice(s,0,{identifier:u,updater:p,references:1})}a.push(u)}return a}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var s=t(i[a]);n[s].references--}for(var c=r(e,o),l=0;l<i.length;l++){var d=t(i[l]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}i=c}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var i=n[r]={id:r,exports:{}};return e[r](i,i.exports,t),i.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0,(()=>{var e=t(379),n=t.n(e),r=t(795),o=t.n(r),i=t(569),a=t.n(i),s=t(565),c=t.n(s),l=t(216),d=t.n(l),u=t(589),A=t.n(u),h=t(426),p={};p.styleTagTransform=A(),p.setAttributes=c(),p.insert=a().bind(null,"head"),p.domAPI=o(),p.insertStyleElement=d(),n()(h.Z,p),h.Z&&h.Z.locals&&h.Z.locals;class f{constructor(e){this.length=e,this.hits=0,this.sunk=!1}setSunk(){this.sunk=!0}hit(){this.hits++}isSunk(){this.length===this.hits&&this.setSunk()}}class g{constructor(){this.hasShip=!1,this.wasGuessed=!1,this.missedHit=!1,this.ship=null}}class m{constructor(){this.grid=function(){let e=[];for(let n=0;n<10;n++){let n=[];for(let e=0;e<10;e++){const e=new g;n.push(e)}e.push(n)}return e}(),this.allShipCoords=[],this.guessedCoords=[]}isOutOfBounds(e,n){return e>9||n>9}checkIfAlreadyPlaced(e,n){return!0===this.grid[n][e].hasShip}populateShipCoordsArray(e,n){this.allShipCoords.push([e,n])}placeShip(e,n,[t,r]){if(this.isOutOfBounds(t,r))return"out of bounds";let o=function(e){if(!(e<1||e>5))return new f(e)}(e);if(o)switch(n){case"horizontal":for(let n=0;n<e;n++){if(this.isOutOfBounds(r,t+n))return"out of bounds";if(this.checkIfAlreadyPlaced(r,t+n))return"position already occupied"}for(let n=0;n<e;n++)this.grid[r][t+n].hasShip=!0,this.grid[r][t+n].ship=o,this.populateShipCoordsArray(t+n,r);break;case"vertical":for(let n=0;n<e;n++){if(this.isOutOfBounds(r+n,t))return"out of bounds";if(this.checkIfAlreadyPlaced(r+n,t))return"position already occupied"}for(let n=0;n<e;n++)this.grid[r+n][t].hasShip=!0,this.grid[r+n][t].ship=o,this.populateShipCoordsArray(t,r+n)}}placeAllShipsOnBoard(){this.placeShip(5,["horizontal","vertical"].Math.round(Math.random()),[Math.floor(10*Math.random()),Math.floor(10*Math.random())])}getPosition(e,n){return this.grid[n][e]}checkShipExists(e,n){return this.grid[n][e].hasShip}getShip(e,n){return this.grid[n][e].ship}checkMissedHit(e,n){return this.grid[n][e].missedHit}checkWasGuessed(e,n){return this.grid[n][e].wasGuessed}checkIsGameOver(){let e=this.allShipCoords.map((e=>JSON.stringify(e))),n=this.guessedCoords.map((e=>JSON.stringify(e)));return console.log(e),console.log(n),console.log(e.every((e=>n.includes(e)))),e.every((e=>n.includes(e)))}receiveAttack(e,n){if(this.checkWasGuessed(e,n))return"already attacked";this.getPosition(e,n).wasGuessed=!0,this.guessedCoords.push([e,n]),this.checkShipExists(e,n)?(this.getShip(e,n).hit(),this.getShip(e,n).isSunk()):this.getPosition(e,n).missedHit=!0}}class b{constructor(e){}attack(e,[n,t]){e.receiveAttack(n,t)}}class v extends b{constructor(){super()}randomAttack(e){const n=Math.floor(10*Math.random()),t=Math.floor(10*Math.random());e.checkWasGuessed(n,t)||this.attack(e,[n,t])}}!function(){let e=null,n=!1,t=!1;function r(){return t}function o(){t=!1}function i(){n=!1}function a(e,n){switch(!0){case e.contains("carrier"):n("carrier");break;case e.contains("battleship"):n("battleship");break;case e.contains("cruiser"):n("cruiser");break;case e.contains("submarine"):n("submarine");break;case e.contains("destroyer"):n("destroyer")}}let s={carrier:5,battleship:4,cruiser:3,submarine:3,destroyer:2},c={carrier:"horizontal",battleship:"horizontal",cruiser:"horizontal",submarine:"horizontal",destroyer:"horizontal"};function l(){return c[e]}function d(){return e}function u(n){e=n}function A(e){a(e.classList,u)}function h(){e=null}function p(){return s[e]}let f=document.querySelector("body");function g(e,n=null,t=null,...r){const o=document.createElement(e);return r.forEach((e=>o.classList.add(e))),n&&(o.textContent=n),t&&t.appendChild(o),o}function C(e){let n=document.querySelectorAll(`.${e}`);n&&n.forEach((n=>{n.classList.remove(e)}))}function y(){C("valid-hovering"),C("invalid-hovering"),C("ship-head-hover")}function I(){let e=document.querySelector(".selected-ship-off-grid");e&&e.classList.remove("selected-ship-off-grid")}function k(e,n){document.querySelector(`[data-col="${e}"][data-row="${n}"]`).classList.add("valid-hovering")}function x(e,n){document.querySelector(`[data-col="${e}"][data-row="${n}"]`).classList.add("invalid-hovering")}function B(e){!function(e){let n=!1;const t=parseInt(e.dataset.row),r=parseInt(e.dataset.col);let o=p();if("horizontal"===l()){for(let e=r;e<r+o;e++)if(e>9||G(e,t)){n=!0;break}if(n){if(n)for(let e=r;e<r+o&&!(e>9);e++)x(e,t)}else for(let e=r;e<r+o;e++)k(e,t)}else if("vertical"===l()){for(let e=t;e<t+o;e++)if(e>9||G(r,e)){n=!0;break}if(n){if(n)for(let e=t;e<t+o&&!(e>9);e++)x(r,e)}else for(let e=t;e<t+o;e++)k(r,e)}}(e)}function w(e,n){let t=document.querySelector(`[data-col="${e}"][data-row="${n}"]`);t.classList.add("ship-in-space"),t.classList.add(d())}function S(e){e.classList.add("ship-head")}function E(e){return e.classList.contains("ship-head")}function L(){document.querySelectorAll(".selected-ship-on-grid").forEach((e=>{e.classList.remove("selected-ship-on-grid")}))}function q(){let e=document.querySelector("i");e.parentNode.removeChild(e)}function O(e){let n=!1;const o=parseInt(e.dataset.row),i=parseInt(e.dataset.col);let a=p();if("horizontal"===l()&&!t||"vertical"===l()&&t){for(let e=i;e<i+a;e++)if(e>9||G(e,o)){n=!0;break}if(!n)for(let e=i;e<i+a;e++)w(e,o)}else if("vertical"===l()&&!t||"horizontal"==l()&&r()){for(let e=o;e<o+a;e++)if(e>9||G(i,e)){n=!0;break}if(!n)for(let e=o;e<o+a;e++)w(i,e)}}function G(e,n){return document.querySelector(`[data-col="${e}"][data-row="${n}"]`).classList.contains("ship-in-space")}function M(e){let n=!1;const o=p(),i=parseInt(e.dataset.row),a=parseInt(e.dataset.col);if("horizontal"===l()&&!t||"vertical"===l()&&t){for(let e=a+1;e<a+o;e++)if(e>10||G(e,i)){n=!0;break}}else if("vertical"===l()&&!t||"horizontal"==l()&&r())for(let e=i+1;e<i+o;e++)if(e>10||G(a,e)){n=!0;break}return n}function z(e){document.querySelector(".initial-grid").querySelectorAll(`.${e}`).forEach((n=>{n.classList.remove(e),n.classList.remove("ship-in-space")}))}function N(){console.log(`remove current ship from grid: ${d()}`),z(d())}function P(e){return e.hasShip||e.wasGuessed?e.hasShip&&!e.wasGuessed?"o":!e.hasShip&&e.wasGuessed?"m":e.hasShip&&e.wasGuessed?"X":void 0:"."}f.addEventListener("mouseover",(n=>{n.target.classList.contains("pregame-space")&&(y(),e&&B(n.target),a(n.target.classList,(function(e){document.querySelector(`.${e}.ship-head`).classList.add("ship-head-hover")})))})),f.addEventListener("mouseover",(e=>{e.target.classList.contains("ship-head")&&t&&function(e){const n=p();let t=!1;const r=parseInt(e.dataset.col),o=parseInt(e.dataset.row);if("horizontal"===l()){for(let e=o+1;e<o+n;e++)(e>9||G(r,e))&&(t=!0);if(t)for(let e=o;e<o+n&&!(e>9);e++)x(r,e);if(!t)for(let e=o;e<o+n;e++)k(r,e)}else if("vertical"===l()){for(let e=r+1;e<r+n;e++)(e>9||G(e,o))&&(t=!0);if(t)for(let e=r;e<r+n&&!(e>9);e++)x(e,o);if(!t)for(let e=r;e<r+n;e++)k(e,o)}}(e.target)})),document.querySelector(".initial-grid").addEventListener("mouseleave",(()=>{y()})),f.addEventListener("click",(r=>{if(r.target.classList.contains("ship-head")){function s(e){e.querySelector("i")&&e.removeChild(e.querySelector("i"));const n=document.querySelector("#icon-template").content.cloneNode(!0);e.appendChild(n.children[0])}if(t){if(t){if(M(r.target))return;N(),L(),q(),O(r.target),y(),console.log(l()),c[e]="horizontal"===c[e]?"vertical":"horizontal",console.log(l()),h(),o(),i(),console.log("ship head CLICKED and disable rotate mode and reset current ship")}}else console.log("ship head CLICKED and in NOW in rotate mode"),t=!0,n=!0,A(r.target),a(r.target.classList,(function(e){document.querySelector(".initial-grid").querySelectorAll(`.${e}`).forEach((e=>{e.classList.add("selected-ship-on-grid")}))})),s(r.target),B(r.target)}})),f.addEventListener("click",(t=>{if(e&&t.target.classList.contains("pregame-space")){if(M(t.target))return;n?(console.log("ship is MOVING"),E(t.target)?E(t.target)&&console.log("ship head was clicked"):(console.log("ship head NOT clicked, ship is moving"),document.querySelector(`.ship-head.${d()}`).classList.remove("ship-head"),q(),L(),N(),i(),o(),O(t.target),y(),S(t.target),h())):(console.log("ship NOT moving, placing for the first time"),document.querySelector(".selected-ship-off-grid").classList.add("grey-out"),I(),O(t.target),y(),S(t.target),h())}})),f.addEventListener("click",(e=>{let n=e.target.classList;n.contains("ship")&&(n.contains("grey-out")&&a(e.target.classList,z),I(),y(),n.add("selected-ship-off-grid"),A(e.target))}));let $=function(){let e=new m,n=new m;const t=new b,r=new v;let o=t,i=n,a=!1;function s(){o=o===t?r:t,i=i===e?n:e}function c(e){e.checkIsGameOver()&&(a=!0)}return e.placeShip(2,"vertical",[1,2]),n.placeShip(3,"vertical",[5,6]),n.placeShip(2,"vertical",[1,2]),{playRound:function(e=null){switch(o){case t:console.log("player"),o.attack(i,e),c(i),s();break;case r:console.log("computer"),function(){let e=JSON.stringify(i.guessedCoords),n=e,t=!1;for(;!t;)o.randomAttack(i),n=JSON.stringify(i.guessedCoords),e!==n&&(t=!0)}(),c(i),s()}},getPlayerGameboard:()=>e,getComputerGameboard:()=>n,getIsGameOver:()=>a}}();function T(){!function(e){let n=document.querySelector(".gameboard-container.right");e.grid.map(((e,t)=>{let r=g("div",null,n,"row");e.map((e=>{g("div",P(e),r,"column")}))}))}($.getPlayerGameboard()),function(e){let n=document.querySelector(".gameboard-container.left");e.grid.map(((e,t)=>{let r=g("div",null,n,"row");e.map(((e,n)=>{let o=g("div",P(e),r,"column",function(e){return e.hasShip||e.wasGuessed?e.hasShip&&!e.wasGuessed?"clickable":!e.hasShip&&e.wasGuessed||e.hasShip&&e.wasGuessed?"unclickable":void 0:"clickable"}(e));o.dataset.col=n,o.dataset.row=t}))}))}($.getComputerGameboard())}function W(){document.querySelectorAll(".gameboard-container").forEach((e=>e.textContent=""))}!function(){let e=document.querySelector(".initial-grid");for(let n=0;n<10;n++){let t=g("div",null,e,"row");for(let e=0;e<10;e++){let r=g("div","",t,"column","pregame-space");r.dataset.row=n,r.dataset.col=e}}}(),T(),f.addEventListener("click",(e=>{if(e.target.classList.contains("clickable")){const n=e.target.dataset;$.playRound([parseInt(n.col),parseInt(n.row)]),W(),T(),$.getIsGameOver()?document.querySelectorAll(".clickable").forEach((e=>{e.classList.remove("clickable"),e.classList.add("unclickable")})):(console.log("b"),$.playRound(),W(),T())}}))}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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U1ksSUFDcUI1TSxTQUFTOEksaUJBQWlCLHdCQUNoQ1AsU0FBUXNFLEdBQWFBLEVBQVVuRSxZQUFjLElBQ3JFLEVBdGZBLFdBQ0ksSUFBSW9FLEVBQWM5TSxTQUFTQyxjQUFjLGlCQUN6QyxJQUFLLElBQUl2RCxFQUFJLEVBQUdBLEVBQUksR0FBSUEsSUFBSyxDQUN6QixJQUFJNFAsRUFBYXJFLEVBQW9CLE1BQU8sS0FBTTZFLEVBQWEsT0FDL0QsSUFBSyxJQUFJNUksRUFBSSxFQUFHQSxFQUFJLEdBQUlBLElBQUssQ0FDekIsSUFBSXVJLEVBQWV4RSxFQUFvQixNQUFPLEdBQUlxRSxFQUFZLFNBQVUsaUJBQ3hFRyxFQUFhL0MsUUFBUXpGLElBQU12SCxFQUMzQitQLEVBQWEvQyxRQUFRbEYsSUFBTU4sQ0FDL0IsQ0FDSixDQUNKLENBdWZBNkksR0FDQVosSUFxQkFuRSxFQUFZMEMsaUJBQWlCLFNBQVVzQyxJQUNuQyxHQUFJQSxFQUFHbE4sT0FBTytILFVBQVVQLFNBQVMsYUFBYyxDQUMzQyxNQUFNeUIsRUFBUWlFLEVBQUdsTixPQUFPNEosUUFDeEJ1QixFQUFlUSxVQUFVLENBQUNoQyxTQUFTVixFQUFNdkUsS0FBTWlGLFNBQVNWLEVBQU05RSxPQUM5RDJJLElBQ0FULElBbEJHbEIsRUFBZWdCLGdCQUtKak0sU0FBUzhJLGlCQUFpQixjQUNsQ1AsU0FBUXlFLElBQ2RBLEVBQUduRixVQUFVekksT0FBTyxhQUNwQjROLEVBQUduRixVQUFVWSxJQUFJLGNBQWEsS0FjMUIxQyxRQUFRQyxJQUFJLEtBQ1ppRixFQUFlUSxZQUNmbUIsSUFDQVQsSUFFUixJQUVSLENFem5CQWMsRSIsInNvdXJjZXMiOlsid2VicGFjazovL3RvcC1iYXR0bGVzaGlwLy4vc3JjL3N0eWxlLmNzcyIsIndlYnBhY2s6Ly90b3AtYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vdG9wLWJhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly90b3AtYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly90b3AtYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vdG9wLWJhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vdG9wLWJhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vdG9wLWJhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly90b3AtYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL3RvcC1iYXR0bGVzaGlwL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3RvcC1iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3RvcC1iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly90b3AtYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3RvcC1iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly90b3AtYmF0dGxlc2hpcC8uL3NyYy9zdHlsZS5jc3M/NzE2MyIsIndlYnBhY2s6Ly90b3AtYmF0dGxlc2hpcC8uL3NyYy9zaGlwLmpzIiwid2VicGFjazovL3RvcC1iYXR0bGVzaGlwLy4vc3JjL2dhbWVib2FyZC5qcyIsIndlYnBhY2s6Ly90b3AtYmF0dGxlc2hpcC8uL3NyYy9wbGF5ZXIuanMiLCJ3ZWJwYWNrOi8vdG9wLWJhdHRsZXNoaXAvLi9zcmMvZGlzcGxheUNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vdG9wLWJhdHRsZXNoaXAvLi9zcmMvZ2FtZUNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vdG9wLWJhdHRsZXNoaXAvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYGJvZHkge1xuICAgIG1hcmdpbjogMCBhdXRvO1xuICAgIGhlaWdodDogMTAwJTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBibGFjaztcbn1cbi5jb250YWluZXIge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgICBnYXA6IDQwcHg7XG59XG5cbi5jbGlja2FibGUge1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbn1cblxuLnBvcHVwIHtcbiAgICAvKiBwb3NpdGlvbjogYWJzb2x1dGU7ICovXG4gICAgd2lkdGg6IDE1MDBweDtcbiAgICBoZWlnaHQ6IDcwMHB4O1xuICAgIGJhY2tncm91bmQtY29sb3I6IGNvcm5mbG93ZXJibHVlO1xufVxuXG4uYmxvY2tlciB7XG4gICAgdG9wOiAwO1xuICAgIGJvdHRvbTogMDtcbiAgICBsZWZ0OiAwO1xuICAgIHJpZ2h0OiAwO1xuICAgIGNvbnRlbnQ6ICcnO1xuICAgIHBvc2l0aW9uOiBmaXhlZDtcbn1cblxuLnByZWdhbWUtc3BhY2Uge1xuICAgIG1hcmdpbjogMXB4O1xuICAgIC8qIHdpZHRoOiAzMHB4O1xuICAgIGhlaWdodDogMzBweDsgKi9cbiAgICBib3JkZXI6IGJsYWNrIDFweCBzb2xpZDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG59XG5cbi5wcmVnYW1lLWNvbnRhaW5lciB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbn1cbi5zaGlwLWNvbnRhaW5lciB7XG4gICAgaGVpZ2h0OiBhdXRvO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246Y29sdW1uO1xuICAgIGdhcDogMjBweDtcbn1cblxuLnNoaXAge1xuICAgIGhlaWdodDogMzBweDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG59XG5cbi5jYXJyaWVyIHtcbiAgICB3aWR0aDogMTUwcHg7XG59XG5cbi5iYXR0bGVzaGlwIHtcbiAgICB3aWR0aDogMTIwcHg7XG59XG5cbi5jcnVpc2VyLCAuc3VibWFyaW5lIHtcbiAgICB3aWR0aDogOTBweDtcbn1cblxuLmRlc3Ryb3llciB7XG4gICAgd2lkdGg6IDYwcHg7XG59XG5cbi5nYW1lYm9hcmQtY29udGFpbmVyLCAuaW5pdGlhbC1ncmlkIHtcbiAgICB3aWR0aDogNTAwcHg7XG4gICAgaGVpZ2h0OiA1MDBweDtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgYmFja2dyb3VuZC1jb2xvcjogYmlzcXVlO1xufVxuXG4ucm93IHtcbiAgICBmbGV4OiAxO1xuICAgIGRpc3BsYXk6IGZsZXg7XG59XG5cbi5jb2x1bW4ge1xuICAgIGZsZXg6IDE7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogZ3JleTtcbiAgICAvKiBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsgKi9cbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG5cblxuXG4uc2VsZWN0ZWQtc2hpcC1vZmYtZ3JpZCB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogYmVpZ2U7XG4gICAgYm9yZGVyOiB3aGl0ZSBzb2xpZCAycHg7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbn1cblxuXG4uc2hpcC1pbi1zcGFjZSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG59XG5cbi5ncmV5LW91dCB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogZGFya3NsYXRlZ3JleTtcbn1cblxuLnZhbGlkLWhvdmVyaW5nIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBhcXVhO1xufVxuXG4uaW52YWxpZC1ob3ZlcmluZyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogY29yYWw7XG59XG5cbi5zaGlwLWhlYWQtaG92ZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6IGdvbGRlbnJvZDtcbn1cblxuXG4uc2VsZWN0ZWQtc2hpcC1vbi1ncmlkIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBkYXJrZ3JleTtcbiAgICBcbn1gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7SUFDSSxjQUFjO0lBQ2QsWUFBWTtJQUNaLGFBQWE7SUFDYixzQkFBc0I7SUFDdEIsbUJBQW1CO0lBQ25CLHVCQUF1QjtBQUMzQjtBQUNBO0lBQ0ksYUFBYTtJQUNiLG1CQUFtQjtJQUNuQixTQUFTO0FBQ2I7O0FBRUE7SUFDSSxlQUFlO0FBQ25COztBQUVBO0lBQ0ksd0JBQXdCO0lBQ3hCLGFBQWE7SUFDYixhQUFhO0lBQ2IsZ0NBQWdDO0FBQ3BDOztBQUVBO0lBQ0ksTUFBTTtJQUNOLFNBQVM7SUFDVCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFdBQVc7SUFDWCxlQUFlO0FBQ25COztBQUVBO0lBQ0ksV0FBVztJQUNYO21CQUNlO0lBQ2YsdUJBQXVCO0lBQ3ZCLHVCQUF1QjtJQUN2QixlQUFlO0FBQ25COztBQUVBO0lBQ0ksYUFBYTtJQUNiLG1CQUFtQjtJQUNuQixrQkFBa0I7QUFDdEI7QUFDQTtJQUNJLFlBQVk7SUFDWixhQUFhO0lBQ2IscUJBQXFCO0lBQ3JCLFNBQVM7QUFDYjs7QUFFQTtJQUNJLFlBQVk7SUFDWix1QkFBdUI7SUFDdkIsZUFBZTtBQUNuQjs7QUFFQTtJQUNJLFlBQVk7QUFDaEI7O0FBRUE7SUFDSSxZQUFZO0FBQ2hCOztBQUVBO0lBQ0ksV0FBVztBQUNmOztBQUVBO0lBQ0ksV0FBVztBQUNmOztBQUVBO0lBQ0ksWUFBWTtJQUNaLGFBQWE7SUFDYixhQUFhO0lBQ2Isc0JBQXNCO0lBQ3RCLHdCQUF3QjtBQUM1Qjs7QUFFQTtJQUNJLE9BQU87SUFDUCxhQUFhO0FBQ2pCOztBQUVBO0lBQ0ksT0FBTztJQUNQLHNCQUFzQjtJQUN0Qiw2QkFBNkI7SUFDN0Isa0JBQWtCO0FBQ3RCOzs7O0FBSUE7SUFDSSx1QkFBdUI7SUFDdkIsdUJBQXVCO0lBQ3ZCLHNCQUFzQjtBQUMxQjs7O0FBR0E7SUFDSSx1QkFBdUI7QUFDM0I7O0FBRUE7SUFDSSwrQkFBK0I7QUFDbkM7O0FBRUE7SUFDSSxzQkFBc0I7QUFDMUI7O0FBRUE7SUFDSSx1QkFBdUI7QUFDM0I7O0FBRUE7SUFDSSwyQkFBMkI7QUFDL0I7OztBQUdBO0lBQ0ksMEJBQTBCOztBQUU5QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJib2R5IHtcXG4gICAgbWFyZ2luOiAwIGF1dG87XFxuICAgIGhlaWdodDogMTAwJTtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7XFxufVxcbi5jb250YWluZXIge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xcbiAgICBnYXA6IDQwcHg7XFxufVxcblxcbi5jbGlja2FibGUge1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5wb3B1cCB7XFxuICAgIC8qIHBvc2l0aW9uOiBhYnNvbHV0ZTsgKi9cXG4gICAgd2lkdGg6IDE1MDBweDtcXG4gICAgaGVpZ2h0OiA3MDBweDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogY29ybmZsb3dlcmJsdWU7XFxufVxcblxcbi5ibG9ja2VyIHtcXG4gICAgdG9wOiAwO1xcbiAgICBib3R0b206IDA7XFxuICAgIGxlZnQ6IDA7XFxuICAgIHJpZ2h0OiAwO1xcbiAgICBjb250ZW50OiAnJztcXG4gICAgcG9zaXRpb246IGZpeGVkO1xcbn1cXG5cXG4ucHJlZ2FtZS1zcGFjZSB7XFxuICAgIG1hcmdpbjogMXB4O1xcbiAgICAvKiB3aWR0aDogMzBweDtcXG4gICAgaGVpZ2h0OiAzMHB4OyAqL1xcbiAgICBib3JkZXI6IGJsYWNrIDFweCBzb2xpZDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLnByZWdhbWUtY29udGFpbmVyIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG4uc2hpcC1jb250YWluZXIge1xcbiAgICBoZWlnaHQ6IGF1dG87XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOmNvbHVtbjtcXG4gICAgZ2FwOiAyMHB4O1xcbn1cXG5cXG4uc2hpcCB7XFxuICAgIGhlaWdodDogMzBweDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLmNhcnJpZXIge1xcbiAgICB3aWR0aDogMTUwcHg7XFxufVxcblxcbi5iYXR0bGVzaGlwIHtcXG4gICAgd2lkdGg6IDEyMHB4O1xcbn1cXG5cXG4uY3J1aXNlciwgLnN1Ym1hcmluZSB7XFxuICAgIHdpZHRoOiA5MHB4O1xcbn1cXG5cXG4uZGVzdHJveWVyIHtcXG4gICAgd2lkdGg6IDYwcHg7XFxufVxcblxcbi5nYW1lYm9hcmQtY29udGFpbmVyLCAuaW5pdGlhbC1ncmlkIHtcXG4gICAgd2lkdGg6IDUwMHB4O1xcbiAgICBoZWlnaHQ6IDUwMHB4O1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBiaXNxdWU7XFxufVxcblxcbi5yb3cge1xcbiAgICBmbGV4OiAxO1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbn1cXG5cXG4uY29sdW1uIHtcXG4gICAgZmxleDogMTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogZ3JleTtcXG4gICAgLyoganVzdGlmeS1jb250ZW50OiBjZW50ZXI7ICovXFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuXFxuXFxuXFxuLnNlbGVjdGVkLXNoaXAtb2ZmLWdyaWQge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBiZWlnZTtcXG4gICAgYm9yZGVyOiB3aGl0ZSBzb2xpZCAycHg7XFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcblxcblxcbi5zaGlwLWluLXNwYWNlIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxufVxcblxcbi5ncmV5LW91dCB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IGRhcmtzbGF0ZWdyZXk7XFxufVxcblxcbi52YWxpZC1ob3ZlcmluZyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IGFxdWE7XFxufVxcblxcbi5pbnZhbGlkLWhvdmVyaW5nIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogY29yYWw7XFxufVxcblxcbi5zaGlwLWhlYWQtaG92ZXIge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBnb2xkZW5yb2Q7XFxufVxcblxcblxcbi5zZWxlY3RlZC1zaGlwLW9uLWdyaWQge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBkYXJrZ3JleTtcXG4gICAgXFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTtcblxuICAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTtcblxuICAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG5cbiAgICAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cbiAgY3NzICs9IG9iai5jc3M7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH1cblxuICAvLyBGb3Igb2xkIElFXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoKSB7fSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICB9O1xuICB9XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5uYyA9IHVuZGVmaW5lZDsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcbmNsYXNzIFNoaXAge1xuICAgIC8vIGkgbmVlZCB0byBtYWtlIHN1cmUgbGVuZ3RoIGlzIGJldHdlZW4gMSBhbmQgNFxuICAgIGNvbnN0cnVjdG9yKGxlbmd0aCkge1xuICAgICAgICB0aGlzLmxlbmd0aCA9IGxlbmd0aDtcbiAgICAgICAgdGhpcy5oaXRzID0gMDtcbiAgICAgICAgdGhpcy5zdW5rID0gZmFsc2U7XG4gICAgfVxuXG4gICAgc2V0U3VuaygpIHtcbiAgICAgICAgdGhpcy5zdW5rID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBoaXQoKSB7XG4gICAgICAgIHRoaXMuaGl0cyArK1xuICAgIH1cblxuICAgIGlzU3VuaygpIHtcbiAgICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSB0aGlzLmhpdHMpIHRoaXMuc2V0U3VuaygpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaW5pdGlhbGlzZVNoaXAobGVuZ3RoKSB7XG4gICAgaWYgKGxlbmd0aCA8IDEgfHwgbGVuZ3RoID4gNSkgcmV0dXJuIFxuICAgIHJldHVybiBuZXcgU2hpcChsZW5ndGgpXG59XG5cblxuZXhwb3J0IHtpbml0aWFsaXNlU2hpcCwgU2hpcH0iLCJpbXBvcnQgeyBTaGlwLCBpbml0aWFsaXNlU2hpcCB9IGZyb20gXCIuL3NoaXBcIjtcblxuY2xhc3MgU3BhY2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmhhc1NoaXAgPSBmYWxzZTtcbiAgICAgICAgdGhpcy53YXNHdWVzc2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMubWlzc2VkSGl0ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc2hpcCA9IG51bGw7XG4gICAgfVxufVxuXG4vLyBub3Qgc3VyZSB3aGVyZSB0byBwdXQgdGhpcyBidXQgbmVlZCB0byBiZSBjYXJlZnVsIGFib3V0IG9yZGluYXRlIG9yZGVyOyBjb2wscm93IHZzIHJvdywgY29sXG4vLyB1c2UgY29sLHJvdyBmb3IgbWV0aG9kIGFyZ3VtZW50cyBhbmQgcHVzaGluZyBpbnRvIHZhcmlhYmxlcyBsaWtlIGd1ZXNzZWRDb29yZHNcbi8vIHVzZSByb3csIGNvbCBmb3IgZ2FtZWJvYXJkIGxvZ2ljXG5jbGFzcyBHYW1lYm9hcmQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBmdW5jdGlvbiBjcmVhdGVHcmlkKCkge1xuICAgICAgICAgICAgbGV0IG5ld0dyaWQgPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpPDEwOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgcm93ID0gW107XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGo8MTA7IGorKykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzcXVhcmUgPSBuZXcgU3BhY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgcm93LnB1c2goc3F1YXJlKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBuZXdHcmlkLnB1c2gocm93KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ld0dyaWRcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmdyaWQgPSBjcmVhdGVHcmlkKCk7XG4gICAgICAgIHRoaXMuYWxsU2hpcENvb3JkcyA9IFtdO1xuICAgICAgICB0aGlzLmd1ZXNzZWRDb29yZHMgPSBbXTtcbiAgICB9XG5cbiAgICBpc091dE9mQm91bmRzKGNvbCwgcm93KSB7XG4gICAgICAgIGlmIChjb2wgPiA5IHx8IHJvdyA+IDkpIHJldHVybiB0cnVlO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY2hlY2tJZkFscmVhZHlQbGFjZWQoY29sLCByb3cpIHtcbiAgICAgICAgaWYgKHRoaXMuZ3JpZFtyb3ddW2NvbF0uaGFzU2hpcCA9PT0gdHJ1ZSkgcmV0dXJuIHRydWU7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBwb3B1bGF0ZVNoaXBDb29yZHNBcnJheShjb2wsIHJvdykge1xuICAgICAgICB0aGlzLmFsbFNoaXBDb29yZHMucHVzaChbY29sLCByb3ddKVxuICAgIH1cblxuICAgIHBsYWNlU2hpcChsZW5ndGgsIG9yaWVudGF0aW9uLCBbc3RhcnRDb2wsIHN0YXJ0Um93XSkge1xuXG4gICAgICAgIC8vIHRlc3QgaWYgc3RhcnQgY29vcmQgaXMgb3V0IG9mIGJvdW5kc1xuICAgICAgICBpZiAodGhpcy5pc091dE9mQm91bmRzKHN0YXJ0Q29sLCBzdGFydFJvdykpIHJldHVybiAnb3V0IG9mIGJvdW5kcyc7XG5cbiAgICAgICAgbGV0IG5ld1NoaXAgPSBpbml0aWFsaXNlU2hpcChsZW5ndGgpO1xuICAgICAgICBpZiAoIW5ld1NoaXApIHJldHVybjtcblxuICAgICAgICBzd2l0Y2gob3JpZW50YXRpb24pIHtcbiAgICAgICAgICAgIC8vIGlmIG9yaWVudGF0aW9uIGlzIGhvcml6b250YWxcbiAgICAgICAgICAgIC8vIHN0dWZmIGhhcHBlbnMgZnJvbSBsZWZ0IHRvIHJpZ2h0XG4gICAgICAgICAgICBjYXNlICdob3Jpem9udGFsJzpcbiAgICAgICAgICAgICAgICAvL2xvb3AgZm9yIGxlbmd0aCBhbmQgY2hlY2sgaWYgb3V0IG9mIGJvdW5kcyBvciBhbHJlYWR5IG9jY3VwaWVkOyBpZiBzbyBjYW5jZWwgZXhlY3V0aW9uXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGk8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzT3V0T2ZCb3VuZHMoc3RhcnRSb3csIHN0YXJ0Q29sICsgaSkpIHJldHVybiAnb3V0IG9mIGJvdW5kcyc7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNoZWNrSWZBbHJlYWR5UGxhY2VkKHN0YXJ0Um93LCBzdGFydENvbCArIGkpKSByZXR1cm4gJ3Bvc2l0aW9uIGFscmVhZHkgb2NjdXBpZWQnO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIGVsc2UsIGxvb3AgYWxvbmcgdGhlIHJvdyAob2NjdXB5IGNvbHVtbnMgb2YgdGhlIHNhbWUgcm93KVxuICAgICAgICAgICAgICAgIC8vIGF0IGVhY2ggZ3JpZCBzcXVhcmUsIG9jY3VweSB3aXRoIHNoaXAgSURcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaTwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICB0aGlzLmdyaWRbc3RhcnRSb3ddW3N0YXJ0Q29sICsgaV0uaGFzU2hpcCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgLy8gdGhpcyBtYXkgYmUgbm90IGdvb2RcbiAgICAgICAgICAgICAgICAgICB0aGlzLmdyaWRbc3RhcnRSb3ddW3N0YXJ0Q29sICsgaV0uc2hpcCA9IG5ld1NoaXA7XG5cbiAgICAgICAgICAgICAgICAgICAvLyBtYXkgYmUgYW4gZXJyb3IgaW4gdGhlIGNvbCBhbmQgcm93IGFyZ3VtZW50IG9yZGVyXG4gICAgICAgICAgICAgICAgICAgLy9ub3QgdW5kZXJzdGFuZC4uLlxuICAgICAgICAgICAgICAgICAgIC8vIGNoYW5nZSB0aGlzIGZyb20gc3BhY2VzLCB0byBjb29yZGluYXRlcywgY3VzIGkgZG9uJ3Qgd2FudCBhIGNvcHkgb2Ygb2JqZWN0c1xuICAgICAgICAgICAgICAgICAgIHRoaXMucG9wdWxhdGVTaGlwQ29vcmRzQXJyYXkoc3RhcnRDb2wgKyBpLCBzdGFydFJvdylcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWtcblxuICAgICAgICAgICAgLy8gaWYgb3JpZW50YXRpb24gaXMgdmVydGljYWxcbiAgICAgICAgICAgIC8vIHNoaXAgaXMgY3JlYXRlZCBmcm9tIGJvdHRvbSB0byB0b3BcbiAgICAgICAgICAgIC8vIHJvd1swXSBpcyBib3R0b20sIHJvd1s5XSB0byB0b3AsIGR1ZSB0byB0aGUgYDkgLSBgXG4gICAgICAgICAgICBjYXNlICd2ZXJ0aWNhbCc6XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGk8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzT3V0T2ZCb3VuZHMoc3RhcnRSb3cgKyBpLCBzdGFydENvbCkpIHJldHVybiAnb3V0IG9mIGJvdW5kcydcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY2hlY2tJZkFscmVhZHlQbGFjZWQoc3RhcnRSb3cgKyBpLCBzdGFydENvbCkpIHJldHVybiAncG9zaXRpb24gYWxyZWFkeSBvY2N1cGllZCdcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBhbmQgdGhlbiBwdXQgc3R1ZmYgYWxvbmcgdGhlIGNvbHVtbiAob2NjdXB5IHJvd3Mgb2YgdGhlIHNhbWUgY29sdW1uKVxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdyaWRbc3RhcnRSb3cgKyBpXVtzdGFydENvbF0uaGFzU2hpcCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ3JpZFtzdGFydFJvdyArIGldW3N0YXJ0Q29sXS5zaGlwID0gbmV3U2hpcDtcblxuICAgICAgICAgICAgICAgICAgIC8vIG1heSBiZSBhbiBlcnJvciBpbiB0aGUgY29sIGFuZCByb3cgYXJndW1lbnQgb3JkZXJcbiAgICAgICAgICAgICAgICAgICAvLyBjaGFuZ2UgdGhpcyBmcm9tIHNwYWNlcywgdG8gY29vcmRpbmF0ZXMsIGN1cyBpIGRvbid0IHdhbnQgYSBjb3B5IG9mIG9iamVjdHNcbiAgICAgICAgICAgICAgICAgICB0aGlzLnBvcHVsYXRlU2hpcENvb3Jkc0FycmF5KHN0YXJ0Q29sLCBzdGFydFJvdyArIGkpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyB3aGF0IGRvIGkgcGxhY2Ugb24gdGhlIGJvYXJkP1xuICAgIC8vIDUgcGllY2VzIGkgdGhpbmtcbiAgICAvLyBobW0gaG93IGRvIGkga2VlcCB0cnlpbmcgdG8gcGxhY2UgdGhlIHNoaXBzIGlmIHRoZXkgYXJlIG91dCBvZiBib3VuZHMgb3IgYWxyZWFkeSBwYWxjZWQ/XG4gICAgLy8gc2hvdWxkIGkganVzdCBwdXQgZWFjaCBpbiBhIHdoaWxlIGxvb3A/IG9yIHVzZSByZWN1cnNpb24/XG5cbiAgICBwbGFjZUFsbFNoaXBzT25Cb2FyZCgpIHtcbiAgICAgICAgLy8gbmVlZCB0byBwdXQgc2hpcHMgaG9yaXpvbnRhbGx5IG9yIHZlcnRpY2FsbHkgcmFuZG9tbHlcbiAgICAgICAgLy8gdGhpcyB3aWxsIG9ubHkgZ2VuZXJhdGUgb25lIG9yaWVudGF0aW9uLi4uIG1ha2UgaXQgYSBzZXBhcmF0ZSBmdW5jdGlvblxuICAgICAgICBmdW5jdGlvbiBnZW5lcmF0ZVJhbmRvbU9yaWVudGF0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIFsnaG9yaXpvbnRhbCcsICd2ZXJ0aWNhbCddLk1hdGgucm91bmQoTWF0aC5yYW5kb20oKSlcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdlbmVyYXRlUmFuZG9tQ29vcmRpbmF0ZXMoKSB7XG4gICAgICAgICAgICBjb25zdCByYW5kb21Db2wgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMClcbiAgICAgICAgICAgIGNvbnN0IHJhbmRvbVJvdyA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKVxuICAgICAgICAgICAgcmV0dXJuIFtyYW5kb21Db2wsIHJhbmRvbVJvd11cbiAgICAgICAgfVxuXG5cbiAgICAgICAgLy9ob3cgZG8gaSBwcmV2ZW50IGZhaWx1cmUgdG8gcGxhY2UgYSBzaGlwPyBpcyBpdCBcbiAgICAgICAgLy8gdGhlcmUgYXJlIHNldmVyYWwgb3B0aW9ucy4uLiBcbiAgICAgICAgLy8gd2hpbGUgKCkge31cbiAgICAgICAgdGhpcy5wbGFjZVNoaXAoNSwgZ2VuZXJhdGVSYW5kb21PcmllbnRhdGlvbigpLCBnZW5lcmF0ZVJhbmRvbUNvb3JkaW5hdGVzKCkpXG5cbiAgICB9XG5cbiAgICBnZXRQb3NpdGlvbihjb2wsIHJvdykge1xuICAgICAgICByZXR1cm4gdGhpcy5ncmlkW3Jvd11bY29sXVxuICAgIH1cblxuICAgIGNoZWNrU2hpcEV4aXN0cyhjb2wsIHJvdykge1xuICAgICAgICByZXR1cm4gdGhpcy5ncmlkW3Jvd11bY29sXS5oYXNTaGlwXG4gICAgfVxuXG5cbiAgICBnZXRTaGlwKGNvbCwgcm93KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdyaWRbcm93XVtjb2xdLnNoaXBcbiAgICB9XG5cbiAgICBjaGVja01pc3NlZEhpdChjb2wsIHJvdykge1xuICAgICAgICByZXR1cm4gdGhpcy5ncmlkW3Jvd11bY29sXS5taXNzZWRIaXRcbiAgICB9XG5cbiAgICBjaGVja1dhc0d1ZXNzZWQoY29sLCByb3cpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ3JpZFtyb3ddW2NvbF0ud2FzR3Vlc3NlZFxuICAgIH1cblxuICAgIC8vIGNvbXBhcmUgc3RyaW5naWZpZWQgc2hpcCBjb29yZHMgdG8gdGhlIGd1ZXNzZWQgY29vcmRzLCBhbmQgcmV0dXJuIHRydWUgaWYgYWxsIHNoaXAgY29vcmRzIGFyZSBndWVzc2VkLlxuICAgIGNoZWNrSXNHYW1lT3ZlcigpIHtcbiAgICAgICAgbGV0IGNvbnZlcnRlZEFsbFNoaXBDb29yZHMgPSB0aGlzLmFsbFNoaXBDb29yZHMubWFwKGNvb3JkID0+IEpTT04uc3RyaW5naWZ5KGNvb3JkKSlcbiAgICAgICAgbGV0IGNvbnZlcnRlZEd1ZXNzZWRDb29yZHMgPSB0aGlzLmd1ZXNzZWRDb29yZHMubWFwKGNvb3JkID0+SlNPTi5zdHJpbmdpZnkoY29vcmQpKVxuICAgICAgICBjb25zb2xlLmxvZyhjb252ZXJ0ZWRBbGxTaGlwQ29vcmRzKVxuICAgICAgICBjb25zb2xlLmxvZyhjb252ZXJ0ZWRHdWVzc2VkQ29vcmRzKVxuICAgICAgICAvLyBpZiAoY29udmVydGVkQWxsU2hpcENvb3Jkcy5ldmVyeShzaGlwQ29vcmQgPT4gY29udmVydGVkR3Vlc3NlZENvb3Jkcy5pbmNsdWRlcyhzaGlwQ29vcmQpKSkge1xuICAgICAgICAvLyAgICAgdGhpcy5pc0dhbWVPdmVyID0gdHJ1ZTtcbiAgICAgICAgLy8gfVxuICAgICAgICBjb25zb2xlLmxvZyhjb252ZXJ0ZWRBbGxTaGlwQ29vcmRzLmV2ZXJ5KHNoaXBDb29yZCA9PiBjb252ZXJ0ZWRHdWVzc2VkQ29vcmRzLmluY2x1ZGVzKHNoaXBDb29yZCkpKVxuICAgICAgICByZXR1cm4gY29udmVydGVkQWxsU2hpcENvb3Jkcy5ldmVyeShzaGlwQ29vcmQgPT4gY29udmVydGVkR3Vlc3NlZENvb3Jkcy5pbmNsdWRlcyhzaGlwQ29vcmQpKVxuICAgIH1cblxuICAgIHJlY2VpdmVBdHRhY2soY29sLCByb3cpIHtcbiAgICAgICAgLy8gZmlyc3QsIGNoZWNrIGlmIHBvc2l0aW9uIGlzIGFscmVhZHkgZ3Vlc3NlZFxuICAgICAgICBpZiAodGhpcy5jaGVja1dhc0d1ZXNzZWQoY29sLCByb3cpKSByZXR1cm4gJ2FscmVhZHkgYXR0YWNrZWQnO1xuICAgICAgICAvLyBpZiBub3QgZ3Vlc3NlZCwgdGhlbiBtYXJrIGFzIGd1ZXNzZWRcbiAgICAgICAgdGhpcy5nZXRQb3NpdGlvbihjb2wsIHJvdykud2FzR3Vlc3NlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuZ3Vlc3NlZENvb3Jkcy5wdXNoKFtjb2wsIHJvd10pXG5cbiAgICAgICAgLy8gaWYgbm90LCBjaGVjayBpZiB0aGVyZSBpcyBhIHNoaXAgdGhlcmVcbiAgICAgICAgaWYgKHRoaXMuY2hlY2tTaGlwRXhpc3RzKGNvbCwgcm93KSkge1xuICAgICAgICAgICAgLy8gaWYgdGhlcmUgaXMsIHRoZW4gaWRlbnRpZnkgdGhlIHNoaXBcbiAgICAgICAgICAgIC8vIHRoZW4gaGl0IHRoZSBzaGlwXG4gICAgICAgICAgICB0aGlzLmdldFNoaXAoY29sLCByb3cpLmhpdCgpXG4gICAgICAgICAgICAvLyB0aGVuIGNoZWNrIGlmIHNoaXAgaXMgc3Vua1xuICAgICAgICAgICAgdGhpcy5nZXRTaGlwKGNvbCwgcm93KS5pc1N1bmsoKTtcblxuICAgICAgICAgICAgLy8gdGhlbiBjaGVjayBpZiBhbGwgc2hpcHMgYXJlIGhpdCwgYnkgY29tcGFyaW5nIGFsbFNoaXBDb29yZHMgYW5kIGd1ZXNzZWRDb29yZHMgYXJyYXlzIFxuICAgICAgICAgICAgLy8gdGhpcy5jaGVja0lzR2FtZU92ZXIoKTtcblxuICAgICAgICB9XG4gICAgICAgIC8vIGlmIHRoZXJlIGlzbid0IGEgc2hpcCwgdGhlbiBtYXJrIHRoZSBwbGFjZSB3aXRoIG1pc3NlZEhpdFxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZ2V0UG9zaXRpb24oY29sLCByb3cpLm1pc3NlZEhpdCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBcbn1cbmV4cG9ydCB7R2FtZWJvYXJkfSIsImV4cG9ydCBjbGFzcyBQbGF5ZXIge1xuICAgIGNvbnN0cnVjdG9yKGNvbXB1dGVyKSB7XG4gICAgfVxuXG4gICAgLy8gaG1tIGlzIHRoaXMgb2theT8gZG8gaSBuZWVkIHRvIGltcG9ydCBnYW1lYm9hcmQ/IHN1cmVseSBub3QuLi4gdGhhdCB3b3VsZCBiZSBhd2Z1bFxuICAgIC8vIGkganVzdCBjYWxsZWQgdGhlIHJlY2VpdmVBdHRhY2sgbWV0aG9kIG9uIHRoZSBnYW1lYm9hcmQgYXJndW1lbnQuLi4gaXMgdGhpcyBhIGJhZCB0aGluZz9cbiAgICBhdHRhY2soZ2FtZWJvYXJkLCBbY29sLCByb3ddKSB7XG4gICAgICAgIGdhbWVib2FyZC5yZWNlaXZlQXR0YWNrKGNvbCwgcm93KVxuICAgIH1cblxuICAgIC8vIGFjdHVhbGx5IHRoaXMgY2FuJ3QgYmUgaW4gaGVyZS4uLiBjdXMgdGhlIGNvbCBhbmQgcm93IGRvbid0IGNoYW5nZS4uLiB0aGV5IGdvdHRhIGNoYW5nZVxuICAgIC8vIHRyeUF0dGFja1VudGlsU3VjY2VzcyhnYW1lYm9hcmQsIFtjb2wsIHJvd10pIHtcbiAgICAvLyAgICAgbGV0IGluaXRpYWxHdWVzc2VzID0gSlNPTi5zdHJpbmdpZnkoZ2FtZWJvYXJkLmd1ZXNzZWRDb29yZHMpXG4gICAgLy8gICAgIGxldCBjdXJyZW50R3Vlc3NlcztcbiAgICAvLyAgICAgd2hpbGUgKGluaXRpYWxHdWVzc2VzICE9PSBjdXJyZW50R3Vlc3Nlcykge1xuICAgIC8vICAgICAgICAgdGhpcy5hdHRhY2soZ2FtZWJvYXJkLCBbY29sLCByb3ddKVxuICAgIC8vICAgICAgICAgY3VycmVudEd1ZXNzZXMgPSBKU09OLnN0cmluZ2lmeShnYW1lYm9hcmQuZ3Vlc3NlZENvb3JkcylcbiAgICAvLyAgICAgfVxuICAgIC8vIH1cbn1cblxuLy8gYWhoaCBkb24ndCB0aGluayB0aGlzIHdvcmtzLCwsIGdvdHRhIHVzZSBzdXBlcj9cbmV4cG9ydCBjbGFzcyBDb21wdXRlciBleHRlbmRzIFBsYXllciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKClcbiAgICB9XG5cbiAgICByYW5kb21BdHRhY2soZ2FtZWJvYXJkKSB7XG4gICAgICAgIC8vIHRha2UgcmFuZG9tIG51bWJlcnMgZm9yIGNvbHVtbiBhbmQgcm93XG4gICAgICAgIGNvbnN0IHJhbmRvbUNvbCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKVxuICAgICAgICBjb25zdCByYW5kb21Sb3cgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMClcblxuICAgICAgICAvL3RoZW4gY2hlY2sgaWYgaGFzIGJlZW4gYXR0YWNrZWQsXG4gICAgICAgIGlmKGdhbWVib2FyZC5jaGVja1dhc0d1ZXNzZWQocmFuZG9tQ29sLCByYW5kb21Sb3cpKSByZXR1cm5cblxuICAgICAgICAvL3RoZW4gY2FsbCBhdHRhY2tcbiAgICAgICAgdGhpcy5hdHRhY2soZ2FtZWJvYXJkLCBbcmFuZG9tQ29sLCByYW5kb21Sb3ddKVxuICAgIH1cbn0iLCJpbXBvcnQgeyBtYWtlR2FtZUNvbnRyb2xsZXIgfSBmcm9tIFwiLi9nYW1lQ29udHJvbGxlclwiO1xuaW1wb3J0IHsgR2FtZWJvYXJkIH0gZnJvbSBcIi4vZ2FtZWJvYXJkXCI7XG5cbmZ1bmN0aW9uIG1ha2VEaXNwbGF5Q29udHJvbGxlcigpIHtcblxuICAgIGxldCBjdXJyZW50U2hpcCA9IG51bGw7XG4gICAgbGV0IG1vdmluZ1NoaXAgPSBmYWxzZTtcbiAgICBsZXQgY3VycmVudGx5Um90YXRpbmcgPSBmYWxzZTtcblxuICAgIGZ1bmN0aW9uIHNldFRvQ3VycmVudGx5Um90YXRpbmcoKSB7Y3VycmVudGx5Um90YXRpbmcgPSB0cnVlfVxuICAgIGZ1bmN0aW9uIGdldEN1cnJlbnRseVJvdGF0aW5nKCkge3JldHVybiBjdXJyZW50bHlSb3RhdGluZ31cbiAgICBmdW5jdGlvbiBkaXNhYmxlQ3VycmVudGx5Um90YXRpbmcoKSB7Y3VycmVudGx5Um90YXRpbmcgPSBmYWxzZX1cbiAgICBmdW5jdGlvbiBzZXRNb3ZpbmdTaGlwVG9UcnVlKCkge21vdmluZ1NoaXAgPSB0cnVlfVxuICAgIGZ1bmN0aW9uIHNldE1vdmluZ1NoaXBUb0ZhbHNlKCkge21vdmluZ1NoaXAgPSBmYWxzZX1cbiAgICBmdW5jdGlvbiBjaGVja0lmTW92aW5nU2hpcCgpIHtyZXR1cm4gbW92aW5nU2hpcH1cblxuICAgIGZ1bmN0aW9uIGZpbmRTaGlwRnJvbUNsYXNzTGlzdEFuZFBlcmZvcm1BY3Rpb24obGlzdCwgYWN0aW9uKSB7XG4gICAgICAgIHN3aXRjaCAodHJ1ZSkge1xuICAgICAgICAgICAgY2FzZSBsaXN0LmNvbnRhaW5zKCdjYXJyaWVyJyk6XG4gICAgICAgICAgICAgICAgYWN0aW9uKCdjYXJyaWVyJyk7IGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIGxpc3QuY29udGFpbnMoJ2JhdHRsZXNoaXAnKTpcbiAgICAgICAgICAgICAgICBhY3Rpb24oJ2JhdHRsZXNoaXAnKTsgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgbGlzdC5jb250YWlucygnY3J1aXNlcicpOlxuICAgICAgICAgICAgICAgIGFjdGlvbignY3J1aXNlcicpOyBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBsaXN0LmNvbnRhaW5zKCdzdWJtYXJpbmUnKTpcbiAgICAgICAgICAgICAgICBhY3Rpb24oJ3N1Ym1hcmluZScpOyBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBsaXN0LmNvbnRhaW5zKCdkZXN0cm95ZXInKTpcbiAgICAgICAgICAgICAgICBhY3Rpb24oJ2Rlc3Ryb3llcicpOyBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGxldCBzaGlwTGVuZ3RocyA9IHtcbiAgICAgICAgJ2NhcnJpZXInOiA1LFxuICAgICAgICAnYmF0dGxlc2hpcCc6IDQsXG4gICAgICAgICdjcnVpc2VyJzogMyxcbiAgICAgICAgJ3N1Ym1hcmluZSc6IDMsXG4gICAgICAgICdkZXN0cm95ZXInOiAyLFxuICAgIH1cblxuICAgIGxldCBzaGlwT3JpZW50YXRpb25zID0ge1xuICAgICAgICAnY2Fycmllcic6ICdob3Jpem9udGFsJyxcbiAgICAgICAgJ2JhdHRsZXNoaXAnOiAnaG9yaXpvbnRhbCcsICBcbiAgICAgICAgJ2NydWlzZXInOiAnaG9yaXpvbnRhbCcsICBcbiAgICAgICAgJ3N1Ym1hcmluZSc6ICdob3Jpem9udGFsJywgIFxuICAgICAgICAnZGVzdHJveWVyJzogJ2hvcml6b250YWwnLCAgXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Q3VycmVudFNoaXBPcmllbnRhdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHNoaXBPcmllbnRhdGlvbnNbY3VycmVudFNoaXBdXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9nZ2xlQ3VycmVudFNoaXBPcmllbnRhdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHNoaXBPcmllbnRhdGlvbnNbY3VycmVudFNoaXBdID0gc2hpcE9yaWVudGF0aW9uc1tjdXJyZW50U2hpcF0gPT09ICdob3Jpem9udGFsJyA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Q3VycmVudFNoaXAoKSB7XG4gICAgICAgIHJldHVybiBjdXJyZW50U2hpcDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRDdXJyZW50U2hpcChzaGlwKSB7XG4gICAgICAgIGN1cnJlbnRTaGlwID0gc2hpcFxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldEN1cnJlbnRTaGlwRnJvbURPTShlbGVtZW50KSB7XG4gICAgICAgIGxldCBsaXN0ID0gZWxlbWVudC5jbGFzc0xpc3RcbiAgICAgICAgZmluZFNoaXBGcm9tQ2xhc3NMaXN0QW5kUGVyZm9ybUFjdGlvbihsaXN0LCBzZXRDdXJyZW50U2hpcClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXNldEN1cnJlbnRTaGlwKCkge1xuICAgICAgICBjdXJyZW50U2hpcCA9IG51bGxcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRDdXJyZW50U2hpcExlbmd0aCgpIHtcbiAgICAgICAgcmV0dXJuIHNoaXBMZW5ndGhzW2N1cnJlbnRTaGlwXTtcbiAgICB9XG5cbiAgICBsZXQgYm9keUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5JylcblxuICAgIGZ1bmN0aW9uIHBvcHVsYXRlRWxlbWVudEluZm8oZGl2VHlwZSwgIHRleHQ9bnVsbCwgcGFyZW50PW51bGwsIC4uLmNsYXNzZXMpIHtcbiAgICAgICAgY29uc3QgbmV3RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZGl2VHlwZSk7XG4gICAgICAgIGNsYXNzZXMuZm9yRWFjaCgoY2xhc3NOYW1lKSA9PiBuZXdFbGVtZW50LmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKSk7XG4gICAgICAgIGlmICh0ZXh0KSBuZXdFbGVtZW50LnRleHRDb250ZW50ID0gdGV4dDtcbiAgICAgICAgaWYgKHBhcmVudCkgcGFyZW50LmFwcGVuZENoaWxkKG5ld0VsZW1lbnQpXG4gICAgICAgIHJldHVybiBuZXdFbGVtZW50O1xuICAgIH1cblxuICAgIC8vIHByZWdhbWUgZGlzcGxheSBjb2RlXG4gICAgZnVuY3Rpb24gY3JlYXRlUHJlR2FtZUdyaWQoKSB7XG4gICAgICAgIGxldCBpbml0aWFsR3JpZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuaW5pdGlhbC1ncmlkXCIpXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTA7IGkrKykge1xuICAgICAgICAgICAgbGV0IHJvd0VsZW1lbnQgPSBwb3B1bGF0ZUVsZW1lbnRJbmZvKCdkaXYnLCBudWxsLCBpbml0aWFsR3JpZCwgJ3JvdycpXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDEwOyBqKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgc3BhY2VFbGVtZW50ID0gcG9wdWxhdGVFbGVtZW50SW5mbygnZGl2JywgJycsIHJvd0VsZW1lbnQsICdjb2x1bW4nLCAncHJlZ2FtZS1zcGFjZScpXG4gICAgICAgICAgICAgICAgc3BhY2VFbGVtZW50LmRhdGFzZXQucm93ID0gaTtcbiAgICAgICAgICAgICAgICBzcGFjZUVsZW1lbnQuZGF0YXNldC5jb2wgPSBqO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVtb3ZlSG92ZXJlZENsYXNzKGhvdmVyZWRFbGVtZW50U2VsZWN0b3IpIHtcbiAgICAgICAgbGV0IGhvdmVyaW5nID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChgLiR7aG92ZXJlZEVsZW1lbnRTZWxlY3Rvcn1gKVxuICAgICAgICBpZiAoaG92ZXJpbmcpIHtcbiAgICAgICAgICAgIGhvdmVyaW5nLmZvckVhY2goc3BhY2UgPT4ge1xuICAgICAgICAgICAgICAgIHNwYWNlLmNsYXNzTGlzdC5yZW1vdmUoaG92ZXJlZEVsZW1lbnRTZWxlY3RvcilcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW1vdmVBbGxIb3ZlcmVkKCkge1xuICAgICAgICByZW1vdmVIb3ZlcmVkQ2xhc3MoJ3ZhbGlkLWhvdmVyaW5nJyk7XG4gICAgICAgIHJlbW92ZUhvdmVyZWRDbGFzcygnaW52YWxpZC1ob3ZlcmluZycpO1xuICAgICAgICByZW1vdmVIb3ZlcmVkQ2xhc3MoJ3NoaXAtaGVhZC1ob3ZlcicpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkU2hpcEhlYWRTdHlsZUZvckFsbFNoaXBzKGNsaWNrVGFyZ2V0KSB7XG4gICAgICAgIGxldCBsaXN0ID0gY2xpY2tUYXJnZXQuY2xhc3NMaXN0XG4gICAgICAgIGZ1bmN0aW9uIGFkZFNoaXBIZWFkU3R5bGUoc2hpcENsYXNzKSB7XG4gICAgICAgICAgICBjb25zdCBzaGlwSGVhZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYC4ke3NoaXBDbGFzc30uc2hpcC1oZWFkYCk7XG4gICAgICAgICAgICBzaGlwSGVhZC5jbGFzc0xpc3QuYWRkKCdzaGlwLWhlYWQtaG92ZXInKVxuICAgICAgICB9XG4gICAgICAgIGZpbmRTaGlwRnJvbUNsYXNzTGlzdEFuZFBlcmZvcm1BY3Rpb24obGlzdCwgYWRkU2hpcEhlYWRTdHlsZSlcbiAgICB9XG4gICAgXG4gICAgLy8gaG92ZXJpbmcgdG8gc2hvdyB0aGUgZXh0ZW5kZWQgaG92ZXIgXG4gICAgYm9keUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdmVyJywgKGUpID0+IHtcbiAgICAgICAgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygncHJlZ2FtZS1zcGFjZScpKSB7XG4gICAgICAgICAgICByZW1vdmVBbGxIb3ZlcmVkKCk7XG4gICAgICAgICAgICBpZiAoY3VycmVudFNoaXApIGV4dGVuZE1haW5Ib3ZlcihlLnRhcmdldClcbiAgICAgICAgICAgIGFkZFNoaXBIZWFkU3R5bGVGb3JBbGxTaGlwcyhlLnRhcmdldClcbiAgICAgICAgfVxuICAgIH0pXG5cbiAgICAvLyBob3ZlcmluZyBvdmVyIHRoZSBzaGlwIGhlYWQgdG8gc2hvdyByb3RhdGVkIGhvdmVyXG4gICAgYm9keUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdmVyJywgKGUpID0+IHtcbiAgICAgICAgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnc2hpcC1oZWFkJykpIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50bHlSb3RhdGluZykge1xuICAgICAgICAgICAgICAgIHNob3dSb3RhdGVkSG92ZXIoZS50YXJnZXQpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KVxuXG4gICAgLy8gd2hlbiB0aGUgbW91c2UgbGVhdmVzIHRoZSBncmlkLCBoaWRlIHRoZSBob3ZlcmVkIHNwYWNlc1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5pbml0aWFsLWdyaWQnKS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgKCkgPT4ge1xuICAgICAgICByZW1vdmVBbGxIb3ZlcmVkKCk7XG4gICAgfSlcblxuICAgIGZ1bmN0aW9uIHJlbW92ZUNsYXNzRnJvbVByZXZpb3VzbHlTZWxlY3RlZCgpIHtcbiAgICAgICAgbGV0IHByZXZpb3VzU2VsZWN0ZWRTaGlwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNlbGVjdGVkLXNoaXAtb2ZmLWdyaWQnKVxuICAgICAgICBpZiAocHJldmlvdXNTZWxlY3RlZFNoaXApIHByZXZpb3VzU2VsZWN0ZWRTaGlwLmNsYXNzTGlzdC5yZW1vdmUoJ3NlbGVjdGVkLXNoaXAtb2ZmLWdyaWQnKVxuICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBtYXJrVmFsaWRIb3Zlcihjb2wsIHJvdykge1xuICAgICAgICAgICAgbGV0IHNwYWNlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgW2RhdGEtY29sPVwiJHtjb2x9XCJdW2RhdGEtcm93PVwiJHtyb3d9XCJdYClcbiAgICAgICAgICAgIHNwYWNlLmNsYXNzTGlzdC5hZGQoJ3ZhbGlkLWhvdmVyaW5nJylcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG1hcmtJbnZhbGlkSG92ZXIoY29sLCByb3cpIHtcbiAgICAgICAgICAgIGxldCBzcGFjZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLWNvbD1cIiR7Y29sfVwiXVtkYXRhLXJvdz1cIiR7cm93fVwiXWApXG4gICAgICAgICAgICBzcGFjZS5jbGFzc0xpc3QuYWRkKCdpbnZhbGlkLWhvdmVyaW5nJylcbiAgICAgICAgfVxuXG4gICAgZnVuY3Rpb24gZXh0ZW5kTWFpbkhvdmVyKGNsaWNrVGFyZ2V0KSB7XG5cbiAgICAgICAgZnVuY3Rpb24gZGV0ZXJtaW5lT3RoZXJIb3ZlckVsZW1lbnRzKGNsaWNrVGFyZ2V0KSB7XG4gICAgICAgICAgICBsZXQgaW52YWxpZFBsYWNlbWVudCA9IGZhbHNlO1xuICAgICAgICAgICAgY29uc3QgaGVhZFJvdyA9IHBhcnNlSW50KGNsaWNrVGFyZ2V0LmRhdGFzZXQucm93KVxuICAgICAgICAgICAgY29uc3QgaGVhZENvbCA9IHBhcnNlSW50KGNsaWNrVGFyZ2V0LmRhdGFzZXQuY29sKVxuICAgICAgICAgICAgbGV0IHNoaXBMZW5ndGggPSBnZXRDdXJyZW50U2hpcExlbmd0aCgpO1xuXG4gICAgICAgICAgICAvLyB0aGlzIGlzIGhvcml6b250YWxcbiAgICAgICAgICAgIC8vIGdldCB0aGUgbmV4dCBmZXcsIHVzaW5nIGFycmF5IGxvZ2ljXG4gICAgICAgICAgICBpZiAoZ2V0Q3VycmVudFNoaXBPcmllbnRhdGlvbigpID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gaGVhZENvbDsgaSA8IGhlYWRDb2wgKyBzaGlwTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgPiA5IHx8IGNoZWNrSWZBbHJlYWR5UGxhY2VkKGksIGhlYWRSb3cpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnZhbGlkUGxhY2VtZW50ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCFpbnZhbGlkUGxhY2VtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSBoZWFkQ29sOyBpIDwgaGVhZENvbCArIHNoaXBMZW5ndGg7IGkrKykgbWFya1ZhbGlkSG92ZXIoaSwgaGVhZFJvdylcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaW52YWxpZFBsYWNlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gaGVhZENvbDsgaSA8IGhlYWRDb2wgKyBzaGlwTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpID4gOSkgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJrSW52YWxpZEhvdmVyKGksIGhlYWRSb3cpfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vdGhpcywgVEhJUyBpcyB2ZXJ0aWNhbFxuICAgICAgICAgICAgZWxzZSBpZiAoZ2V0Q3VycmVudFNoaXBPcmllbnRhdGlvbigpID09PSAndmVydGljYWwnKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IGhlYWRSb3c7IGkgPCBoZWFkUm93ICsgc2hpcExlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpID4gOSB8fCBjaGVja0lmQWxyZWFkeVBsYWNlZChoZWFkQ29sLCBpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW52YWxpZFBsYWNlbWVudCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICghaW52YWxpZFBsYWNlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gaGVhZFJvdzsgaSA8IGhlYWRSb3cgKyBzaGlwTGVuZ3RoOyBpKyspIG1hcmtWYWxpZEhvdmVyKGhlYWRDb2wsIGkpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGludmFsaWRQbGFjZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IGhlYWRSb3c7IGkgPCBoZWFkUm93ICsgc2hpcExlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSA+IDkpIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFya0ludmFsaWRIb3ZlcihoZWFkQ29sLCBpKX1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBkZXRlcm1pbmVPdGhlckhvdmVyRWxlbWVudHMoY2xpY2tUYXJnZXQpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2hvd1JvdGF0ZWRIb3ZlcihjbGlja1RhcmdldCkge1xuICAgICAgICBjb25zdCBsZW5ndGggPSBnZXRDdXJyZW50U2hpcExlbmd0aCgpXG4gICAgICAgIGxldCBpbnZhbGlkUGxhY2VtZW50ID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IGhlYWRDb2wgPSBwYXJzZUludChjbGlja1RhcmdldC5kYXRhc2V0LmNvbCk7XG4gICAgICAgIGNvbnN0IGhlYWRSb3cgPSBwYXJzZUludChjbGlja1RhcmdldC5kYXRhc2V0LnJvdyk7XG4gICAgICAgIC8vIGtpbmRhIHNpbWlhbHIgdG8gZGV0ZXJtaW5lT3RoZXIgSG92ZXJFbGVlbW50cywgZXhjZXB0IGluY3JlYXNlIHJvdyByYXRoZXIgdGhhbiBjb2x1bW5cblxuICAgICAgICBpZiAoZ2V0Q3VycmVudFNoaXBPcmllbnRhdGlvbigpID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSBoZWFkUm93ICsgMTsgaSA8IGhlYWRSb3cgKyBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChpID4gOSB8fCBjaGVja0lmQWxyZWFkeVBsYWNlZChoZWFkQ29sLCBpKSkge1xuICAgICAgICAgICAgICAgICAgICBpbnZhbGlkUGxhY2VtZW50ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpbnZhbGlkUGxhY2VtZW50KSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IGhlYWRSb3c7IGkgPCBoZWFkUm93ICsgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgPiA5KSBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgbWFya0ludmFsaWRIb3ZlcihoZWFkQ29sLCBpKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaW52YWxpZFBsYWNlbWVudCkge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSBoZWFkUm93OyBpIDwgaGVhZFJvdyArIGxlbmd0aDsgaSsrKSB7bWFya1ZhbGlkSG92ZXIoaGVhZENvbCwgaSl9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuXG4gICAgICAgIGVsc2UgaWYgKGdldEN1cnJlbnRTaGlwT3JpZW50YXRpb24oKSA9PT0gJ3ZlcnRpY2FsJykge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IGhlYWRDb2wgKyAxOyBpIDwgaGVhZENvbCArIGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGkgPiA5IHx8IGNoZWNrSWZBbHJlYWR5UGxhY2VkKGksIGhlYWRSb3cpKSB7XG4gICAgICAgICAgICAgICAgICAgIGludmFsaWRQbGFjZW1lbnQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGludmFsaWRQbGFjZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gaGVhZENvbDsgaSA8IGhlYWRDb2wgKyBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaSA+IDkpIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBtYXJrSW52YWxpZEhvdmVyKGksIGhlYWRSb3cpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpbnZhbGlkUGxhY2VtZW50KSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IGhlYWRDb2w7IGkgPCBoZWFkQ29sICsgbGVuZ3RoOyBpKyspIHttYXJrVmFsaWRIb3ZlcihpLCBoZWFkUm93KX1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdyZXlPdXRTZWxlY3RlZFNoaXAoKSB7XG4gICAgICAgIC8vIGRvbnQgbmVlZCB0byBjaGFuZ2UgdGhpc1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2VsZWN0ZWQtc2hpcC1vZmYtZ3JpZCcpLmNsYXNzTGlzdC5hZGQoJ2dyZXktb3V0JylcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRTaGlwQ2xhc3NUb1NwYWNlKGNvbCwgcm93KSB7XG4gICAgICAgIGxldCBzcGFjZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLWNvbD1cIiR7Y29sfVwiXVtkYXRhLXJvdz1cIiR7cm93fVwiXWApXG4gICAgICAgIHNwYWNlLmNsYXNzTGlzdC5hZGQoJ3NoaXAtaW4tc3BhY2UnKVxuICAgICAgICBzcGFjZS5jbGFzc0xpc3QuYWRkKGdldEN1cnJlbnRTaGlwKCkpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkU2hpcEhlYWQoY2xpY2tUYXJnZXQpIHtcbiAgICAgICAgY2xpY2tUYXJnZXQuY2xhc3NMaXN0LmFkZCgnc2hpcC1oZWFkJylcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW1vdmVTaGlwSGVhZCgpIHtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgLnNoaXAtaGVhZC4ke2dldEN1cnJlbnRTaGlwKCl9YCkuY2xhc3NMaXN0LnJlbW92ZSgnc2hpcC1oZWFkJylcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjaGVja0lmQ2xpY2tTaGlwSGVhZChjbGlja1RhcmdldCkge1xuICAgICAgICByZXR1cm4gY2xpY2tUYXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdzaGlwLWhlYWQnKVxuICAgIH1cblxuICAgIC8vIGNsaWNraW5nIG9uIHNwYWNlcyBvbiBncmlkXG5cbiAgICAvLyBpIG5lZWQgdG8gbm90IGFkZCBzdHVmZiB3aGVuIHRoZXJlJ3MgYSBlbGVtZW50IHRvbyBjbG9zZS4uLiBkbyBpIG5lZWQgdG8gdXNlIHJvdyBhbmQgY29sdW1uP1xuICAgIC8vbWF5YmVcbiAgICAvLyBjaGVjayBpZiBjYW4gcGxhY2UuLlxuXG4gICAgZnVuY3Rpb24gZGVjb3JhdGVTZWxlY3RlZFNoaXAoY2xpY2tUYXJnZXQpIHtcbiAgICAgICAgZnVuY3Rpb24gZGVjb3JhdGUoc2hpcE5hbWUpIHtcbiAgICAgICAgICAgIGNvbnN0IGdyaWQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaW5pdGlhbC1ncmlkJylcbiAgICAgICAgICAgIGdyaWQucXVlcnlTZWxlY3RvckFsbChgLiR7c2hpcE5hbWV9YCkuZm9yRWFjaChzcGFjZSA9PiB7XG4gICAgICAgICAgICAgICAgc3BhY2UuY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWQtc2hpcC1vbi1ncmlkJylcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgZmluZFNoaXBGcm9tQ2xhc3NMaXN0QW5kUGVyZm9ybUFjdGlvbihjbGlja1RhcmdldC5jbGFzc0xpc3QsIGRlY29yYXRlKVxuICAgIH1cblxuICAgIC8vIHdpbGwgbmVlZCBhIHJlbW92ZURlY29yYXRpb24gZnVuY3Rpb24gXG4gICAgZnVuY3Rpb24gcmVtb3ZlU2VsZWN0ZWRTaGlwRGVjb3JhdGlvbigpIHtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChgLnNlbGVjdGVkLXNoaXAtb24tZ3JpZGApLmZvckVhY2goc3BhY2UgPT4ge1xuICAgICAgICAgICAgc3BhY2UuY2xhc3NMaXN0LnJlbW92ZSgnc2VsZWN0ZWQtc2hpcC1vbi1ncmlkJylcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW1vdmVSb3RhdGVJY29uKCkge1xuICAgICAgICBsZXQgaWNvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2knKVxuICAgICAgICBpY29uLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoaWNvbilcbiAgICB9XG5cbiAgICAvLyBjbGljayBvbiBzaGlwIGhlYWQgdG8gbW92ZSBvciByb3RhdGVcbiAgICBib2R5RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgICAgIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3NoaXAtaGVhZCcpKSB7XG5cbiAgICAgICAgICAgIC8vIHRoaXMgc2V0cyBjdXJyZW50U2hpcCwgd2hlbiBjbGlja2luZyBvbiB0aGUgc2hpcCBoZWFkXG4gICAgICAgICAgICBmdW5jdGlvbiBzZXRDb3JyZXNwb25kaW5nU2hpcEZyb21HcmlkKGNsaWNrVGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgc2V0Q3VycmVudFNoaXBGcm9tRE9NKGNsaWNrVGFyZ2V0KVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBzaG93Um90YXRlSWNvbihjbGlja1RhcmdldCkge1xuICAgICAgICAgICAgICAgIGlmIChjbGlja1RhcmdldC5xdWVyeVNlbGVjdG9yKCdpJykpIGNsaWNrVGFyZ2V0LnJlbW92ZUNoaWxkKGNsaWNrVGFyZ2V0LnF1ZXJ5U2VsZWN0b3IoJ2knKSlcbiAgICAgICAgICAgICAgICBjb25zdCB0ZW1wbGF0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNpY29uLXRlbXBsYXRlJylcbiAgICAgICAgICAgICAgICBjb25zdCBjbG9uZSA9dGVtcGxhdGUuY29udGVudC5jbG9uZU5vZGUodHJ1ZSlcbiAgICAgICAgICAgICAgICBjbGlja1RhcmdldC5hcHBlbmRDaGlsZChjbG9uZS5jaGlsZHJlblswXSlcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gdGhpcyBpcyB0byBzZXQgdG8gcm90YXRlL21vdmUgbW9kZVxuICAgICAgICAgICAgaWYgKCFjdXJyZW50bHlSb3RhdGluZykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzaGlwIGhlYWQgQ0xJQ0tFRCBhbmQgaW4gTk9XIGluIHJvdGF0ZSBtb2RlJylcbiAgICAgICAgICAgICAgICBzZXRUb0N1cnJlbnRseVJvdGF0aW5nKCk7XG4gICAgICAgICAgICAgICAgc2V0TW92aW5nU2hpcFRvVHJ1ZSgpXG4gICAgICAgICAgICAgICAgc2V0Q29ycmVzcG9uZGluZ1NoaXBGcm9tR3JpZChlLnRhcmdldClcbiAgICAgICAgICAgICAgICBkZWNvcmF0ZVNlbGVjdGVkU2hpcChlLnRhcmdldClcbiAgICAgICAgICAgICAgICBzaG93Um90YXRlSWNvbihlLnRhcmdldCk7XG4gICAgICAgICAgICAgICAgLy8gbWF5IG5lZWQgdG8gdXNlIGV4dGVuZEhvdmVyLiBcbiAgICAgICAgICAgICAgICAvLyBkb250IHRoaW5rIGl0J3MgbmVlZGVkIGhlcmUuLi4gXG4gICAgICAgICAgICAgICAgZXh0ZW5kTWFpbkhvdmVyKGUudGFyZ2V0KVxuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIC8vIHRoaXMgaXMgdG8gcm90YXRlIHRoZSBzaGlwXG4gICAgICAgICAgICBlbHNlIGlmIChjdXJyZW50bHlSb3RhdGluZykge1xuICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIGludmFsaWQgb3Igb3V0IG9mIGJvdW5kcyBmb3Igcm90YXRlZCBwbGFjZW1lbnRcbiAgICAgICAgICAgICAgICBpZiAoY2hlY2tJbnZhbGlkUGxhY2VtZW50KGUudGFyZ2V0KSkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgLy8gYW5kIHVzZSBwbGFjZVNoaXAgd2hpY2gganVzdCBjb252ZXJ0cyBob3ZlciBpbnRvIHNoaXAgcGllY2VzXG4gICAgICAgICAgICAgICAgcmVtb3ZlQ3VycmVudFNoaXBGcm9tR3JpZCgpO1xuICAgICAgICAgICAgICAgIHJlbW92ZVNlbGVjdGVkU2hpcERlY29yYXRpb24oKTtcbiAgICAgICAgICAgICAgICByZW1vdmVSb3RhdGVJY29uKCk7XG4gICAgICAgICAgICAgICAgLy8gY29udmVydFZhbGlkSG92ZXJJbnRvU2hpcCgpO1xuICAgICAgICAgICAgICAgIHBsYWNlU2hpcChlLnRhcmdldCk7XG4gICAgICAgICAgICAgICAgLy8gdGhpcyBpcyB3aGVyZSBpIG5lZWQgdG8gcmVtb3ZlIGN1cnJlbnQgc2hpcCBcblxuICAgICAgICAgICAgICAgIC8vIHVzZSB0b2dnbGVDdXJyZW50U2hpcFJvdGF0aW9uXG4gICAgICAgICAgICAgICAgLy8gYW5kIG1heWJlIHJlc2V0Q3VycmVudFNoaXBcbiAgICAgICAgICAgICAgICByZW1vdmVBbGxIb3ZlcmVkKCk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZ2V0Q3VycmVudFNoaXBPcmllbnRhdGlvbigpKVxuICAgICAgICAgICAgICAgIHRvZ2dsZUN1cnJlbnRTaGlwT3JpZW50YXRpb24oKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhnZXRDdXJyZW50U2hpcE9yaWVudGF0aW9uKCkpXG4gICAgICAgICAgICAgICAgcmVzZXRDdXJyZW50U2hpcCgpO1xuICAgICAgICAgICAgICAgIGRpc2FibGVDdXJyZW50bHlSb3RhdGluZygpO1xuICAgICAgICAgICAgICAgIHNldE1vdmluZ1NoaXBUb0ZhbHNlKCk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3NoaXAgaGVhZCBDTElDS0VEIGFuZCBkaXNhYmxlIHJvdGF0ZSBtb2RlIGFuZCByZXNldCBjdXJyZW50IHNoaXAnKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSlcblxuICAgIGZ1bmN0aW9uIHBsYWNlU2hpcChjbGlja1RhcmdldCkge1xuICAgICAgICBsZXQgaW52YWxpZFBsYWNlbWVudCA9IGZhbHNlO1xuICAgICAgICBjb25zdCBoZWFkUm93ID0gcGFyc2VJbnQoY2xpY2tUYXJnZXQuZGF0YXNldC5yb3cpXG4gICAgICAgIGNvbnN0IGhlYWRDb2wgPSBwYXJzZUludChjbGlja1RhcmdldC5kYXRhc2V0LmNvbClcbiAgICAgICAgbGV0IHNoaXBMZW5ndGggPSBnZXRDdXJyZW50U2hpcExlbmd0aCgpO1xuXG4gICAgICAgIGlmIChnZXRDdXJyZW50U2hpcE9yaWVudGF0aW9uKCkgPT09ICdob3Jpem9udGFsJ1xuICAgICAgICAgJiYgIWN1cnJlbnRseVJvdGF0aW5nXG4gICAgICAgICAgICAgICAgfHwgZ2V0Q3VycmVudFNoaXBPcmllbnRhdGlvbigpID09PSAndmVydGljYWwnICYmIGN1cnJlbnRseVJvdGF0aW5nXG4gICAgICAgICkge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IGhlYWRDb2w7IGkgPCBoZWFkQ29sICsgc2hpcExlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGkgPiA5IHx8IGNoZWNrSWZBbHJlYWR5UGxhY2VkKGksIGhlYWRSb3cpKSB7XG4gICAgICAgICAgICAgICAgICAgIGludmFsaWRQbGFjZW1lbnQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghaW52YWxpZFBsYWNlbWVudCkge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSBoZWFkQ29sOyBpIDwgaGVhZENvbCArIHNoaXBMZW5ndGg7IGkrKykgYWRkU2hpcENsYXNzVG9TcGFjZShpLCBoZWFkUm93KVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cblxuICAgICAgICBlbHNlIGlmIChnZXRDdXJyZW50U2hpcE9yaWVudGF0aW9uKCkgPT09ICd2ZXJ0aWNhbCdcbiAgICAgICAgJiYgIWN1cnJlbnRseVJvdGF0aW5nXG4gICAgICAgICAgICAgICAgfHwgKGdldEN1cnJlbnRTaGlwT3JpZW50YXRpb24oKSA9PSAnaG9yaXpvbnRhbCcgJiYgZ2V0Q3VycmVudGx5Um90YXRpbmcoKSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gaGVhZFJvdzsgaSA8IGhlYWRSb3cgKyBzaGlwTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaSA+IDkgfHwgY2hlY2tJZkFscmVhZHlQbGFjZWQoaGVhZENvbCwgaSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaW52YWxpZFBsYWNlbWVudCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaW52YWxpZFBsYWNlbWVudCkge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSBoZWFkUm93OyBpIDwgaGVhZFJvdyArIHNoaXBMZW5ndGg7IGkrKykgYWRkU2hpcENsYXNzVG9TcGFjZShoZWFkQ29sLCBpKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cblxuICAgIH1cblxuICAgIC8vIGZ1bmN0aW9uIGNvbnZlcnRWYWxpZEhvdmVySW50b1NoaXAoKSB7XG4gICAgLy8gICAgIGxldCBhbGxIb3ZlcmVkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnZhbGlkLWhvdmVyaW5nJylcbiAgICAvLyAgICAgYWxsSG92ZXJlZC5mb3JFYWNoKHNwYWNlID0+IGFkZFNoaXBDbGFzc1RvU3BhY2Uoc3BhY2UpKVxuICAgIC8vIH1cblxuICAgIC8vIGNsaWNrIG9uIHRoZSBncmlkIHRvIHBsYWNlIGEgc2hpcFxuICAgIGJvZHlFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgICAgLy8gZG9uJ3QgYWxsb3cgY2xpY2sgaWYgc2hpcCBpcyBub3Qgc2VsZWN0ZWRcbiAgICAgICAgaWYgKCFjdXJyZW50U2hpcCkgcmV0dXJuXG4gICAgICAgIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3ByZWdhbWUtc3BhY2UnKSkge1xuXG4gICAgICAgICAgICBpZiAoY2hlY2tJbnZhbGlkUGxhY2VtZW50KGUudGFyZ2V0KSkgcmV0dXJuXG4gICAgICAgICAgICAvL21vdmUgZXhpc3Rpbmcgc2hpcFxuICAgICAgICAgICAgaWYgKGNoZWNrSWZNb3ZpbmdTaGlwKCkpIHtcblxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzaGlwIGlzIE1PVklORycpXG4gICAgICAgICAgICAgICAgLy9zaGlwIGhlYWQgaXMgbm90IGNsaWNrZWRcbiAgICAgICAgICAgICAgICBpZiAoIWNoZWNrSWZDbGlja1NoaXBIZWFkKGUudGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3NoaXAgaGVhZCBOT1QgY2xpY2tlZCwgc2hpcCBpcyBtb3ZpbmcnKVxuICAgICAgICAgICAgICAgICAgICByZW1vdmVTaGlwSGVhZCgpO1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVSb3RhdGVJY29uKClcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlU2VsZWN0ZWRTaGlwRGVjb3JhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVDdXJyZW50U2hpcEZyb21HcmlkKCk7XG4gICAgICAgICAgICAgICAgICAgIHNldE1vdmluZ1NoaXBUb0ZhbHNlKCk7XG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVDdXJyZW50bHlSb3RhdGluZygpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnZlcnRWYWxpZEhvdmVySW50b1NoaXAoKTtcbiAgICAgICAgICAgICAgICAgICAgcGxhY2VTaGlwKGUudGFyZ2V0KVxuICAgICAgICAgICAgICAgICAgICByZW1vdmVBbGxIb3ZlcmVkKCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZFNoaXBIZWFkKGUudGFyZ2V0KTtcbiAgICAgICAgICAgICAgICAgICAgLy8gaXMgaXQgdGhpcz8gbWF5YmVcbiAgICAgICAgICAgICAgICAgICAgcmVzZXRDdXJyZW50U2hpcCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIHNoaXAgaGVhZCBpcyBjbGlja2VkLi4uIHRoaXMgc2hvdWxkIG5vdCBkbyBhbnl0aGluZyBidHdcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChjaGVja0lmQ2xpY2tTaGlwSGVhZChlLnRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3NoaXAgaGVhZCB3YXMgY2xpY2tlZCcpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIC8vcGxhY2Ugc2hpcCBmb3IgdGhlIGZpcnN0IHRpbWVcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzaGlwIE5PVCBtb3ZpbmcsIHBsYWNpbmcgZm9yIHRoZSBmaXJzdCB0aW1lJylcbiAgICAgICAgICAgICAgICBncmV5T3V0U2VsZWN0ZWRTaGlwKCk7XG4gICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3NGcm9tUHJldmlvdXNseVNlbGVjdGVkKCk7XG5cbiAgICAgICAgICAgICAgICBwbGFjZVNoaXAoZS50YXJnZXQpO1xuICAgICAgICAgICAgICAgIC8vIGNvbnZlcnRWYWxpZEhvdmVySW50b1NoaXAoKTtcbiAgICAgICAgICAgICAgICByZW1vdmVBbGxIb3ZlcmVkKCk7XG4gICAgICAgICAgICAgICAgYWRkU2hpcEhlYWQoZS50YXJnZXQpO1xuICAgICAgICAgICAgICAgIHJlc2V0Q3VycmVudFNoaXAoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pXG4gICAgLy8gZm9yIGxlbmd0aCBvZiBzaGlwLCBhbG9uZyBob3Jpb256dGFsIG9yIHZlcnRpY2FsLCBjaGVjayBlYWNoIHNwYWNlIGlmIG91dCBvZiBib3VuZHMgb3IgaWYgc2hpcC1pbi1zcGFjZVxuICAgIGZ1bmN0aW9uIGNoZWNrSWZBbHJlYWR5UGxhY2VkKGNvbCwgcm93KSB7XG4gICAgICAgIC8vIHNvbWV0aGluZyB3cm9uZyBoZXJlIG5vd1xuICAgICAgICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgW2RhdGEtY29sPVwiJHtjb2x9XCJdW2RhdGEtcm93PVwiJHtyb3d9XCJdYCkuY2xhc3NMaXN0LmNvbnRhaW5zKCdzaGlwLWluLXNwYWNlJylcbiAgICB9XG5cbiAgICAvL2NoZWNrIGlmIGNhbiBwbGFjZSB0aGUgc2hpcFxuICAgIGZ1bmN0aW9uIGNoZWNrSW52YWxpZFBsYWNlbWVudChjbGlja1RhcmdldCkge1xuICAgICAgICAvLyBuZWVkcyBhIHZlcnRpY2FsIGNvbXBvbmVudDsgY3VycmVudGx5IG9ubHkgaG9yaXpvbnRhbCByaWdodCBub3dcbiAgICAgICAgbGV0IGNhbm5vdFBsYWNlU2hpcCA9IGZhbHNlO1xuXG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IGdldEN1cnJlbnRTaGlwTGVuZ3RoKCk7XG4gICAgICAgIGNvbnN0IGhlYWRSb3cgPSBwYXJzZUludChjbGlja1RhcmdldC5kYXRhc2V0LnJvdylcbiAgICAgICAgY29uc3QgaGVhZENvbCA9IHBhcnNlSW50KGNsaWNrVGFyZ2V0LmRhdGFzZXQuY29sKVxuXG4gICAgICAgIC8vIHJlcXVpcmVzIGNoZWNraW5nIGlmIGN1cnJlbnRseSByb3RhdGluZzsgaWYgc28sIGNoZWNrIHRoZSBvcHBvc2l0ZSBvcmllbnRhdGlvblxuICAgICAgICBpZiAoZ2V0Q3VycmVudFNoaXBPcmllbnRhdGlvbigpID09PSAnaG9yaXpvbnRhbCdcbiAgICAgICAgICYmICFjdXJyZW50bHlSb3RhdGluZ1xuICAgICAgICAgICAgICAgIHx8IGdldEN1cnJlbnRTaGlwT3JpZW50YXRpb24oKSA9PT0gJ3ZlcnRpY2FsJyAmJiBjdXJyZW50bHlSb3RhdGluZ1xuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgLy8gbWVhbnMgcm93IGlzIHRoZSBzYW1lLCBhbmQgY29sdW1ucyBjaGFuZ2VcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSBoZWFkQ29sICsgMTsgaSA8IGhlYWRDb2wgKyBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChpID4gMTAgfHwgY2hlY2tJZkFscmVhZHlQbGFjZWQoaSwgaGVhZFJvdykpIHtcbiAgICAgICAgICAgICAgICAgICAgY2Fubm90UGxhY2VTaGlwID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZWxzZSBpZiAoKGdldEN1cnJlbnRTaGlwT3JpZW50YXRpb24oKSA9PT0gJ3ZlcnRpY2FsJyBcbiAgICAgICAgJiYgIWN1cnJlbnRseVJvdGF0aW5nKVxuICAgICAgICAgICAgICAgIHx8IChnZXRDdXJyZW50U2hpcE9yaWVudGF0aW9uKCkgPT0gJ2hvcml6b250YWwnICYmIGdldEN1cnJlbnRseVJvdGF0aW5nKCkpXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAvLyBtZWFucyBjb2x1bW4gaXMgdGhlIHNhbWUsIGFuZCByb3dzIGNoYW5nZVxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IGhlYWRSb3cgKyAxOyBpIDwgaGVhZFJvdyArIGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGkgPiAxMCB8fCBjaGVja0lmQWxyZWFkeVBsYWNlZChoZWFkQ29sLCBpKSkge1xuICAgICAgICAgICAgICAgICAgICBjYW5ub3RQbGFjZVNoaXAgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNhbm5vdFBsYWNlU2hpcDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW1vdmVTaGlwRnJvbUdyaWQoc2hpcE5hbWUpIHtcbiAgICAgICAgY29uc3QgZ3JpZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5pbml0aWFsLWdyaWQnKVxuICAgICAgICBncmlkLnF1ZXJ5U2VsZWN0b3JBbGwoYC4ke3NoaXBOYW1lfWApLmZvckVhY2goc3BhY2UgPT4ge1xuICAgICAgICAgICAgc3BhY2UuY2xhc3NMaXN0LnJlbW92ZShzaGlwTmFtZSlcbiAgICAgICAgICAgIHNwYWNlLmNsYXNzTGlzdC5yZW1vdmUoJ3NoaXAtaW4tc3BhY2UnKVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbW92ZUN1cnJlbnRTaGlwRnJvbUdyaWQoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGByZW1vdmUgY3VycmVudCBzaGlwIGZyb20gZ3JpZDogJHtnZXRDdXJyZW50U2hpcCgpfWApXG4gICAgICAgIHJlbW92ZVNoaXBGcm9tR3JpZChnZXRDdXJyZW50U2hpcCgpKVxuICAgIH1cblxuICAgIC8vIHJlbW92ZSB0aGUgY29ycmVzcG9uZGluZyBzaGlwIGZyb20gdGhlIGJvYXJkLCB3aGVuIGNsaWNraW5nIG9uIGl0LlxuICAgIGZ1bmN0aW9uIHJlbW92ZUNvcnJlc3BvbmRpbmdTaGlwRnJvbUdyaWRGb3JBbGxTaGlwcyhzaGlwVG9SZXBsYWNlKSB7XG4gICAgICAgIGxldCBjbGFzc0xpc3QgPSBzaGlwVG9SZXBsYWNlLmNsYXNzTGlzdDtcbiAgICAgICAgZmluZFNoaXBGcm9tQ2xhc3NMaXN0QW5kUGVyZm9ybUFjdGlvbihjbGFzc0xpc3QsIHJlbW92ZVNoaXBGcm9tR3JpZCk7XG4gICAgfVxuXG4gICAgLy8gY2xpY2sgb24gc2hpcCB3aGljaCBpcyBvZmYgdGhlIGJvYXJkLCBmb3IgcGxhY2luZyBvbiBib2FyZFxuICAgIGJvZHlFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgICAgbGV0IGxpc3QgPSBlLnRhcmdldC5jbGFzc0xpc3RcbiAgICAgICAgaWYgKGxpc3QuY29udGFpbnMoJ3NoaXAnKSkge1xuICAgICAgICAgICAgaWYgKGxpc3QuY29udGFpbnMoJ2dyZXktb3V0JykpIHJlbW92ZUNvcnJlc3BvbmRpbmdTaGlwRnJvbUdyaWRGb3JBbGxTaGlwcyhlLnRhcmdldCk7XG4gICAgICAgICAgICByZW1vdmVDbGFzc0Zyb21QcmV2aW91c2x5U2VsZWN0ZWQoKTtcbiAgICAgICAgICAgIHJlbW92ZUFsbEhvdmVyZWQoKTtcbiAgICAgICAgICAgIChsaXN0LmFkZCgnc2VsZWN0ZWQtc2hpcC1vZmYtZ3JpZCcpKVxuICAgICAgICAgICAgc2V0Q3VycmVudFNoaXBGcm9tRE9NKGUudGFyZ2V0KVxuICAgICAgICB9XG4gICAgfSlcblxuICAgIGZ1bmN0aW9uIGRldGVybWluZVRleHQoc3BhY2UpIHtcbiAgICAgICAgaWYgKCFzcGFjZS5oYXNTaGlwICYmICFzcGFjZS53YXNHdWVzc2VkKSByZXR1cm4gJy4nXG4gICAgICAgIGlmIChzcGFjZS5oYXNTaGlwICYmICFzcGFjZS53YXNHdWVzc2VkKSByZXR1cm4gJ28nXG4gICAgICAgIGlmICghc3BhY2UuaGFzU2hpcCAmJiBzcGFjZS53YXNHdWVzc2VkKSByZXR1cm4gJ20nXG4gICAgICAgIGlmIChzcGFjZS5oYXNTaGlwICYmIHNwYWNlLndhc0d1ZXNzZWQpIHJldHVybiAnWCdcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZXRlcm1pbmVDZWxsU3R5bGUoc3BhY2UpIHtcbiAgICAgICAgaWYgKCFzcGFjZS5oYXNTaGlwICYmICFzcGFjZS53YXNHdWVzc2VkKSByZXR1cm4gJ2NsaWNrYWJsZSdcbiAgICAgICAgaWYgKHNwYWNlLmhhc1NoaXAgJiYgIXNwYWNlLndhc0d1ZXNzZWQpIHJldHVybiAnY2xpY2thYmxlJ1xuICAgICAgICBpZiAoIXNwYWNlLmhhc1NoaXAgJiYgc3BhY2Uud2FzR3Vlc3NlZCkgcmV0dXJuICd1bmNsaWNrYWJsZSdcbiAgICAgICAgaWYgKHNwYWNlLmhhc1NoaXAgJiYgc3BhY2Uud2FzR3Vlc3NlZCkgcmV0dXJuICd1bmNsaWNrYWJsZSdcbiAgICB9XG5cbiAgICAvLyBhbHNvLCBtYWtlIGRpdnMgY2xpY2thYmxlIGluIGNzcy4gZG9uJ3QgYWxsb3cgY2xpY2tzIG9uIGFscmVhZHkgY2xpY2tlZC5cbiAgICAvLyBtYWtlIG9ubHkgdGhlIGxlZnQgZ2FtZWJvYXJkIGNsaWNrYWJsZVxuXG4gICAgLy8gZ2FtZSBjb2RlXG5cbiAgICAvLyBtYXliZSBzZXQgdGltZW91dCBmb3IgZW5lbXkuLi4gd2FpdCBhIGJpdFxuICAgIGZ1bmN0aW9uIGRpc3BsYXlQbGF5ZXJHYW1lYm9hcmQoZ2FtZWJvYXJkKSB7XG4gICAgICAgIGxldCBnYW1lYm9hcmRDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZ2FtZWJvYXJkLWNvbnRhaW5lci5yaWdodCcpXG4gICAgICAgIGdhbWVib2FyZC5ncmlkLm1hcCgocm93LCByb3dJbmRleCkgPT4ge1xuICAgICAgICAgICAgbGV0IHJvd0VsZW1lbnQgPSBwb3B1bGF0ZUVsZW1lbnRJbmZvKCdkaXYnLCBudWxsLCBnYW1lYm9hcmRDb250YWluZXIsICdyb3cnKTtcbiAgICAgICAgICAgIHJvdy5tYXAoKHNwYWNlKSA9PiB7XG4gICAgICAgICAgICAgICAgcG9wdWxhdGVFbGVtZW50SW5mbygnZGl2JywgZGV0ZXJtaW5lVGV4dChzcGFjZSksIHJvd0VsZW1lbnQsICdjb2x1bW4nKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICAvLyBtYWtlIGVuZW15IChjb21wdXRlcikgZ2FtZWJvYXJkIGNsaWNrYWJsZVxuICAgIGZ1bmN0aW9uIGRpc3BsYXlDb21wdXRlckdhbWVib2FyZChnYW1lYm9hcmQpIHtcbiAgICAgICAgbGV0IGdhbWVib2FyZENvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5nYW1lYm9hcmQtY29udGFpbmVyLmxlZnQnKVxuICAgICAgICBnYW1lYm9hcmQuZ3JpZC5tYXAoKHJvdywgcm93SW5kZXgpID0+IHtcbiAgICAgICAgICAgIGxldCByb3dFbGVtZW50ID0gcG9wdWxhdGVFbGVtZW50SW5mbygnZGl2JywgbnVsbCwgZ2FtZWJvYXJkQ29udGFpbmVyLCAncm93Jyk7XG4gICAgICAgICAgICByb3cubWFwKChzcGFjZSwgY29sSW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgc3BhY2VFbGVtZW50ID0gcG9wdWxhdGVFbGVtZW50SW5mbygnZGl2JywgZGV0ZXJtaW5lVGV4dChzcGFjZSksIHJvd0VsZW1lbnQsICdjb2x1bW4nLCAgZGV0ZXJtaW5lQ2VsbFN0eWxlKHNwYWNlKSApXG4gICAgICAgICAgICAgICAgc3BhY2VFbGVtZW50LmRhdGFzZXQuY29sID0gY29sSW5kZXg7XG4gICAgICAgICAgICAgICAgc3BhY2VFbGVtZW50LmRhdGFzZXQucm93ID0gcm93SW5kZXg7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGxldCBnYW1lQ29udHJvbGxlciA9IG1ha2VHYW1lQ29udHJvbGxlcigpO1xuXG4gICAgZnVuY3Rpb24gZGlzcGxheUJvdGhHYW1lYm9hcmRzKCkge1xuICAgICAgICBkaXNwbGF5UGxheWVyR2FtZWJvYXJkKGdhbWVDb250cm9sbGVyLmdldFBsYXllckdhbWVib2FyZCgpKVxuICAgICAgICBkaXNwbGF5Q29tcHV0ZXJHYW1lYm9hcmQoZ2FtZUNvbnRyb2xsZXIuZ2V0Q29tcHV0ZXJHYW1lYm9hcmQoKSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW1vdmVCb3RoR2FtZUJvYXJkcygpIHtcbiAgICAgICAgbGV0IGdhbWVib2FyZENvbnRhaW5lcnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZ2FtZWJvYXJkLWNvbnRhaW5lcicpXG4gICAgICAgIGdhbWVib2FyZENvbnRhaW5lcnMuZm9yRWFjaChjb250YWluZXIgPT4gY29udGFpbmVyLnRleHRDb250ZW50ID0gXCJcIilcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRDbGlja2FibGVzKCkge1xuXG4gICAgICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuY2xpY2thYmxlJylcbiAgICB9XG5cbiAgICAvLyB0aGUgZ2FtZSBsb29wIGlzIGhlcmVcblxuICAgIC8vIHdvdWxkIGkgbmVlZCB0byBjb25zaWRlciBhIGZ1dHVyZSAyIHBsYXllciB2ZXJzaW9uP1xuXG4gICAgY3JlYXRlUHJlR2FtZUdyaWQoKTtcbiAgICBkaXNwbGF5Qm90aEdhbWVib2FyZHMoKTtcbiAgICAvLyBidXQgdGhlc2UgbmVlZCBwbGF5ZXJHYW1lYm9hcmQgYW5kIGNvbXB1dGVyR2FtZWJvYXJkLi4uIFxuICAgIC8vIGZpZ3VyZSBpdCBvdXQgZnJvbSB0aWMgdGFjIHRvZS4uLlxuICAgIC8vIGZvciBlYWNoIG9mIHRoZXNlIHNwYWNlc1xuICAgIC8vIGlmIGNsaWNrZWQsIHRoZW4gcGxheSBhIHJvdW5kXG4gICAgLy8gdGhpcyBtZWFucyB1c2luZyBhdHRhY2ssIHVzaW5nIHRoZSBjb29yZGluYXRlcy4uLiBpIHBvc3NpYmx5IG5lZWQgdG8gYWRkIGRhdGEuY29sIGFuZCBkYXRhLnJvdy4uLiBva2F5XG5cbiAgICBmdW5jdGlvbiBjaGVja0lmR2FtZU92ZXIoKSB7XG4gICAgICAgIHJldHVybiBnYW1lQ29udHJvbGxlci5nZXRJc0dhbWVPdmVyKCkgPyB0cnVlIDogZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gbWF5YmUgZGlzYWJsZSBhbGw/IHR1cm4gYWxsIGNsaWNrYWJsZXMgaW50byB1bmNsaWNrYWJsZVxuICAgIGZ1bmN0aW9uIHNldEdhbWVPdmVyKCkge1xuICAgICAgICBjb25zdCBlbmVteUdyaWQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuY2xpY2thYmxlJylcbiAgICAgICAgZW5lbXlHcmlkLmZvckVhY2goZWwgPT4ge1xuICAgICAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSgnY2xpY2thYmxlJylcbiAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ3VuY2xpY2thYmxlJylcbiAgICAgICAgfSlcbiAgICB9XG5cblxuICAgIGJvZHlFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGVsKSA9PiB7XG4gICAgICAgIGlmIChlbC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdjbGlja2FibGUnKSkge1xuICAgICAgICAgICAgY29uc3Qgc3BhY2UgPSBlbC50YXJnZXQuZGF0YXNldDtcbiAgICAgICAgICAgIGdhbWVDb250cm9sbGVyLnBsYXlSb3VuZChbcGFyc2VJbnQoc3BhY2UuY29sKSwgcGFyc2VJbnQoc3BhY2Uucm93KV0pXG4gICAgICAgICAgICByZW1vdmVCb3RoR2FtZUJvYXJkcygpO1xuICAgICAgICAgICAgZGlzcGxheUJvdGhHYW1lYm9hcmRzKCk7XG5cbiAgICAgICAgICAgIGlmIChjaGVja0lmR2FtZU92ZXIoKSkgc2V0R2FtZU92ZXIoKVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2InKVxuICAgICAgICAgICAgICAgIGdhbWVDb250cm9sbGVyLnBsYXlSb3VuZCgpO1xuICAgICAgICAgICAgICAgIHJlbW92ZUJvdGhHYW1lQm9hcmRzKCk7XG4gICAgICAgICAgICAgICAgZGlzcGxheUJvdGhHYW1lYm9hcmRzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KVxufVxuXG5cblxuZXhwb3J0IHtcbiAgICBtYWtlRGlzcGxheUNvbnRyb2xsZXIsXG59IiwiaW1wb3J0IHsgR2FtZWJvYXJkIH0gZnJvbSBcIi4vZ2FtZWJvYXJkXCI7XG5pbXBvcnQgeyBQbGF5ZXIsIENvbXB1dGVyIH0gZnJvbSBcIi4vcGxheWVyXCI7XG4vLyBpbXBvcnQgeyBkaXNwbGF5UGxheWVyR2FtZWJvYXJkLCBkaXNwbGF5Q29tcHV0ZXJHYW1lYm9hcmR9IGZyb20gXCIuL2Rpc3BsYXlDb250cm9sbGVyXCI7XG5cbi8vIGkgbmVlZCB0byBjaGFuZ2UgdGhpcyBhIGxpdHRsZVxuLy8gbmVlZCB0byBkaXNwbGF5IGJvdGggZ2FtZWJvYXJkcy4uLlxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VHYW1lQ29udHJvbGxlcigpIHtcbiAgICAvLyBhdCBzb21lIHBvaW50LCB3aWxsIG5lZWQgdG8gZGV2ZWxvcCBmdW5jdGlvbiB0byBwbGFjZUFsbFNoaXBzLCB3aGljaCBcblxuICAgIGxldCBwbGF5ZXJHYW1lYm9hcmQgPSBuZXcgR2FtZWJvYXJkKCk7XG4gICAgbGV0IGNvbXB1dGVyR2FtZWJvYXJkID0gbmV3IEdhbWVib2FyZCgpO1xuXG4gICAgY29uc3QgZ2V0UGxheWVyR2FtZWJvYXJkID0gKCkgPT4gcGxheWVyR2FtZWJvYXJkXG4gICAgY29uc3QgZ2V0Q29tcHV0ZXJHYW1lYm9hcmQgPSAoKSA9PiBjb21wdXRlckdhbWVib2FyZFxuXG4gICAgY29uc3QgcGxheWVyID0gbmV3IFBsYXllcigpO1xuICAgIGNvbnN0IGNvbXB1dGVyID0gbmV3IENvbXB1dGVyKCk7XG5cbiAgICBsZXQgY3VycmVudFBsYXllciA9IHBsYXllcjtcbiAgICBsZXQgZW5lbXlHYW1lYm9hcmQgPSBjb21wdXRlckdhbWVib2FyZFxuXG4gICAgbGV0IGlzR2FtZU92ZXIgPSBmYWxzZTtcblxuICAgIGNvbnN0IGdldEVuZW15R2FtZWJvYXJkID0gKCkgPT4gZW5lbXlHYW1lYm9hcmQoKVxuXG4gICAgLy8gd2FpdCwgaXMgdGhpcyBtb2NraW5nPyBpdCBtYXkgYmUgd29ydGggYSByZWFkIGFnYWluLi4uXG4gICAgLy8gcGxheWVyR2FtZWJvYXJkLnBsYWNlU2hpcCg1LCAndmVydGljYWwnLCBbOSw2XSk7XG4gICAgLy8gcGxheWVyR2FtZWJvYXJkLnBsYWNlU2hpcCg0LCAnaG9yaXpvbnRhbCcsIFswLDhdKTtcbiAgICAvLyBwbGF5ZXJHYW1lYm9hcmQucGxhY2VTaGlwKDMsICd2ZXJ0aWNhbCcsIFs1LDZdKTtcbiAgICAvLyBwbGF5ZXJHYW1lYm9hcmQucGxhY2VTaGlwKDMsICdob3Jpem9udGFsJywgWzIsM10pO1xuICAgIHBsYXllckdhbWVib2FyZC5wbGFjZVNoaXAoMiwgJ3ZlcnRpY2FsJywgWzEsMl0pO1xuXG4gICAgLy8gY29tcHV0ZXJHYW1lYm9hcmQucGxhY2VTaGlwKDUsICd2ZXJ0aWNhbCcsIFs5LDNdKTtcbiAgICAvLyBjb21wdXRlckdhbWVib2FyZC5wbGFjZVNoaXAoNCwgJ2hvcml6b250YWwnLCBbMCw4XSk7XG4gICAgY29tcHV0ZXJHYW1lYm9hcmQucGxhY2VTaGlwKDMsICd2ZXJ0aWNhbCcsIFs1LDZdKTtcbiAgICAvLyBjb21wdXRlckdhbWVib2FyZC5wbGFjZVNoaXAoMywgJ2hvcml6b250YWwnLCBbMiwzXSk7XG4gICAgY29tcHV0ZXJHYW1lYm9hcmQucGxhY2VTaGlwKDIsICd2ZXJ0aWNhbCcsIFsxLDJdKTtcblxuICAgIC8vIG1heWJlIGkgbmVlZCB0byBjaGFuZ2UgdGhpcz8gbWF5YmUgbm90IVxuICAgIGZ1bmN0aW9uIHN3YXBQbGF5ZXJBbmRFbmVteSgpIHtcbiAgICAgICAgY3VycmVudFBsYXllciA9PT0gcGxheWVyID8gY3VycmVudFBsYXllciA9IGNvbXB1dGVyIDogY3VycmVudFBsYXllciA9IHBsYXllcjtcbiAgICAgICAgZW5lbXlHYW1lYm9hcmQgPT09IHBsYXllckdhbWVib2FyZCA/IGVuZW15R2FtZWJvYXJkID0gY29tcHV0ZXJHYW1lYm9hcmQgOiBlbmVteUdhbWVib2FyZCA9IHBsYXllckdhbWVib2FyZDtcbiAgICB9XG5cbiAgICAvLyBpZiBnYW1lIGlzIG92ZXIsIHNldCB0aGUgaXNHYW1lT3ZlciB2YXJpYWJsZSB0byB0cnVlIHRvIGVuZCB0aGUgd2hpbGUgbG9vcC5cbiAgICBmdW5jdGlvbiBjaGVja0lzR2FtZU92ZXIoZ2FtZWJvYXJkKSB7XG4gICAgICAgIGlmIChnYW1lYm9hcmQuY2hlY2tJc0dhbWVPdmVyKCkpIGlzR2FtZU92ZXIgPSB0cnVlO1xuICAgIH1cblxuICAgIGNvbnN0IGdldElzR2FtZU92ZXI9ICgpID0+IGlzR2FtZU92ZXJcbiAgICBcbiAgICBmdW5jdGlvbiB2aXN1YWxpc2VHYW1lYm9hcmQoZ2FtZWJvYXJkKSB7XG4gICAgICAgIC8vIGhvdyBkbyBpIGNvbnZlcnQgdGhlIGdhbWVib2FyZCB3aXRoIHRoZSBzcGFjZXMsIGludG8gYSBjb25zb2xlIGxvZz9cbiAgICAgICAgLy8gbWF5YmUgYSBkb3VibGUgbWFwXG4gICAgICAgIGdhbWVib2FyZC5ncmlkLm1hcChyb3cgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgICByb3cubWFwKHNwYWNlID0+IHtcbiAgICAgICAgICAgICAgICBpZihzcGFjZS5oYXNTaGlwID09PSBmYWxzZSAmJiBzcGFjZS53YXNHdWVzc2VkID09PSBmYWxzZSkgcmV0dXJuICdfJ1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNwYWNlLmhhc1NoaXAgPT09IGZhbHNlICYmIHNwYWNlLndhc0d1ZXNzZWQgPT09IHRydWUpIHJldHVybiAnbSdcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChzcGFjZS5oYXNTaGlwID09PSB0cnVlICYmIHNwYWNlLndhc0d1ZXNzZWQgPT09IGZhbHNlKSByZXR1cm4gJ28nXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc3BhY2UuaGFzU2hpcCA9PT0gdHJ1ZSAmJiBzcGFjZS53YXNHdWVzc2VkID09PSB0cnVlKSByZXR1cm4gJ3gnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIC8vIGNoZWNrIGlmIHRoZSBndWVzc2VkQ29vcmRzIGFycmF5IGNoYW5nZXM7IGlmIHNvLCB0aGUgYXR0YWNrIHdhcyBzdWNjZXNzZnVsLlxuICAgIC8vIHRoaXMgYWJzb2x1dGVseSBtdXN0IGdldCB0ZXN0ZWQuLi5cbiAgICAvLyBmdW5jdGlvbiB0cnlBdHRhY2tVbnRpbFN1Y2Nlc3MoKSB7XG4gICAgLy8gICAgIGxldCBpbml0aWFsR3Vlc3NlcyA9IEpTT04uc3RyaW5naWZ5KGVuZW15R2FtZWJvYXJkLmd1ZXNzZWRDb29yZHMpXG4gICAgLy8gICAgIGxldCBjdXJyZW50R3Vlc3NlcyA9IGluaXRpYWxHdWVzc2VzO1xuICAgIC8vICAgICBsZXQgdmFsaWRQbGF5TWFkZSA9IGZhbHNlO1xuICAgIC8vICAgICBzd2l0Y2ggKGN1cnJlbnRQbGF5ZXIpIHtcbiAgICAvLyAgICAgICAgIGNhc2UgcGxheWVyOlxuICAgIC8vICAgICAgICAgICAgIHdoaWxlICghdmFsaWRQbGF5TWFkZSkge1xuICAgIC8vICAgICAgICAgICAgICAgICAvLyBsZXQgW2NvbCwgcm93XSA9IHByb21wdCgnY29vcmRzIHRvIGF0dGFjaywgaW4gXCJ4LHlcIicpLnNwbGl0KFwiLFwiKVxuICAgIC8vICAgICAgICAgICAgICAgICBjb25zdCBjb2wgPSBwYXJzZUludChwcm9tcHQoJ2NvbCB0byBhdHRhY2snKSk7XG4gICAgLy8gICAgICAgICAgICAgICAgIGNvbnN0IHJvdyA9IHBhcnNlSW50KHByb21wdCgncm93IHRvIGF0dGFjaycpKTtcbiAgICAvLyAgICAgICAgICAgICAgICAgY3VycmVudFBsYXllci5hdHRhY2soZW5lbXlHYW1lYm9hcmQsIFtjb2wsIHJvd10pXG4gICAgLy8gICAgICAgICAgICAgICAgIGN1cnJlbnRHdWVzc2VzID0gSlNPTi5zdHJpbmdpZnkoZW5lbXlHYW1lYm9hcmQuZ3Vlc3NlZENvb3JkcylcbiAgICAvLyAgICAgICAgICAgICAgICAgaWYgKGluaXRpYWxHdWVzc2VzICE9PSBjdXJyZW50R3Vlc3NlcykgdmFsaWRQbGF5TWFkZSA9IHRydWU7XG4gICAgLy8gICAgICAgICAgICAgfVxuICAgIC8vICAgICAgICAgICAgIGJyZWFrO1xuICAgIC8vICAgICAgICAgY2FzZSBjb21wdXRlcjpcbiAgICAvLyAgICAgICAgICAgICB3aGlsZSAoIXZhbGlkUGxheU1hZGUpIHtcbiAgICAvLyAgICAgICAgICAgICAgICAgY3VycmVudFBsYXllci5yYW5kb21BdHRhY2soZW5lbXlHYW1lYm9hcmQpXG4gICAgLy8gICAgICAgICAgICAgICAgIGN1cnJlbnRHdWVzc2VzID0gSlNPTi5zdHJpbmdpZnkoZW5lbXlHYW1lYm9hcmQuZ3Vlc3NlZENvb3JkcylcbiAgICAvLyAgICAgICAgICAgICAgICAgaWYgKGluaXRpYWxHdWVzc2VzICE9PSBjdXJyZW50R3Vlc3NlcykgdmFsaWRQbGF5TWFkZSA9IHRydWU7XG4gICAgLy8gICAgICAgICAgICAgfVxuICAgIC8vICAgICAgICAgICAgIGJyZWFrO1xuICAgIC8vICAgICB9XG4gICAgLy8gfVxuICAgIGZ1bmN0aW9uIHRyeVJhbmRvbUF0dGFja1VudGlsU3VjY2VzcygpIHtcblxuICAgICAgICBsZXQgaW5pdGlhbEd1ZXNzZXMgPSBKU09OLnN0cmluZ2lmeShlbmVteUdhbWVib2FyZC5ndWVzc2VkQ29vcmRzKVxuICAgICAgICBsZXQgY3VycmVudEd1ZXNzZXMgPSBpbml0aWFsR3Vlc3NlcztcbiAgICAgICAgbGV0IHZhbGlkUGxheU1hZGUgPSBmYWxzZTtcbiAgICAgICAgd2hpbGUgKCF2YWxpZFBsYXlNYWRlKSB7XG4gICAgICAgICAgICBjdXJyZW50UGxheWVyLnJhbmRvbUF0dGFjayhlbmVteUdhbWVib2FyZClcbiAgICAgICAgICAgIGN1cnJlbnRHdWVzc2VzID0gSlNPTi5zdHJpbmdpZnkoZW5lbXlHYW1lYm9hcmQuZ3Vlc3NlZENvb3JkcylcbiAgICAgICAgICAgIGlmIChpbml0aWFsR3Vlc3NlcyAhPT0gY3VycmVudEd1ZXNzZXMpIHZhbGlkUGxheU1hZGUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGxheVJvdW5kKGNvb3Jkcz1udWxsKSB7XG5cbiAgICAgICAgc3dpdGNoIChjdXJyZW50UGxheWVyKSB7XG4gICAgICAgICAgICBjYXNlIHBsYXllcjpcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygncGxheWVyJylcbiAgICAgICAgICAgICAgICAvLyB2aXN1YWxpc2VHYW1lYm9hcmQoZW5lbXlHYW1lYm9hcmQpO1xuICAgICAgICAgICAgICAgIGN1cnJlbnRQbGF5ZXIuYXR0YWNrKGVuZW15R2FtZWJvYXJkLGNvb3JkcylcbiAgICAgICAgICAgICAgICBjaGVja0lzR2FtZU92ZXIoZW5lbXlHYW1lYm9hcmQpO1xuICAgICAgICAgICAgICAgIHN3YXBQbGF5ZXJBbmRFbmVteSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjYXNlIGNvbXB1dGVyOlxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjb21wdXRlcicpXG4gICAgICAgICAgICAgICAgLy8gdmlzdWFsaXNlR2FtZWJvYXJkKGVuZW15R2FtZWJvYXJkKTtcbiAgICAgICAgICAgICAgICB0cnlSYW5kb21BdHRhY2tVbnRpbFN1Y2Nlc3MoKTtcbiAgICAgICAgICAgICAgICBjaGVja0lzR2FtZU92ZXIoZW5lbXlHYW1lYm9hcmQpO1xuICAgICAgICAgICAgICAgIHN3YXBQbGF5ZXJBbmRFbmVteSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHBsYXlSb3VuZCxcbiAgICAgICAgICAgIGdldFBsYXllckdhbWVib2FyZCxcbiAgICAgICAgICAgIGdldENvbXB1dGVyR2FtZWJvYXJkLFxuICAgICAgICAgICAgZ2V0SXNHYW1lT3ZlcixcbiAgICAgICAgfVxufSIsIi8vIGltcG9ydCAnQGZvcnRhd2Vzb21lL2ZvbnRhd2Vzb21lLWZyZWUvanMvZm9udGF3ZXNvbWUnXG4vLyBpbXBvcnQgJ0Bmb3J0YXdlc29tZS9mb250YXdlc29tZS1mcmVlL2pzL3NvbGlkJ1xuLy8gaW1wb3J0ICdAZm9ydGF3ZXNvbWUvZm9udGF3ZXNvbWUtZnJlZS9qcy9yZWd1bGFyJ1xuLy8gaW1wb3J0ICdAZm9ydGF3ZXNvbWUvZm9udGF3ZXNvbWUtZnJlZS9qcy9icmFuZHMnXG5cbmltcG9ydCB7IG1ha2VHYW1lQ29udHJvbGxlciB9IGZyb20gXCIuL2dhbWVDb250cm9sbGVyXCI7XG5pbXBvcnQgXCIuL3N0eWxlLmNzc1wiO1xuaW1wb3J0IHsgbWFrZURpc3BsYXlDb250cm9sbGVyIH0gZnJvbSBcIi4vZGlzcGxheUNvbnRyb2xsZXJcIjtcblxubWFrZURpc3BsYXlDb250cm9sbGVyKCk7Il0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJnZXRUYXJnZXQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJuYyIsImxvY2FscyIsIlNoaXAiLCJjb25zdHJ1Y3RvciIsImhpdHMiLCJzdW5rIiwic2V0U3VuayIsImhpdCIsImlzU3VuayIsIlNwYWNlIiwiaGFzU2hpcCIsIndhc0d1ZXNzZWQiLCJtaXNzZWRIaXQiLCJzaGlwIiwiR2FtZWJvYXJkIiwiZ3JpZCIsIm5ld0dyaWQiLCJyb3ciLCJqIiwic3F1YXJlIiwiY3JlYXRlR3JpZCIsImFsbFNoaXBDb29yZHMiLCJndWVzc2VkQ29vcmRzIiwiaXNPdXRPZkJvdW5kcyIsImNvbCIsImNoZWNrSWZBbHJlYWR5UGxhY2VkIiwicG9wdWxhdGVTaGlwQ29vcmRzQXJyYXkiLCJwbGFjZVNoaXAiLCJvcmllbnRhdGlvbiIsInN0YXJ0Q29sIiwic3RhcnRSb3ciLCJuZXdTaGlwIiwiaW5pdGlhbGlzZVNoaXAiLCJwbGFjZUFsbFNoaXBzT25Cb2FyZCIsIk1hdGgiLCJyb3VuZCIsInJhbmRvbSIsImZsb29yIiwiZ2V0UG9zaXRpb24iLCJjaGVja1NoaXBFeGlzdHMiLCJnZXRTaGlwIiwiY2hlY2tNaXNzZWRIaXQiLCJjaGVja1dhc0d1ZXNzZWQiLCJjaGVja0lzR2FtZU92ZXIiLCJjb252ZXJ0ZWRBbGxTaGlwQ29vcmRzIiwiY29vcmQiLCJjb252ZXJ0ZWRHdWVzc2VkQ29vcmRzIiwiY29uc29sZSIsImxvZyIsImV2ZXJ5Iiwic2hpcENvb3JkIiwiaW5jbHVkZXMiLCJyZWNlaXZlQXR0YWNrIiwiUGxheWVyIiwiY29tcHV0ZXIiLCJhdHRhY2siLCJnYW1lYm9hcmQiLCJDb21wdXRlciIsInN1cGVyIiwicmFuZG9tQXR0YWNrIiwicmFuZG9tQ29sIiwicmFuZG9tUm93IiwiY3VycmVudFNoaXAiLCJtb3ZpbmdTaGlwIiwiY3VycmVudGx5Um90YXRpbmciLCJnZXRDdXJyZW50bHlSb3RhdGluZyIsImRpc2FibGVDdXJyZW50bHlSb3RhdGluZyIsInNldE1vdmluZ1NoaXBUb0ZhbHNlIiwiZmluZFNoaXBGcm9tQ2xhc3NMaXN0QW5kUGVyZm9ybUFjdGlvbiIsImFjdGlvbiIsImNvbnRhaW5zIiwic2hpcExlbmd0aHMiLCJzaGlwT3JpZW50YXRpb25zIiwiZ2V0Q3VycmVudFNoaXBPcmllbnRhdGlvbiIsImdldEN1cnJlbnRTaGlwIiwic2V0Q3VycmVudFNoaXAiLCJzZXRDdXJyZW50U2hpcEZyb21ET00iLCJjbGFzc0xpc3QiLCJyZXNldEN1cnJlbnRTaGlwIiwiZ2V0Q3VycmVudFNoaXBMZW5ndGgiLCJib2R5RWxlbWVudCIsInBvcHVsYXRlRWxlbWVudEluZm8iLCJkaXZUeXBlIiwidGV4dCIsInBhcmVudCIsImNsYXNzZXMiLCJuZXdFbGVtZW50IiwiZm9yRWFjaCIsImNsYXNzTmFtZSIsImFkZCIsInRleHRDb250ZW50IiwicmVtb3ZlSG92ZXJlZENsYXNzIiwiaG92ZXJlZEVsZW1lbnRTZWxlY3RvciIsImhvdmVyaW5nIiwicXVlcnlTZWxlY3RvckFsbCIsInNwYWNlIiwicmVtb3ZlQWxsSG92ZXJlZCIsInJlbW92ZUNsYXNzRnJvbVByZXZpb3VzbHlTZWxlY3RlZCIsInByZXZpb3VzU2VsZWN0ZWRTaGlwIiwibWFya1ZhbGlkSG92ZXIiLCJtYXJrSW52YWxpZEhvdmVyIiwiZXh0ZW5kTWFpbkhvdmVyIiwiY2xpY2tUYXJnZXQiLCJpbnZhbGlkUGxhY2VtZW50IiwiaGVhZFJvdyIsInBhcnNlSW50IiwiZGF0YXNldCIsImhlYWRDb2wiLCJzaGlwTGVuZ3RoIiwiZGV0ZXJtaW5lT3RoZXJIb3ZlckVsZW1lbnRzIiwiYWRkU2hpcENsYXNzVG9TcGFjZSIsImFkZFNoaXBIZWFkIiwiY2hlY2tJZkNsaWNrU2hpcEhlYWQiLCJyZW1vdmVTZWxlY3RlZFNoaXBEZWNvcmF0aW9uIiwicmVtb3ZlUm90YXRlSWNvbiIsImljb24iLCJjaGVja0ludmFsaWRQbGFjZW1lbnQiLCJjYW5ub3RQbGFjZVNoaXAiLCJyZW1vdmVTaGlwRnJvbUdyaWQiLCJzaGlwTmFtZSIsInJlbW92ZUN1cnJlbnRTaGlwRnJvbUdyaWQiLCJkZXRlcm1pbmVUZXh0IiwiYWRkRXZlbnRMaXN0ZW5lciIsInNoaXBDbGFzcyIsInNob3dSb3RhdGVkSG92ZXIiLCJzaG93Um90YXRlSWNvbiIsImNsb25lIiwiY2xvbmVOb2RlIiwiY2hpbGRyZW4iLCJnYW1lQ29udHJvbGxlciIsInBsYXllckdhbWVib2FyZCIsImNvbXB1dGVyR2FtZWJvYXJkIiwicGxheWVyIiwiY3VycmVudFBsYXllciIsImVuZW15R2FtZWJvYXJkIiwiaXNHYW1lT3ZlciIsInN3YXBQbGF5ZXJBbmRFbmVteSIsInBsYXlSb3VuZCIsImNvb3JkcyIsImluaXRpYWxHdWVzc2VzIiwiY3VycmVudEd1ZXNzZXMiLCJ2YWxpZFBsYXlNYWRlIiwidHJ5UmFuZG9tQXR0YWNrVW50aWxTdWNjZXNzIiwiZ2V0UGxheWVyR2FtZWJvYXJkIiwiZ2V0Q29tcHV0ZXJHYW1lYm9hcmQiLCJnZXRJc0dhbWVPdmVyIiwibWFrZUdhbWVDb250cm9sbGVyIiwiZGlzcGxheUJvdGhHYW1lYm9hcmRzIiwiZ2FtZWJvYXJkQ29udGFpbmVyIiwicm93SW5kZXgiLCJyb3dFbGVtZW50IiwiZGlzcGxheVBsYXllckdhbWVib2FyZCIsImNvbEluZGV4Iiwic3BhY2VFbGVtZW50IiwiZGV0ZXJtaW5lQ2VsbFN0eWxlIiwiZGlzcGxheUNvbXB1dGVyR2FtZWJvYXJkIiwicmVtb3ZlQm90aEdhbWVCb2FyZHMiLCJjb250YWluZXIiLCJpbml0aWFsR3JpZCIsImNyZWF0ZVByZUdhbWVHcmlkIiwiZWwiLCJtYWtlRGlzcGxheUNvbnRyb2xsZXIiXSwic291cmNlUm9vdCI6IiJ9