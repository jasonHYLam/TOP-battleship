(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>s});var o=t(537),r=t.n(o),i=t(645),a=t.n(i)()(r());a.push([e.id,"body {\n    margin: 0 auto;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    background-color: black;\n}\n.container {\n    display: flex;\n    flex-direction: row;\n    gap: 40px;\n}\n\n.clickable {\n    cursor: pointer;\n}\n\n.popup {\n    /* position: absolute; */\n    width: 1500px;\n    height: 700px;\n    background-color: cornflowerblue;\n    /* display: none; */\n}\n\n.blocker {\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    content: '';\n    position: fixed;\n}\n\n.pregame-space {\n    margin: 1px;\n    /* width: 30px;\n    height: 30px; */\n    border: black 1px solid;\n    background-color: white;\n    cursor: pointer;\n}\n\n.pregame-container {\n    display: flex;\n    flex-direction: row;\n    position: relative;\n}\n\n.start-button {\n    background-color: bisque;\n    display: none;\n    cursor: pointer;\n}\n.ship-container {\n    height: auto;\n    display: flex;\n    flex-direction:column;\n    gap: 20px;\n}\n\n.ship {\n    height: 30px;\n    background-color: white;\n    cursor: pointer;\n}\n\n.carrier {\n    width: 150px;\n}\n\n.battleship {\n    width: 120px;\n}\n\n.cruiser, .submarine {\n    width: 90px;\n}\n\n.destroyer {\n    width: 60px;\n}\n\n.gameboard-container, .initial-grid {\n    width: 500px;\n    height: 500px;\n    display: flex;\n    flex-direction: column;\n    background-color: bisque;\n}\n\n.row {\n    flex: 1;\n    display: flex;\n}\n\n.column {\n    flex: 1;\n    background-color: grey;\n    /* justify-content: center; */\n    text-align: center;\n}\n\n\n\n.selected-ship-off-grid {\n    background-color: beige;\n    border: white solid 2px;\n    box-sizing: border-box;\n}\n\n\n.ship-in-space {\n    background-color: white;\n}\n\n.grey-out {\n    background-color: darkslategrey;\n}\n\n.valid-hovering {\n    background-color: aqua;\n}\n\n.invalid-hovering {\n    background-color: coral;\n}\n\n.ship-head-hover {\n    background-color: goldenrod;\n}\n\n\n.selected-ship-on-grid {\n    background-color: darkgrey;\n    \n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,cAAc;IACd,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,uBAAuB;AAC3B;AACA;IACI,aAAa;IACb,mBAAmB;IACnB,SAAS;AACb;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,wBAAwB;IACxB,aAAa;IACb,aAAa;IACb,gCAAgC;IAChC,mBAAmB;AACvB;;AAEA;IACI,MAAM;IACN,SAAS;IACT,OAAO;IACP,QAAQ;IACR,WAAW;IACX,eAAe;AACnB;;AAEA;IACI,WAAW;IACX;mBACe;IACf,uBAAuB;IACvB,uBAAuB;IACvB,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,kBAAkB;AACtB;;AAEA;IACI,wBAAwB;IACxB,aAAa;IACb,eAAe;AACnB;AACA;IACI,YAAY;IACZ,aAAa;IACb,qBAAqB;IACrB,SAAS;AACb;;AAEA;IACI,YAAY;IACZ,uBAAuB;IACvB,eAAe;AACnB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,aAAa;IACb,sBAAsB;IACtB,wBAAwB;AAC5B;;AAEA;IACI,OAAO;IACP,aAAa;AACjB;;AAEA;IACI,OAAO;IACP,sBAAsB;IACtB,6BAA6B;IAC7B,kBAAkB;AACtB;;;;AAIA;IACI,uBAAuB;IACvB,uBAAuB;IACvB,sBAAsB;AAC1B;;;AAGA;IACI,uBAAuB;AAC3B;;AAEA;IACI,+BAA+B;AACnC;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,2BAA2B;AAC/B;;;AAGA;IACI,0BAA0B;;AAE9B",sourcesContent:["body {\n    margin: 0 auto;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    background-color: black;\n}\n.container {\n    display: flex;\n    flex-direction: row;\n    gap: 40px;\n}\n\n.clickable {\n    cursor: pointer;\n}\n\n.popup {\n    /* position: absolute; */\n    width: 1500px;\n    height: 700px;\n    background-color: cornflowerblue;\n    /* display: none; */\n}\n\n.blocker {\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    content: '';\n    position: fixed;\n}\n\n.pregame-space {\n    margin: 1px;\n    /* width: 30px;\n    height: 30px; */\n    border: black 1px solid;\n    background-color: white;\n    cursor: pointer;\n}\n\n.pregame-container {\n    display: flex;\n    flex-direction: row;\n    position: relative;\n}\n\n.start-button {\n    background-color: bisque;\n    display: none;\n    cursor: pointer;\n}\n.ship-container {\n    height: auto;\n    display: flex;\n    flex-direction:column;\n    gap: 20px;\n}\n\n.ship {\n    height: 30px;\n    background-color: white;\n    cursor: pointer;\n}\n\n.carrier {\n    width: 150px;\n}\n\n.battleship {\n    width: 120px;\n}\n\n.cruiser, .submarine {\n    width: 90px;\n}\n\n.destroyer {\n    width: 60px;\n}\n\n.gameboard-container, .initial-grid {\n    width: 500px;\n    height: 500px;\n    display: flex;\n    flex-direction: column;\n    background-color: bisque;\n}\n\n.row {\n    flex: 1;\n    display: flex;\n}\n\n.column {\n    flex: 1;\n    background-color: grey;\n    /* justify-content: center; */\n    text-align: center;\n}\n\n\n\n.selected-ship-off-grid {\n    background-color: beige;\n    border: white solid 2px;\n    box-sizing: border-box;\n}\n\n\n.ship-in-space {\n    background-color: white;\n}\n\n.grey-out {\n    background-color: darkslategrey;\n}\n\n.valid-hovering {\n    background-color: aqua;\n}\n\n.invalid-hovering {\n    background-color: coral;\n}\n\n.ship-head-hover {\n    background-color: goldenrod;\n}\n\n\n.selected-ship-on-grid {\n    background-color: darkgrey;\n    \n}"],sourceRoot:""}]);const s=a},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",o=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),o&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),o&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,o,r,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(o)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);o&&a[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),n.push(d))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */");return[n].concat([i]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,o=0;o<n.length;o++)if(n[o].identifier===e){t=o;break}return t}function o(e,o){for(var i={},a=[],s=0;s<e.length;s++){var c=e[s],l=o.base?c[0]+o.base:c[0],d=i[l]||0,u="".concat(l," ").concat(d);i[l]=d+1;var A=t(u),h={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==A)n[A].references++,n[A].updater(h);else{var p=r(h,o);o.byIndex=s,n.splice(s,0,{identifier:u,updater:p,references:1})}a.push(u)}return a}function r(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,r){var i=o(e=e||[],r=r||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var s=t(i[a]);n[s].references--}for(var c=o(e,r),l=0;l<i.length;l++){var d=t(i[l]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}i=c}}},569:e=>{var n={};e.exports=function(e,t){var o=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(o,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(o){var r=n[o];if(void 0!==r)return r.exports;var i=n[o]={id:o,exports:{}};return e[o](i,i.exports,t),i.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var o in n)t.o(n,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0,(()=>{var e=t(379),n=t.n(e),o=t(795),r=t.n(o),i=t(569),a=t.n(i),s=t(565),c=t.n(s),l=t(216),d=t.n(l),u=t(589),A=t.n(u),h=t(426),p={};p.styleTagTransform=A(),p.setAttributes=c(),p.insert=a().bind(null,"head"),p.domAPI=r(),p.insertStyleElement=d(),n()(h.Z,p),h.Z&&h.Z.locals&&h.Z.locals;class f{constructor(e){this.length=e,this.hits=0,this.sunk=!1}setSunk(){this.sunk=!0}hit(){this.hits++}isSunk(){this.length===this.hits&&this.setSunk()}}class g{constructor(){this.hasShip=!1,this.wasGuessed=!1,this.missedHit=!1,this.ship=null}}class m{constructor(){this.grid=function(){let e=[];for(let n=0;n<10;n++){let n=[];for(let e=0;e<10;e++){const e=new g;n.push(e)}e.push(n)}return e}(),this.allShipCoords=[],this.guessedCoords=[]}isOutOfBounds(e,n){return e>9||n>9}checkIfAlreadyPlaced(e,n){return!0===this.grid[n][e].hasShip}populateShipCoordsArray(e,n){this.allShipCoords.push([e,n])}placeShip(e,n,[t,o]){let r=!1;if(this.isOutOfBounds(t,o))return"out of bounds";let i=function(e){if(!(e<1||e>5))return new f(e)}(e);if(i)switch(n){case"horizontal":for(let n=0;n<e;n++){if(console.log(t+n,o),this.isOutOfBounds(t+n,o))return void(r=!0);if(this.checkIfAlreadyPlaced(t+n,o))return r=!0,"position already occupied: tried horizontal"}if(!r)for(let n=0;n<e;n++)this.grid[o][t+n].hasShip=!0,this.grid[o][t+n].ship=i,this.populateShipCoordsArray(t+n,o);break;case"vertical":for(let n=0;n<e;n++){if(this.isOutOfBounds(t,o+n))return void(r=!0);if(this.checkIfAlreadyPlaced(t,o+n))return r=!0,"position already occupied: tried vertical"}if(!r)for(let n=0;n<e;n++)this.grid[o+n][t].hasShip=!0,this.grid[o+n][t].ship=i,this.populateShipCoordsArray(t,o+n)}}getPosition(e,n){return this.grid[n][e]}checkShipExists(e,n){return this.grid[n][e].hasShip}getShip(e,n){return this.grid[n][e].ship}checkMissedHit(e,n){return this.grid[n][e].missedHit}checkWasGuessed(e,n){return this.grid[n][e].wasGuessed}checkIsGameOver(){let e=this.allShipCoords.map((e=>JSON.stringify(e))),n=this.guessedCoords.map((e=>JSON.stringify(e)));return console.log(e),console.log(n),console.log(e.every((e=>n.includes(e)))),e.every((e=>n.includes(e)))}receiveAttack(e,n){if(this.checkWasGuessed(e,n))return"already attacked";this.getPosition(e,n).wasGuessed=!0,this.guessedCoords.push([e,n]),this.checkShipExists(e,n)?(this.getShip(e,n).hit(),this.getShip(e,n).isSunk()):this.getPosition(e,n).missedHit=!0}}class b{constructor(e){}attack(e,[n,t]){e.receiveAttack(n,t)}}class v extends b{constructor(){super()}randomAttack(e){const n=Math.floor(10*Math.random()),t=Math.floor(10*Math.random());e.checkWasGuessed(n,t)||this.attack(e,[n,t])}}console.log("uh hello?"),function(){let e=function(){let e=new m,n=new m;const t=()=>n,o=new b,r=new v;let i=o,a=n,s=!1;function c(e){let n=JSON.stringify(t().allShipCoords),o=n;function r(){return["horizontal","vertical"][Math.round(Math.random())]}function i(){return[Math.floor(10*Math.random()),Math.floor(10*Math.random())]}let a=!1;for(;!a;)"horizontal"===r()?(console.log("try horizontal placement"),t().placeShip(e,"horizontal",i()),o=JSON.stringify(t().allShipCoords),n!==o&&(a=!0),console.log(a)):"vertical"===r()&&(console.log("try vertical placement"),t().placeShip(e,"vertical",i()),o=JSON.stringify(t().allShipCoords),n!==o&&(a=!0),console.log(a))}function l(){i=i===o?r:o,a=a===e?n:e}function d(e){e.checkIsGameOver()&&(s=!0)}return c(5),c(4),c(3),c(3),c(2),{playRound:function(e=null){switch(i){case o:console.log("player"),i.attack(a,e),d(a),l();break;case r:console.log("computer"),function(){let e=JSON.stringify(a.guessedCoords),n=e,t=!1;for(;!t;)i.randomAttack(a),n=JSON.stringify(a.guessedCoords),e!==n&&(t=!0)}(),d(a),l()}},getPlayerGameboard:()=>e,getComputerGameboard:t,getIsGameOver:()=>s}}(),n=null,t=!1,o=!1;function r(){o=!1}function i(){t=!1}function a(e,n){switch(!0){case e.contains("carrier"):return n("carrier");case e.contains("battleship"):return n("battleship");case e.contains("cruiser"):return n("cruiser");case e.contains("submarine"):return n("submarine");case e.contains("destroyer"):return n("destroyer")}}let s={carrier:{length:5,orientation:"horizontal",isPlaced:!1},battleship:{length:4,orientation:"horizontal",isPlaced:!1},cruiser:{length:3,orientation:"horizontal",isPlaced:!1},submarine:{length:3,orientation:"horizontal",isPlaced:!1},destroyer:{length:2,orientation:"horizontal",isPlaced:!1}};function c(){return s[n].orientation}function l(){return s[n].isPlaced=!0}function d(){return n}function u(e){n=e}function A(e){a(e.classList,u)}function h(){n=null}function p(){return s[n].length}let f=document.querySelector("body");function g(e,n=null,t=null,...o){const r=document.createElement(e);return o.forEach((e=>r.classList.add(e))),n&&(r.textContent=n),t&&t.appendChild(r),r}function C(e){let n=document.querySelectorAll(`.${e}`);n&&n.forEach((n=>{n.classList.remove(e)}))}function y(){C("valid-hovering"),C("invalid-hovering"),C("ship-head-hover")}function I(){let e=document.querySelector(".selected-ship-off-grid");e&&e.classList.remove("selected-ship-off-grid")}function k(e,n){document.querySelector(`[data-col="${e}"][data-row="${n}"]`).classList.add("valid-hovering")}function B(e,n){document.querySelector(`[data-col="${e}"][data-row="${n}"]`).classList.add("invalid-hovering")}function x(e){!function(e){let n=!1;const t=parseInt(e.dataset.row),o=parseInt(e.dataset.col);let r=p();if("horizontal"===c()){for(let e=o;e<o+r;e++)if(e>9||G(e,t)){n=!0;break}if(n){if(n)for(let e=o;e<o+r&&!(e>9);e++)B(e,t)}else for(let e=o;e<o+r;e++)k(e,t)}else if("vertical"===c()){for(let e=t;e<t+r;e++)if(e>9||G(o,e)){n=!0;break}if(n){if(n)for(let e=t;e<t+r&&!(e>9);e++)B(o,e)}else for(let e=t;e<t+r;e++)k(o,e)}}(e)}function S(e,n){let t=document.querySelector(`[data-col="${e}"][data-row="${n}"]`);t.classList.add("ship-in-space"),t.classList.add(d())}function w(e){e.classList.add("ship-head")}function E(e){return e.classList.contains("ship-head")}function L(){document.querySelectorAll(".selected-ship-on-grid").forEach((e=>{e.classList.remove("selected-ship-on-grid")}))}function q(){let e=document.querySelector("i");e.parentNode.removeChild(e)}function O(e){let n=!1;const t=parseInt(e.dataset.row),r=parseInt(e.dataset.col);let i=p();if("horizontal"===c()&&!o||"vertical"===c()&&o){for(let e=r;e<r+i;e++)if(e>9||G(e,t)){n=!0;break}if(!n)for(let e=r;e<r+i;e++)S(e,t)}else if("vertical"===c()&&!o||"horizontal"==c()&&o){for(let e=t;e<t+i;e++)if(e>9||G(r,e)){n=!0;break}if(!n)for(let e=t;e<t+i;e++)S(r,e)}}function G(e,n){return document.querySelector(`[data-col="${e}"][data-row="${n}"]`).classList.contains("ship-in-space")}function M(e){let n=!1;const t=p(),r=parseInt(e.dataset.row),i=parseInt(e.dataset.col);if(console.log(c()),console.log(o),"horizontal"===c()&&!o||"vertical"===c()&&E(e)){for(let e=i+1;e<i+t;e++)if(e>9||G(e,r)){n=!0;break}}else if("vertical"===c()&&!o||"horizontal"==c()&&E(e))for(let e=r+1;e<r+t;e++)if(e>9||G(i,e)){n=!0;break}return n}function P(e){document.querySelector(".initial-grid").querySelectorAll(`.${e}`).forEach((n=>{n.classList.remove(e),n.classList.remove("ship-in-space")}))}function z(){console.log(`remove current ship from grid: ${d()}`),P(d())}function N(){let e=!0;for(let n in s)!1===s[n].isPlaced&&(e=!1);e&&function(){const e=document.querySelector(".start-button");e.style.display="block",console.log(e)}()}function $(e){return e.hasShip||e.wasGuessed?e.hasShip&&!e.wasGuessed?"o":!e.hasShip&&e.wasGuessed?"m":e.hasShip&&e.wasGuessed?"X":void 0:"."}function T(){!function(e){let n=document.querySelector(".gameboard-container.right");e.grid.map(((e,t)=>{let o=g("div",null,n,"row");e.map((e=>{g("div",$(e),o,"column")}))}))}(e.getPlayerGameboard()),function(e){let n=document.querySelector(".gameboard-container.left");e.grid.map(((e,t)=>{let o=g("div",null,n,"row");e.map(((e,n)=>{let r=g("div",$(e),o,"column",function(e){return e.hasShip||e.wasGuessed?e.hasShip&&!e.wasGuessed?"clickable":!e.hasShip&&e.wasGuessed||e.hasShip&&e.wasGuessed?"unclickable":void 0:"clickable"}(e));r.dataset.col=n,r.dataset.row=t}))}))}(e.getComputerGameboard())}function W(){document.querySelectorAll(".gameboard-container").forEach((e=>e.textContent=""))}f.addEventListener("mouseover",(e=>{e.target.classList.contains("pregame-space")&&(y(),n&&x(e.target),a(e.target.classList,(function(e){document.querySelector(`.${e}.ship-head`).classList.add("ship-head-hover")})))})),f.addEventListener("mouseover",(e=>{e.target.classList.contains("ship-head")&&o&&function(e){const n=p();let t=!1;const o=parseInt(e.dataset.col),r=parseInt(e.dataset.row);if("horizontal"===c()){for(let e=r+1;e<r+n;e++)(e>9||G(o,e))&&(t=!0);if(t)for(let e=r;e<r+n&&!(e>9);e++)B(o,e);if(!t)for(let e=r;e<r+n;e++)k(o,e)}else if("vertical"===c()){for(let e=o+1;e<o+n;e++)(e>9||G(e,r))&&(t=!0);if(t)for(let e=o;e<o+n&&!(e>9);e++)B(e,r);if(!t)for(let e=o;e<o+n;e++)k(e,r)}}(e.target)})),document.querySelector(".initial-grid").addEventListener("mouseleave",(()=>{y()})),f.addEventListener("click",(e=>{if(e.target.classList.contains("ship-head")){function l(e){e.querySelector("i")&&e.removeChild(e.querySelector("i"));const n=document.querySelector("#icon-template").content.cloneNode(!0);e.appendChild(n.children[0])}if(o){if(o){if(M(e.target))return;z(),L(),q(),O(e.target),y(),console.log(c()),s[n].orientation="horizontal"===s[n].orientation?"vertical":"horizontal",console.log(c()),h(),r(),i(),console.log("ship head CLICKED and disable rotate mode and reset current ship")}}else console.log("ship head CLICKED and in NOW in rotate mode"),o=!0,t=!0,A(e.target),a(e.target.classList,(function(e){document.querySelector(".initial-grid").querySelectorAll(`.${e}`).forEach((e=>{e.classList.add("selected-ship-on-grid")}))})),l(e.target),x(e.target)}})),f.addEventListener("click",(e=>{if(n&&e.target.classList.contains("pregame-space")){if(M(e.target))return;t?(console.log("ship is MOVING"),E(e.target)?E(e.target)&&console.log("ship head was clicked"):(console.log("ship head NOT clicked, ship is moving"),document.querySelector(`.ship-head.${d()}`).classList.remove("ship-head"),q(),L(),z(),i(),r(),O(e.target),y(),w(e.target),l(),h(),N())):(console.log("ship NOT moving, placing for the first time"),document.querySelector(".selected-ship-off-grid").classList.add("grey-out"),I(),O(e.target),y(),w(e.target),l(),h(),N())}})),f.addEventListener("click",(e=>{let n=e.target.classList;n.contains("ship")&&(n.contains("grey-out")&&a(e.target.classList,P),I(),y(),n.add("selected-ship-off-grid"),A(e.target))})),f.addEventListener("click",(n=>{n.target.classList.contains("start-button")&&(console.log("927"),document.querySelectorAll(".ship-head").forEach((n=>{let[t,o]=a(n.classList,(e=>[s[e].length,s[e].orientation]));e.getPlayerGameboard().placeShip(t,o,[parseInt(n.dataset.col),parseInt(n.dataset.row)])})),document.querySelector(".popup").style.display="none",T())})),function(){let e=document.querySelector(".initial-grid");for(let n=0;n<10;n++){let t=g("div",null,e,"row");for(let e=0;e<10;e++){let o=g("div","",t,"column","pregame-space");o.dataset.row=n,o.dataset.col=e}}}(),f.addEventListener("click",(n=>{if(n.target.classList.contains("clickable")){const t=n.target.dataset;e.playRound([parseInt(t.col),parseInt(t.row)]),W(),T(),e.getIsGameOver()?document.querySelectorAll(".clickable").forEach((e=>{e.classList.remove("clickable"),e.classList.add("unclickable")})):(console.log("b"),e.playRound(),W(),T())}}))}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,