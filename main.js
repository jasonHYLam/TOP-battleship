(()=>{"use strict";class s{constructor(s){this.length=s,this.hits=0,this.sunk=!1}setSunk(){this.sunk=!0}hit(){this.hits++}isSunk(){this.length===this.hits&&this.setSunk()}}class t{constructor(){this.hasShip=!1,this.wasGuessed=!1,this.missedHit=!1,this.ship=null}}class i{constructor(){this.grid=function(){let s=[];for(let i=0;i<10;i++){let i=[];for(let s=0;s<10;s++){const s=new t;i.push(s)}s.push(i)}return s}(),this.allShipCoords=[],this.guessedCoords=[]}isOutOfBounds(s,t){return s>9||t>9}checkIfAlreadyPlaced(s,t){return!0===this.grid[t][s].hasShip}populateShipCoordsArray(s,t){this.allShipCoords.push([s,t])}placeShip(t,i,[e,r]){if(this.isOutOfBounds(e,r))return"out of bounds";let h=function(t){if(!(t<1||t>4))return new s(t)}(t);if(h)switch(i){case"horizontal":for(let s=0;s<t;s++){if(this.isOutOfBounds(9-r,e+s))return"out of bounds";if(this.checkIfAlreadyPlaced(9-r,e+s))return"position already occupied"}for(let s=0;s<t;s++)this.grid[9-r][e+s].hasShip=!0,this.grid[9-r][e+s].ship=h,this.populateShipCoordsArray(e+s,r);break;case"vertical":for(let s=0;s<t;s++){if(this.isOutOfBounds(9-r+s,e))return"out of bounds";if(this.checkIfAlreadyPlaced(9-r+s,e))return"position already occupied"}for(let s=0;s<t;s++)this.grid[9-r+s][e].hasShip=!0,this.grid[9-r+s][e].ship=h,this.populateShipCoordsArray(e,r+s)}}placeAllShipsOnBoard(){this.placeShip(5,["horizontal","vertical"].Math.round(Math.random()),[Math.floor(10*Math.random()),Math.floor(10*Math.random())])}getPosition(s,t){return this.grid[t][s]}checkShipExists(s,t){return this.grid[t][s].hasShip}getShip(s,t){return this.grid[t][s].ship}checkMissedHit(s,t){return this.grid[t][s].missedHit}checkWasGuessed(s,t){return this.grid[t][s].wasGuessed}checkIsGameOver(){let s=this.allShipCoords.map((s=>JSON.stringify(s))),t=this.guessedCoords.map((s=>JSON.stringify(s)));return s.every((s=>t.includes(s)))}receiveAttack(s,t){if(this.checkWasGuessed(s,t))return"already attacked";this.getPosition(s,t).wasGuessed=!0,this.guessedCoords.push([s,t]),this.checkShipExists(s,t)?(this.getShip(s,t).hit(),this.getShip(s,t).isSunk()):this.getPosition(s,t).missedHit=!0}}class e{constructor(s){}attack(s,[t,i]){s.receiveAttack(t,i)}tryAttackUntilSuccess(s,[t,i]){let e,r=JSON.stringify(s.guessedCoords);for(;r!==e;)this.attack(s,[t,i]),e=JSON.stringify(s.guessedCoords)}}class r extends e{constructor(){super()}randomAttack(s){const t=Math.floor(10*Math.random()),i=Math.floor(10*Math.random());s.checkWasGuessed(t,i)||this.attack(s,[t,i])}}(function(){let s=new i,t=new i;const h=new e,o=new r;let a=h,c=t,n=!1;function u(s){s.checkIsGameOver()&&(n=!0)}function l(s){s.grid.map((s=>{console.log(s.map((s=>!1===s.hasShip&&!1===s.wasGuessed?"_":!1===s.hasShip&&!0===s.wasGuessed?"m":!0===s.hasShip&&!1===s.wasGuessed?"o":!0===s.hasShip&&!0===s.wasGuessed?"x":void 0)))}))}function d(){switch(a){case h:console.log("player"),l(c),u(c),swapPlayer();break;case o:console.log("computer"),l(),u(c),swapPlayer()}}return s.placeShip(5,"vertical",[9,3]),s.placeShip(4,"horizontal",[0,8]),s.placeShip(3,"vertical",[5,6]),s.placeShip(3,"horizontal",[2,3]),s.placeShip(2,"vertical",[1,2]),t.placeShip(4,"horizontal",[5,9]),{tryAttackUntilSuccess:function(s,t){let i,e=JSON.stringify(c.guessedCoords);switch(a){case h:for(;e===i;)a.attack(c,[s,t]),i=JSON.stringify(c.guessedCoords);break;case h:for(;e!==i;)a.randomAttack(c),i=JSON.stringify(c.guessedCoords)}},playGame:function(){for(;!n;)d()}}})().playGame()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QXJCbUUsRUFBTWxFLFdBQTRCLFNBQWhFLElBR0wsR0FNWixDQTBCQSxTQUFTbUUsSUFFTCxPQUFRUCxHQUNKLEtBQUtELEVBQ0RLLFFBQVFDLElBQUksVUFXWkYsRUFBbUJGLEdBQ25CM0IsRUFBZ0IyQixHQUNoQk8sYUFDQSxNQUVKLEtBQUt0QixFQUNEa0IsUUFBUUMsSUFBSSxZQUNaRixJQUVBN0IsRUFBZ0IyQixHQUNoQk8sYUFHUixDQVFBLE9BM0dKWCxFQUFnQnZDLFVBQVUsRUFBRyxXQUFZLENBQUMsRUFBRSxJQUM1Q3VDLEVBQWdCdkMsVUFBVSxFQUFHLGFBQWMsQ0FBQyxFQUFFLElBQzlDdUMsRUFBZ0J2QyxVQUFVLEVBQUcsV0FBWSxDQUFDLEVBQUUsSUFDNUN1QyxFQUFnQnZDLFVBQVUsRUFBRyxhQUFjLENBQUMsRUFBRSxJQUM5Q3VDLEVBQWdCdkMsVUFBVSxFQUFHLFdBQVksQ0FBQyxFQUFFLElBSzVDd0MsRUFBa0J4QyxVQUFVLEVBQUcsYUFBYyxDQUFDLEVBQUUsSUFrR3JDLENBQ0grQixzQkEzRFIsU0FBK0JsQyxFQUFLUixHQUNoQyxJQUNJMkMsRUFEQUMsRUFBaUJiLEtBQUtDLFVBQVVzQixFQUFlaEQsZUFHbkQsT0FBUStDLEdBQ0osS0FBS0QsRUFDRCxLQUFPUixJQUFtQkQsR0FDdEJVLEVBQWNiLE9BQU9jLEVBQWdCLENBQUM5QyxFQUFLUixJQUMzQzJDLEVBQWlCWixLQUFLQyxVQUFVc0IsRUFBZWhELGVBRW5ELE1BRUosS0FBSzhDLEVBQ0QsS0FBT1IsSUFBbUJELEdBQ3RCVSxFQUFjTixhQUFhTyxHQUMzQlgsRUFBaUJaLEtBQUtDLFVBQVVzQixFQUFlaEQsZUFJL0QsRUF5Q1F3RCxTQVJSLFdBQ0ksTUFBUVAsR0FDSkssR0FHUixFQUtKLEVDbElBRyxHQUFxQkQsVSIsInNvdXJjZXMiOlsid2VicGFjazovL3RvcC1iYXR0bGVzaGlwLy4vc3JjL3NoaXAuanMiLCJ3ZWJwYWNrOi8vdG9wLWJhdHRsZXNoaXAvLi9zcmMvZ2FtZWJvYXJkLmpzIiwid2VicGFjazovL3RvcC1iYXR0bGVzaGlwLy4vc3JjL3BsYXllci5qcyIsIndlYnBhY2s6Ly90b3AtYmF0dGxlc2hpcC8uL3NyYy9nYW1lQ29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly90b3AtYmF0dGxlc2hpcC8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbmNsYXNzIFNoaXAge1xuICAgIC8vIGkgbmVlZCB0byBtYWtlIHN1cmUgbGVuZ3RoIGlzIGJldHdlZW4gMSBhbmQgNFxuICAgIGNvbnN0cnVjdG9yKGxlbmd0aCkge1xuICAgICAgICB0aGlzLmxlbmd0aCA9IGxlbmd0aDtcbiAgICAgICAgdGhpcy5oaXRzID0gMDtcbiAgICAgICAgdGhpcy5zdW5rID0gZmFsc2U7XG4gICAgfVxuXG4gICAgc2V0U3VuaygpIHtcbiAgICAgICAgdGhpcy5zdW5rID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBoaXQoKSB7XG4gICAgICAgIHRoaXMuaGl0cyArK1xuICAgIH1cblxuICAgIGlzU3VuaygpIHtcbiAgICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSB0aGlzLmhpdHMpIHRoaXMuc2V0U3VuaygpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaW5pdGlhbGlzZVNoaXAobGVuZ3RoKSB7XG4gICAgaWYgKGxlbmd0aCA8IDEgfHwgbGVuZ3RoID4gNCkgcmV0dXJuIFxuICAgIHJldHVybiBuZXcgU2hpcChsZW5ndGgpXG59XG5cblxuZXhwb3J0IHtpbml0aWFsaXNlU2hpcCwgU2hpcH0iLCJpbXBvcnQgeyBTaGlwLCBpbml0aWFsaXNlU2hpcCB9IGZyb20gXCIuL3NoaXBcIjtcblxuY2xhc3MgU3BhY2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmhhc1NoaXAgPSBmYWxzZTtcbiAgICAgICAgdGhpcy53YXNHdWVzc2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMubWlzc2VkSGl0ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc2hpcCA9IG51bGw7XG4gICAgfVxufVxuXG4vLyBub3Qgc3VyZSB3aGVyZSB0byBwdXQgdGhpcyBidXQgbmVlZCB0byBiZSBjYXJlZnVsIGFib3V0IG9yZGluYXRlIG9yZGVyOyBjb2wscm93IHZzIHJvdywgY29sXG4vLyB1c2UgY29sLHJvdyBmb3IgbWV0aG9kIGFyZ3VtZW50cyBhbmQgcHVzaGluZyBpbnRvIHZhcmlhYmxlcyBsaWtlIGd1ZXNzZWRDb29yZHNcbi8vIHVzZSByb3csIGNvbCBmb3IgZ2FtZWJvYXJkIGxvZ2ljXG5jbGFzcyBHYW1lYm9hcmQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBmdW5jdGlvbiBjcmVhdGVHcmlkKCkge1xuICAgICAgICAgICAgbGV0IG5ld0dyaWQgPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpPDEwOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgcm93ID0gW107XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGo8MTA7IGorKykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzcXVhcmUgPSBuZXcgU3BhY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgcm93LnB1c2goc3F1YXJlKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBuZXdHcmlkLnB1c2gocm93KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ld0dyaWRcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmdyaWQgPSBjcmVhdGVHcmlkKCk7XG4gICAgICAgIHRoaXMuYWxsU2hpcENvb3JkcyA9IFtdO1xuICAgICAgICB0aGlzLmd1ZXNzZWRDb29yZHMgPSBbXTtcbiAgICB9XG5cbiAgICBpc091dE9mQm91bmRzKGNvbCwgcm93KSB7XG4gICAgICAgIGlmIChjb2wgPiA5IHx8IHJvdyA+IDkpIHJldHVybiB0cnVlO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY2hlY2tJZkFscmVhZHlQbGFjZWQoY29sLCByb3cpIHtcbiAgICAgICAgaWYgKHRoaXMuZ3JpZFtyb3ddW2NvbF0uaGFzU2hpcCA9PT0gdHJ1ZSkgcmV0dXJuIHRydWU7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBwb3B1bGF0ZVNoaXBDb29yZHNBcnJheShjb2wsIHJvdykge1xuICAgICAgICB0aGlzLmFsbFNoaXBDb29yZHMucHVzaChbY29sLCByb3ddKVxuICAgIH1cblxuICAgIHBsYWNlU2hpcChsZW5ndGgsIG9yaWVudGF0aW9uLCBbc3RhcnRDb2wsIHN0YXJ0Um93XSkge1xuXG4gICAgICAgIC8vIHRlc3QgaWYgc3RhcnQgY29vcmQgaXMgb3V0IG9mIGJvdW5kc1xuICAgICAgICBpZiAodGhpcy5pc091dE9mQm91bmRzKHN0YXJ0Q29sLCBzdGFydFJvdykpIHJldHVybiAnb3V0IG9mIGJvdW5kcyc7XG5cbiAgICAgICAgbGV0IG5ld1NoaXAgPSBpbml0aWFsaXNlU2hpcChsZW5ndGgpO1xuICAgICAgICBpZiAoIW5ld1NoaXApIHJldHVybjtcblxuICAgICAgICBzd2l0Y2gob3JpZW50YXRpb24pIHtcbiAgICAgICAgICAgIC8vIGlmIG9yaWVudGF0aW9uIGlzIGhvcml6b250YWxcbiAgICAgICAgICAgIC8vIHN0dWZmIGhhcHBlbnMgZnJvbSBsZWZ0IHRvIHJpZ2h0XG4gICAgICAgICAgICBjYXNlICdob3Jpem9udGFsJzpcbiAgICAgICAgICAgICAgICAvL2xvb3AgZm9yIGxlbmd0aCBhbmQgY2hlY2sgaWYgb3V0IG9mIGJvdW5kcyBvciBhbHJlYWR5IG9jY3VwaWVkOyBpZiBzbyBjYW5jZWwgZXhlY3V0aW9uXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGk8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzT3V0T2ZCb3VuZHMoOSAtIHN0YXJ0Um93LCBzdGFydENvbCArIGkpKSByZXR1cm4gJ291dCBvZiBib3VuZHMnO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jaGVja0lmQWxyZWFkeVBsYWNlZCg5IC0gc3RhcnRSb3csIHN0YXJ0Q29sICsgaSkpIHJldHVybiAncG9zaXRpb24gYWxyZWFkeSBvY2N1cGllZCc7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gZWxzZSwgbG9vcCBhbG9uZyB0aGUgcm93IChvY2N1cHkgY29sdW1ucyBvZiB0aGUgc2FtZSByb3cpXG4gICAgICAgICAgICAgICAgLy8gYXQgZWFjaCBncmlkIHNxdWFyZSwgb2NjdXB5IHdpdGggc2hpcCBJRFxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgIHRoaXMuZ3JpZFs5IC0gc3RhcnRSb3ddW3N0YXJ0Q29sICsgaV0uaGFzU2hpcCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgLy8gdGhpcyBtYXkgYmUgbm90IGdvb2RcbiAgICAgICAgICAgICAgICAgICB0aGlzLmdyaWRbOSAtIHN0YXJ0Um93XVtzdGFydENvbCArIGldLnNoaXAgPSBuZXdTaGlwO1xuXG4gICAgICAgICAgICAgICAgICAgLy8gbWF5IGJlIGFuIGVycm9yIGluIHRoZSBjb2wgYW5kIHJvdyBhcmd1bWVudCBvcmRlclxuICAgICAgICAgICAgICAgICAgIC8vbm90IHVuZGVyc3RhbmQuLi5cbiAgICAgICAgICAgICAgICAgICAvLyBjaGFuZ2UgdGhpcyBmcm9tIHNwYWNlcywgdG8gY29vcmRpbmF0ZXMsIGN1cyBpIGRvbid0IHdhbnQgYSBjb3B5IG9mIG9iamVjdHNcbiAgICAgICAgICAgICAgICAgICB0aGlzLnBvcHVsYXRlU2hpcENvb3Jkc0FycmF5KHN0YXJ0Q29sICsgaSwgc3RhcnRSb3cpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgICAgIC8vIGlmIG9yaWVudGF0aW9uIGlzIHZlcnRpY2FsXG4gICAgICAgICAgICAvLyBzaGlwIGlzIGNyZWF0ZWQgZnJvbSBib3R0b20gdG8gdG9wXG4gICAgICAgICAgICAvLyByb3dbMF0gaXMgYm90dG9tLCByb3dbOV0gdG8gdG9wLCBkdWUgdG8gdGhlIGA5IC0gYFxuICAgICAgICAgICAgY2FzZSAndmVydGljYWwnOlxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pc091dE9mQm91bmRzKDkgLSBzdGFydFJvdyArIGksIHN0YXJ0Q29sKSkgcmV0dXJuICdvdXQgb2YgYm91bmRzJ1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jaGVja0lmQWxyZWFkeVBsYWNlZCg5IC0gc3RhcnRSb3cgKyBpLCBzdGFydENvbCkpIHJldHVybiAncG9zaXRpb24gYWxyZWFkeSBvY2N1cGllZCdcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBhbmQgdGhlbiBwdXQgc3R1ZmYgYWxvbmcgdGhlIGNvbHVtbiAob2NjdXB5IHJvd3Mgb2YgdGhlIHNhbWUgY29sdW1uKVxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdyaWRbOSAtIHN0YXJ0Um93ICsgaV1bc3RhcnRDb2xdLmhhc1NoaXAgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdyaWRbOSAtIHN0YXJ0Um93ICsgaV1bc3RhcnRDb2xdLnNoaXAgPSBuZXdTaGlwO1xuXG4gICAgICAgICAgICAgICAgICAgLy8gbWF5IGJlIGFuIGVycm9yIGluIHRoZSBjb2wgYW5kIHJvdyBhcmd1bWVudCBvcmRlclxuICAgICAgICAgICAgICAgICAgIC8vIGNoYW5nZSB0aGlzIGZyb20gc3BhY2VzLCB0byBjb29yZGluYXRlcywgY3VzIGkgZG9uJ3Qgd2FudCBhIGNvcHkgb2Ygb2JqZWN0c1xuICAgICAgICAgICAgICAgICAgIHRoaXMucG9wdWxhdGVTaGlwQ29vcmRzQXJyYXkoc3RhcnRDb2wsIHN0YXJ0Um93ICsgaSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIHdoYXQgZG8gaSBwbGFjZSBvbiB0aGUgYm9hcmQ/XG4gICAgLy8gNSBwaWVjZXMgaSB0aGlua1xuICAgIC8vIGhtbSBob3cgZG8gaSBrZWVwIHRyeWluZyB0byBwbGFjZSB0aGUgc2hpcHMgaWYgdGhleSBhcmUgb3V0IG9mIGJvdW5kcyBvciBhbHJlYWR5IHBhbGNlZD9cbiAgICAvLyBzaG91bGQgaSBqdXN0IHB1dCBlYWNoIGluIGEgd2hpbGUgbG9vcD8gb3IgdXNlIHJlY3Vyc2lvbj9cblxuICAgIHBsYWNlQWxsU2hpcHNPbkJvYXJkKCkge1xuICAgICAgICAvLyBuZWVkIHRvIHB1dCBzaGlwcyBob3Jpem9udGFsbHkgb3IgdmVydGljYWxseSByYW5kb21seVxuICAgICAgICAvLyB0aGlzIHdpbGwgb25seSBnZW5lcmF0ZSBvbmUgb3JpZW50YXRpb24uLi4gbWFrZSBpdCBhIHNlcGFyYXRlIGZ1bmN0aW9uXG4gICAgICAgIGZ1bmN0aW9uIGdlbmVyYXRlUmFuZG9tT3JpZW50YXRpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gWydob3Jpem9udGFsJywgJ3ZlcnRpY2FsJ10uTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpKVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2VuZXJhdGVSYW5kb21Db29yZGluYXRlcygpIHtcbiAgICAgICAgICAgIGNvbnN0IHJhbmRvbUNvbCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKVxuICAgICAgICAgICAgY29uc3QgcmFuZG9tUm93ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApXG4gICAgICAgICAgICByZXR1cm4gW3JhbmRvbUNvbCwgcmFuZG9tUm93XVxuICAgICAgICB9XG5cblxuICAgICAgICAvL2hvdyBkbyBpIHByZXZlbnQgZmFpbHVyZSB0byBwbGFjZSBhIHNoaXA/IGlzIGl0IFxuICAgICAgICAvLyB0aGVyZSBhcmUgc2V2ZXJhbCBvcHRpb25zLi4uIFxuICAgICAgICAvLyB3aGlsZSAoKSB7fVxuICAgICAgICB0aGlzLnBsYWNlU2hpcCg1LCBnZW5lcmF0ZVJhbmRvbU9yaWVudGF0aW9uKCksIGdlbmVyYXRlUmFuZG9tQ29vcmRpbmF0ZXMoKSlcblxuICAgIH1cblxuICAgIGdldFBvc2l0aW9uKGNvbCwgcm93KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdyaWRbcm93XVtjb2xdXG4gICAgfVxuXG4gICAgY2hlY2tTaGlwRXhpc3RzKGNvbCwgcm93KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdyaWRbcm93XVtjb2xdLmhhc1NoaXBcbiAgICB9XG5cblxuICAgIGdldFNoaXAoY29sLCByb3cpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ3JpZFtyb3ddW2NvbF0uc2hpcFxuICAgIH1cblxuICAgIGNoZWNrTWlzc2VkSGl0KGNvbCwgcm93KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdyaWRbcm93XVtjb2xdLm1pc3NlZEhpdFxuICAgIH1cblxuICAgIGNoZWNrV2FzR3Vlc3NlZChjb2wsIHJvdykge1xuICAgICAgICByZXR1cm4gdGhpcy5ncmlkW3Jvd11bY29sXS53YXNHdWVzc2VkXG4gICAgfVxuXG4gICAgLy8gY29tcGFyZSBzdHJpbmdpZmllZCBzaGlwIGNvb3JkcyB0byB0aGUgZ3Vlc3NlZCBjb29yZHMsIGFuZCByZXR1cm4gdHJ1ZSBpZiBhbGwgc2hpcCBjb29yZHMgYXJlIGd1ZXNzZWQuXG4gICAgY2hlY2tJc0dhbWVPdmVyKCkge1xuICAgICAgICBsZXQgY29udmVydGVkQWxsU2hpcENvb3JkcyA9IHRoaXMuYWxsU2hpcENvb3Jkcy5tYXAoY29vcmQgPT4gSlNPTi5zdHJpbmdpZnkoY29vcmQpKVxuICAgICAgICBsZXQgY29udmVydGVkR3Vlc3NlZENvb3JkcyA9IHRoaXMuZ3Vlc3NlZENvb3Jkcy5tYXAoY29vcmQgPT4gSlNPTi5zdHJpbmdpZnkoY29vcmQpKVxuICAgICAgICAvLyBpZiAoY29udmVydGVkQWxsU2hpcENvb3Jkcy5ldmVyeShzaGlwQ29vcmQgPT4gY29udmVydGVkR3Vlc3NlZENvb3Jkcy5pbmNsdWRlcyhzaGlwQ29vcmQpKSkge1xuICAgICAgICAvLyAgICAgdGhpcy5pc0dhbWVPdmVyID0gdHJ1ZTtcbiAgICAgICAgLy8gfVxuICAgICAgICByZXR1cm4gY29udmVydGVkQWxsU2hpcENvb3Jkcy5ldmVyeShzaGlwQ29vcmQgPT4gY29udmVydGVkR3Vlc3NlZENvb3Jkcy5pbmNsdWRlcyhzaGlwQ29vcmQpKVxuICAgIH1cblxuICAgIHJlY2VpdmVBdHRhY2soY29sLCByb3cpIHtcbiAgICAgICAgLy8gZmlyc3QsIGNoZWNrIGlmIHBvc2l0aW9uIGlzIGFscmVhZHkgZ3Vlc3NlZFxuICAgICAgICBpZiAodGhpcy5jaGVja1dhc0d1ZXNzZWQoY29sLCByb3cpKSByZXR1cm4gJ2FscmVhZHkgYXR0YWNrZWQnO1xuICAgICAgICAvLyBpZiBub3QgZ3Vlc3NlZCwgdGhlbiBtYXJrIGFzIGd1ZXNzZWRcbiAgICAgICAgdGhpcy5nZXRQb3NpdGlvbihjb2wsIHJvdykud2FzR3Vlc3NlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuZ3Vlc3NlZENvb3Jkcy5wdXNoKFtjb2wsIHJvd10pXG5cbiAgICAgICAgLy8gaWYgbm90LCBjaGVjayBpZiB0aGVyZSBpcyBhIHNoaXAgdGhlcmVcbiAgICAgICAgaWYgKHRoaXMuY2hlY2tTaGlwRXhpc3RzKGNvbCwgcm93KSkge1xuICAgICAgICAgICAgLy8gaWYgdGhlcmUgaXMsIHRoZW4gaWRlbnRpZnkgdGhlIHNoaXBcbiAgICAgICAgICAgIC8vIHRoZW4gaGl0IHRoZSBzaGlwXG4gICAgICAgICAgICB0aGlzLmdldFNoaXAoY29sLCByb3cpLmhpdCgpXG4gICAgICAgICAgICAvLyB0aGVuIGNoZWNrIGlmIHNoaXAgaXMgc3Vua1xuICAgICAgICAgICAgdGhpcy5nZXRTaGlwKGNvbCwgcm93KS5pc1N1bmsoKTtcblxuICAgICAgICAgICAgLy8gdGhlbiBjaGVjayBpZiBhbGwgc2hpcHMgYXJlIGhpdCwgYnkgY29tcGFyaW5nIGFsbFNoaXBDb29yZHMgYW5kIGd1ZXNzZWRDb29yZHMgYXJyYXlzIFxuICAgICAgICAgICAgLy8gdGhpcy5jaGVja0lzR2FtZU92ZXIoKTtcblxuICAgICAgICB9XG4gICAgICAgIC8vIGlmIHRoZXJlIGlzbid0IGEgc2hpcCwgdGhlbiBtYXJrIHRoZSBwbGFjZSB3aXRoIG1pc3NlZEhpdFxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZ2V0UG9zaXRpb24oY29sLCByb3cpLm1pc3NlZEhpdCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBcbn1cbmV4cG9ydCB7R2FtZWJvYXJkfSIsImV4cG9ydCBjbGFzcyBQbGF5ZXIge1xuICAgIGNvbnN0cnVjdG9yKGNvbXB1dGVyKSB7XG4gICAgfVxuXG4gICAgLy8gaG1tIGlzIHRoaXMgb2theT8gZG8gaSBuZWVkIHRvIGltcG9ydCBnYW1lYm9hcmQ/IHN1cmVseSBub3QuLi4gdGhhdCB3b3VsZCBiZSBhd2Z1bFxuICAgIC8vIGkganVzdCBjYWxsZWQgdGhlIHJlY2VpdmVBdHRhY2sgbWV0aG9kIG9uIHRoZSBnYW1lYm9hcmQgYXJndW1lbnQuLi4gaXMgdGhpcyBhIGJhZCB0aGluZz9cbiAgICBhdHRhY2soZ2FtZWJvYXJkLCBbY29sLCByb3ddKSB7XG4gICAgICAgIGdhbWVib2FyZC5yZWNlaXZlQXR0YWNrKGNvbCwgcm93KVxuICAgIH1cblxuICAgIC8vIGFjdHVhbGx5IHRoaXMgY2FuJ3QgYmUgaW4gaGVyZS4uLiBjdXMgdGhlIGNvbCBhbmQgcm93IGRvbid0IGNoYW5nZS4uLiB0aGV5IGdvdHRhIGNoYW5nZVxuICAgIHRyeUF0dGFja1VudGlsU3VjY2VzcyhnYW1lYm9hcmQsIFtjb2wsIHJvd10pIHtcbiAgICAgICAgbGV0IGluaXRpYWxHdWVzc2VzID0gSlNPTi5zdHJpbmdpZnkoZ2FtZWJvYXJkLmd1ZXNzZWRDb29yZHMpXG4gICAgICAgIGxldCBjdXJyZW50R3Vlc3NlcztcbiAgICAgICAgd2hpbGUgKGluaXRpYWxHdWVzc2VzICE9PSBjdXJyZW50R3Vlc3Nlcykge1xuICAgICAgICAgICAgdGhpcy5hdHRhY2soZ2FtZWJvYXJkLCBbY29sLCByb3ddKVxuICAgICAgICAgICAgY3VycmVudEd1ZXNzZXMgPSBKU09OLnN0cmluZ2lmeShnYW1lYm9hcmQuZ3Vlc3NlZENvb3JkcylcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLy8gYWhoaCBkb24ndCB0aGluayB0aGlzIHdvcmtzLCwsIGdvdHRhIHVzZSBzdXBlcj9cbmV4cG9ydCBjbGFzcyBDb21wdXRlciBleHRlbmRzIFBsYXllciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKClcbiAgICB9XG5cbiAgICByYW5kb21BdHRhY2soZ2FtZWJvYXJkKSB7XG4gICAgICAgIC8vIHRha2UgcmFuZG9tIG51bWJlcnMgZm9yIGNvbHVtbiBhbmQgcm93XG4gICAgICAgIGNvbnN0IHJhbmRvbUNvbCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKVxuICAgICAgICBjb25zdCByYW5kb21Sb3cgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMClcblxuICAgICAgICAvL3RoZW4gY2hlY2sgaWYgaGFzIGJlZW4gYXR0YWNrZWQsXG4gICAgICAgIGlmKGdhbWVib2FyZC5jaGVja1dhc0d1ZXNzZWQocmFuZG9tQ29sLCByYW5kb21Sb3cpKSByZXR1cm5cblxuICAgICAgICAvL3RoZW4gY2FsbCBhdHRhY2tcbiAgICAgICAgdGhpcy5hdHRhY2soZ2FtZWJvYXJkLCBbcmFuZG9tQ29sLCByYW5kb21Sb3ddKVxuICAgIH1cbn0iLCJpbXBvcnQgeyBHYW1lYm9hcmQgfSBmcm9tIFwiLi9nYW1lYm9hcmRcIjtcbmltcG9ydCB7IFBsYXllciwgQ29tcHV0ZXIgfSBmcm9tIFwiLi9wbGF5ZXJcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VHYW1lQ29udHJvbGxlcigpIHtcbiAgICAvLyBhdCBzb21lIHBvaW50LCB3aWxsIG5lZWQgdG8gZGV2ZWxvcCBmdW5jdGlvbiB0byBwbGFjZUFsbFNoaXBzLCB3aGljaCBcbiAgICAvLyBuZWVkcyB0byBnZXQgYXJvdW5kIHRoZSBwcm9ibGVtIG9mIGxvb3BpbmcgcGxhY2VTaGlwIHVudGlsIGl0IGlzIGFjdHVhbGx5IHBsYWNlZFxuXG4gICAgLy8gZG8gaSB1c2UgXG4gICAgbGV0IHBsYXllckdhbWVib2FyZCA9IG5ldyBHYW1lYm9hcmQoKTtcbiAgICBsZXQgY29tcHV0ZXJHYW1lYm9hcmQgPSBuZXcgR2FtZWJvYXJkKCk7XG5cbiAgICBjb25zdCBwbGF5ZXIgPSBuZXcgUGxheWVyKCk7XG4gICAgY29uc3QgY29tcHV0ZXIgPSBuZXcgQ29tcHV0ZXIoKTtcblxuICAgIGxldCBjdXJyZW50UGxheWVyID0gcGxheWVyO1xuICAgIGxldCBlbmVteUdhbWVib2FyZCA9IGNvbXB1dGVyR2FtZWJvYXJkXG5cbiAgICBsZXQgaXNHYW1lT3ZlciA9IGZhbHNlO1xuXG4gICAgLy8gd2FpdCwgaXMgdGhpcyBtb2NraW5nPyBpdCBtYXkgYmUgd29ydGggYSByZWFkIGFnYWluLi4uXG5cbiAgICBwbGF5ZXJHYW1lYm9hcmQucGxhY2VTaGlwKDUsICd2ZXJ0aWNhbCcsIFs5LDNdKTtcbiAgICBwbGF5ZXJHYW1lYm9hcmQucGxhY2VTaGlwKDQsICdob3Jpem9udGFsJywgWzAsOF0pO1xuICAgIHBsYXllckdhbWVib2FyZC5wbGFjZVNoaXAoMywgJ3ZlcnRpY2FsJywgWzUsNl0pO1xuICAgIHBsYXllckdhbWVib2FyZC5wbGFjZVNoaXAoMywgJ2hvcml6b250YWwnLCBbMiwzXSk7XG4gICAgcGxheWVyR2FtZWJvYXJkLnBsYWNlU2hpcCgyLCAndmVydGljYWwnLCBbMSwyXSk7XG5cbiAgICAvLyBjb21wdXRlckdhbWVib2FyZC5wbGFjZVNoaXAoNSwgJ3ZlcnRpY2FsJywgWzksM10pO1xuICAgIC8vIGNvbXB1dGVyR2FtZWJvYXJkLnBsYWNlU2hpcCg1LCAnaG9yaXpvbnRhbCcsIFswLDBdKTtcbiAgICAvLyBjb21wdXRlckdhbWVib2FyZC5wbGFjZVNoaXAoNCwgJ3ZlcnRpY2FsJywgWzUsOV0pO1xuICAgIGNvbXB1dGVyR2FtZWJvYXJkLnBsYWNlU2hpcCg0LCAnaG9yaXpvbnRhbCcsIFs1LDldKTtcbiAgICAvLyBjb21wdXRlckdhbWVib2FyZC5wbGFjZVNoaXAoMywgJ3ZlcnRpY2FsJywgWzUsNl0pO1xuICAgIC8vIGNvbXB1dGVyR2FtZWJvYXJkLnBsYWNlU2hpcCgzLCAnaG9yaXpvbnRhbCcsIFsyLDNdKTtcbiAgICAvLyBjb21wdXRlckdhbWVib2FyZC5wbGFjZVNoaXAoMiwgJ3ZlcnRpY2FsJywgWzEsMl0pO1xuXG4gICAgLy8gaSB3aWxsIG5lZWQgRE9NIGluIGFub3RoZXIgc2VwYXJhdGUgZmlsZVxuXG4gICAgLy8gd2lsbCBuZWVkIHRvIHRlc3QgZWFjaCBvZiB0aGVzZS4uLlxuICAgIGZ1bmN0aW9uIHN3YXBQbGF5ZXJBbmRFbmVteSgpIHtcbiAgICAgICAgY3VycmVudFBsYXllciA9PT0gcGxheWVyID8gY3VycmVudFBsYXllciA9IGNvbXB1dGVyIDogY3VycmVudFBsYXllciA9IHBsYXllcjtcbiAgICAgICAgZW5lbXlHYW1lYm9hcmQgPT09IHBsYXllckdhbWVib2FyZCA/IGVuZW15R2FtZWJvYXJkID0gY29tcHV0ZXJHYW1lYm9hcmQgOiBlbmVteUdhbWVib2FyZCA9IHBsYXllckdhbWVib2FyZDtcbiAgICB9XG5cbiAgICAvLyBpZiBnYW1lIGlzIG92ZXIsIHNldCB0aGUgaXNHYW1lT3ZlciB2YXJpYWJsZSB0byB0cnVlIHRvIGVuZCB0aGUgd2hpbGUgbG9vcC5cbiAgICBmdW5jdGlvbiBjaGVja0lzR2FtZU92ZXIoZ2FtZWJvYXJkKSB7XG4gICAgICAgIGlmIChnYW1lYm9hcmQuY2hlY2tJc0dhbWVPdmVyKCkpIGlzR2FtZU92ZXIgPSB0cnVlO1xuICAgIH1cbiAgICBcbiAgICBmdW5jdGlvbiB2aXN1YWxpc2VHYW1lYm9hcmQoZ2FtZWJvYXJkKSB7XG4gICAgICAgIC8vIGhvdyBkbyBpIGNvbnZlcnQgdGhlIGdhbWVib2FyZCB3aXRoIHRoZSBzcGFjZXMsIGludG8gYSBjb25zb2xlIGxvZz9cbiAgICAgICAgLy8gbWF5YmUgYSBkb3VibGUgbWFwXG4gICAgICAgIGdhbWVib2FyZC5ncmlkLm1hcChyb3cgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgICByb3cubWFwKHNwYWNlID0+IHtcbiAgICAgICAgICAgICAgICBpZihzcGFjZS5oYXNTaGlwID09PSBmYWxzZSAmJiBzcGFjZS53YXNHdWVzc2VkID09PSBmYWxzZSkgcmV0dXJuICdfJ1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNwYWNlLmhhc1NoaXAgPT09IGZhbHNlICYmIHNwYWNlLndhc0d1ZXNzZWQgPT09IHRydWUpIHJldHVybiAnbSdcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChzcGFjZS5oYXNTaGlwID09PSB0cnVlICYmIHNwYWNlLndhc0d1ZXNzZWQgPT09IGZhbHNlKSByZXR1cm4gJ28nXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc3BhY2UuaGFzU2hpcCA9PT0gdHJ1ZSAmJiBzcGFjZS53YXNHdWVzc2VkID09PSB0cnVlKSByZXR1cm4gJ3gnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICB9KVxuXG4gICAgICAgIC8vIGkgbmVlZCB0byBjb25zb2xlIGxvZyBlYWNoIHJvd1xuICAgICAgICBcblxuICAgIH1cblxuICAgIC8vIGNoZWNrIGlmIHRoZSBndWVzc2VkQ29vcmRzIGFycmF5IGNoYW5nZXM7IGlmIHNvLCB0aGUgYXR0YWNrIHdhcyBzdWNjZXNzZnVsLlxuICAgIC8vIHRoaXMgYWJzb2x1dGVseSBtdXN0IGdldCB0ZXN0ZWQuLi5cbiAgICBmdW5jdGlvbiB0cnlBdHRhY2tVbnRpbFN1Y2Nlc3MoY29sLCByb3cpIHtcbiAgICAgICAgbGV0IGluaXRpYWxHdWVzc2VzID0gSlNPTi5zdHJpbmdpZnkoZW5lbXlHYW1lYm9hcmQuZ3Vlc3NlZENvb3JkcylcbiAgICAgICAgbGV0IGN1cnJlbnRHdWVzc2VzO1xuXG4gICAgICAgIHN3aXRjaCAoY3VycmVudFBsYXllcikge1xuICAgICAgICAgICAgY2FzZSBwbGF5ZXI6XG4gICAgICAgICAgICAgICAgd2hpbGUgKGluaXRpYWxHdWVzc2VzID09PSBjdXJyZW50R3Vlc3Nlcykge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50UGxheWVyLmF0dGFjayhlbmVteUdhbWVib2FyZCwgW2NvbCwgcm93XSlcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudEd1ZXNzZXMgPSBKU09OLnN0cmluZ2lmeShlbmVteUdhbWVib2FyZC5ndWVzc2VkQ29vcmRzKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBwbGF5ZXI6XG4gICAgICAgICAgICAgICAgd2hpbGUgKGluaXRpYWxHdWVzc2VzICE9PSBjdXJyZW50R3Vlc3Nlcykge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50UGxheWVyLnJhbmRvbUF0dGFjayhlbmVteUdhbWVib2FyZClcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudEd1ZXNzZXMgPSBKU09OLnN0cmluZ2lmeShlbmVteUdhbWVib2FyZC5ndWVzc2VkQ29vcmRzKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBuZWVkIHdoaWxlIGxvb3AsIHdoaWxlIGdhbWUgaXNuJ3QgZmluaXNoZWRcbiAgICAvLyBuZWVkIHRvIHBsYXkgYSBtb3ZlLCBhbmQgc29tZWhvdyBhbHNvIGdldCBhcm91bmQgcHJvYmxlbSBvZiByZXR1cm5pbmcgaWYgaW52YWxpZCBtb3ZlXG4gICAgZnVuY3Rpb24gcGxheVJvdW5kKCkge1xuXG4gICAgICAgIHN3aXRjaCAoY3VycmVudFBsYXllcikge1xuICAgICAgICAgICAgY2FzZSBwbGF5ZXI6XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3BsYXllcicpXG4gICAgICAgICAgICAgICAgLy8gbGV0IFtjb2wsIHJvd10gPSBwcm9tcHQoJ2Nvb3JkcyB0byBhdHRhY2ssIGluIFwiW3gseV1cIicpLnNwbGl0KFwiLFwiKVxuXG4gICAgICAgICAgICAgICAgLy8gaG93IGRvIGkgbWFrZSBpdCBzbyB0aGF0IGlmIGFuIGludmFsaWQgbW92ZSBpcyBtYWRlLCB0cnkgYWdhaW4/XG4gICAgICAgICAgICAgICAgLy8gZG8gaSBpbXBsZW1lbnQgdGhhdCBoZXJlP1xuICAgICAgICAgICAgICAgIC8vIHRoZXJlIGFyZSB0aHJlZSBwbGFjZXMgaSBjb3VsZCBpbXBsZW1lbnQgaXQ7IHJlY2VpdmVBdHRhY2soKSwgYXR0YWNrKCksIG9yIHBsYXlSb3VuZCgpXG4gICAgICAgICAgICAgICAgLy8gaSBuZWVkIHRvIG1ha2UgdXNlIG9mIHNvbWV0aGluZz8gZWl0aGVyIHRoZSByZXR1cm4gc3RhdGVtZW50LCBvciB0aGUgZ2FtZWJvYXJkIGNoYW5naW5nPyBvciBtYXliZSB3YXNHdWVzc2VkIGNoYW5naW5nP1xuXG4gICAgICAgICAgICAgICAgLy8gY3VycmVudFBsYXllci5hdHRhY2soZW5lbXlHYW1lYm9hcmQsIFtjb2wsIHJvd10pXG4gICAgICAgICAgICAgICAgLy8gY3VycmVudFBsYXllci50cnlBdHRhY2tVbnRpbFN1Y2Nlc3MoZW5lbXlHYW1lYm9hcmQsIFtjb2wsIHJvd10pXG4gICAgICAgICAgICAgICAgLy8gbWF5YmUgcHJpbnQgdGhlIGJvYXJkLi4uP1xuICAgICAgICAgICAgICAgIHZpc3VhbGlzZUdhbWVib2FyZChlbmVteUdhbWVib2FyZCk7XG4gICAgICAgICAgICAgICAgY2hlY2tJc0dhbWVPdmVyKGVuZW15R2FtZWJvYXJkKTtcbiAgICAgICAgICAgICAgICBzd2FwUGxheWVyKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNhc2UgY29tcHV0ZXI6XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2NvbXB1dGVyJylcbiAgICAgICAgICAgICAgICB2aXN1YWxpc2VHYW1lYm9hcmQoKTtcbiAgICAgICAgICAgICAgICAvLyBjdXJyZW50UGxheWVyLnRyeUF0dGFja1VudGlsU3VjY2VzcyhlbmVteUdhbWVib2FyZCk7XG4gICAgICAgICAgICAgICAgY2hlY2tJc0dhbWVPdmVyKGVuZW15R2FtZWJvYXJkKTtcbiAgICAgICAgICAgICAgICBzd2FwUGxheWVyKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIGZ1bmN0aW9uIHBsYXlHYW1lKCkge1xuICAgICAgICB3aGlsZSAoIWlzR2FtZU92ZXIpIHtcbiAgICAgICAgICAgIHBsYXlSb3VuZCgpXG4gICAgICAgIH1cblxuICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRyeUF0dGFja1VudGlsU3VjY2VzcyxcbiAgICAgICAgICAgIHBsYXlHYW1lLFxuICAgICAgICB9XG59IiwiaW1wb3J0IHsgbWFrZUdhbWVDb250cm9sbGVyIH0gZnJvbSBcIi4vZ2FtZUNvbnRyb2xsZXJcIjtcblxubWFrZUdhbWVDb250cm9sbGVyKCkucGxheUdhbWUoKSJdLCJuYW1lcyI6WyJTaGlwIiwiY29uc3RydWN0b3IiLCJsZW5ndGgiLCJ0aGlzIiwiaGl0cyIsInN1bmsiLCJzZXRTdW5rIiwiaGl0IiwiaXNTdW5rIiwiU3BhY2UiLCJoYXNTaGlwIiwid2FzR3Vlc3NlZCIsIm1pc3NlZEhpdCIsInNoaXAiLCJHYW1lYm9hcmQiLCJncmlkIiwibmV3R3JpZCIsImkiLCJyb3ciLCJqIiwic3F1YXJlIiwicHVzaCIsImNyZWF0ZUdyaWQiLCJhbGxTaGlwQ29vcmRzIiwiZ3Vlc3NlZENvb3JkcyIsImlzT3V0T2ZCb3VuZHMiLCJjb2wiLCJjaGVja0lmQWxyZWFkeVBsYWNlZCIsInBvcHVsYXRlU2hpcENvb3Jkc0FycmF5IiwicGxhY2VTaGlwIiwib3JpZW50YXRpb24iLCJzdGFydENvbCIsInN0YXJ0Um93IiwibmV3U2hpcCIsImluaXRpYWxpc2VTaGlwIiwicGxhY2VBbGxTaGlwc09uQm9hcmQiLCJNYXRoIiwicm91bmQiLCJyYW5kb20iLCJmbG9vciIsImdldFBvc2l0aW9uIiwiY2hlY2tTaGlwRXhpc3RzIiwiZ2V0U2hpcCIsImNoZWNrTWlzc2VkSGl0IiwiY2hlY2tXYXNHdWVzc2VkIiwiY2hlY2tJc0dhbWVPdmVyIiwiY29udmVydGVkQWxsU2hpcENvb3JkcyIsIm1hcCIsImNvb3JkIiwiSlNPTiIsInN0cmluZ2lmeSIsImNvbnZlcnRlZEd1ZXNzZWRDb29yZHMiLCJldmVyeSIsInNoaXBDb29yZCIsImluY2x1ZGVzIiwicmVjZWl2ZUF0dGFjayIsIlBsYXllciIsImNvbXB1dGVyIiwiYXR0YWNrIiwiZ2FtZWJvYXJkIiwidHJ5QXR0YWNrVW50aWxTdWNjZXNzIiwiY3VycmVudEd1ZXNzZXMiLCJpbml0aWFsR3Vlc3NlcyIsIkNvbXB1dGVyIiwic3VwZXIiLCJyYW5kb21BdHRhY2siLCJyYW5kb21Db2wiLCJyYW5kb21Sb3ciLCJwbGF5ZXJHYW1lYm9hcmQiLCJjb21wdXRlckdhbWVib2FyZCIsInBsYXllciIsImN1cnJlbnRQbGF5ZXIiLCJlbmVteUdhbWVib2FyZCIsImlzR2FtZU92ZXIiLCJ2aXN1YWxpc2VHYW1lYm9hcmQiLCJjb25zb2xlIiwibG9nIiwic3BhY2UiLCJwbGF5Um91bmQiLCJzd2FwUGxheWVyIiwicGxheUdhbWUiLCJtYWtlR2FtZUNvbnRyb2xsZXIiXSwic291cmNlUm9vdCI6IiJ9