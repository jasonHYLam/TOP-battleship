(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>s});var o=t(537),r=t.n(o),i=t(645),a=t.n(i)()(r());a.push([e.id,"body {\n    margin: 0 auto;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    background-color: black;\n}\n.container {\n    display: flex;\n    flex-direction: row;\n    gap: 40px;\n}\n\n.clickable {\n    cursor: pointer;\n}\n\n.popup {\n    /* position: absolute; */\n    width: 1500px;\n    height: 700px;\n    background-color: darkslategrey;\n}\n\n.blocker {\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    content: '';\n    position: fixed;\n}\n\n.pregame-space {\n    margin: 1px;\n    /* width: 30px;\n    height: 30px; */\n    border: black 1px solid;\n    background-color: white;\n    cursor: pointer;\n}\n\n.pregame-container {\n    display: flex;\n    flex-direction: row;\n    position: relative;\n}\n.ship-container {\n    height: auto;\n    display: flex;\n    flex-direction:column;\n    gap: 20px;\n}\n\n.ship {\n    height: 30px;\n    background-color: white;\n    cursor: pointer;\n}\n\n.five-long {\n    width: 150px;\n}\n\n.four-long {\n    width: 120px;\n}\n\n.three-long {\n    width: 90px;\n}\n\n.two-long {\n    width: 30px;\n}\n\n.gameboard-container, .initial-grid {\n    width: 500px;\n    height: 500px;\n    display: flex;\n    flex-direction: column;\n    background-color: bisque;\n}\n\n.row {\n    flex: 1;\n    display: flex;\n}\n\n.column {\n    flex: 1;\n    background-color: grey;\n    /* justify-content: center; */\n    text-align: center;\n}\n\n\n.pregame-space:hover {\n\n}\n\n.hovering {\n    background-color: aqua;\n}\n\n.selected-ship {\n    background-color: beige;\n}\n\n.ship-in-space {\n    background-color: white;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,cAAc;IACd,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,uBAAuB;AAC3B;AACA;IACI,aAAa;IACb,mBAAmB;IACnB,SAAS;AACb;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,wBAAwB;IACxB,aAAa;IACb,aAAa;IACb,+BAA+B;AACnC;;AAEA;IACI,MAAM;IACN,SAAS;IACT,OAAO;IACP,QAAQ;IACR,WAAW;IACX,eAAe;AACnB;;AAEA;IACI,WAAW;IACX;mBACe;IACf,uBAAuB;IACvB,uBAAuB;IACvB,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,kBAAkB;AACtB;AACA;IACI,YAAY;IACZ,aAAa;IACb,qBAAqB;IACrB,SAAS;AACb;;AAEA;IACI,YAAY;IACZ,uBAAuB;IACvB,eAAe;AACnB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,aAAa;IACb,sBAAsB;IACtB,wBAAwB;AAC5B;;AAEA;IACI,OAAO;IACP,aAAa;AACjB;;AAEA;IACI,OAAO;IACP,sBAAsB;IACtB,6BAA6B;IAC7B,kBAAkB;AACtB;;;AAGA;;AAEA;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,uBAAuB;AAC3B",sourcesContent:["body {\n    margin: 0 auto;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    background-color: black;\n}\n.container {\n    display: flex;\n    flex-direction: row;\n    gap: 40px;\n}\n\n.clickable {\n    cursor: pointer;\n}\n\n.popup {\n    /* position: absolute; */\n    width: 1500px;\n    height: 700px;\n    background-color: darkslategrey;\n}\n\n.blocker {\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    content: '';\n    position: fixed;\n}\n\n.pregame-space {\n    margin: 1px;\n    /* width: 30px;\n    height: 30px; */\n    border: black 1px solid;\n    background-color: white;\n    cursor: pointer;\n}\n\n.pregame-container {\n    display: flex;\n    flex-direction: row;\n    position: relative;\n}\n.ship-container {\n    height: auto;\n    display: flex;\n    flex-direction:column;\n    gap: 20px;\n}\n\n.ship {\n    height: 30px;\n    background-color: white;\n    cursor: pointer;\n}\n\n.five-long {\n    width: 150px;\n}\n\n.four-long {\n    width: 120px;\n}\n\n.three-long {\n    width: 90px;\n}\n\n.two-long {\n    width: 30px;\n}\n\n.gameboard-container, .initial-grid {\n    width: 500px;\n    height: 500px;\n    display: flex;\n    flex-direction: column;\n    background-color: bisque;\n}\n\n.row {\n    flex: 1;\n    display: flex;\n}\n\n.column {\n    flex: 1;\n    background-color: grey;\n    /* justify-content: center; */\n    text-align: center;\n}\n\n\n.pregame-space:hover {\n\n}\n\n.hovering {\n    background-color: aqua;\n}\n\n.selected-ship {\n    background-color: beige;\n}\n\n.ship-in-space {\n    background-color: white;\n}\n"],sourceRoot:""}]);const s=a},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",o=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),o&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),o&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,o,r,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(o)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var l=0;l<e.length;l++){var u=[].concat(e[l]);o&&a[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=i),t&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=t):u[2]=t),r&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=r):u[4]="".concat(r)),n.push(u))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */");return[n].concat([i]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,o=0;o<n.length;o++)if(n[o].identifier===e){t=o;break}return t}function o(e,o){for(var i={},a=[],s=0;s<e.length;s++){var c=e[s],l=o.base?c[0]+o.base:c[0],u=i[l]||0,d="".concat(l," ").concat(u);i[l]=u+1;var A=t(d),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==A)n[A].references++,n[A].updater(p);else{var h=r(p,o);o.byIndex=s,n.splice(s,0,{identifier:d,updater:h,references:1})}a.push(d)}return a}function r(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,r){var i=o(e=e||[],r=r||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var s=t(i[a]);n[s].references--}for(var c=o(e,r),l=0;l<i.length;l++){var u=t(i[l]);0===n[u].references&&(n[u].updater(),n.splice(u,1))}i=c}}},569:e=>{var n={};e.exports=function(e,t){var o=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(o,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(o){var r=n[o];if(void 0!==r)return r.exports;var i=n[o]={id:o,exports:{}};return e[o](i,i.exports,t),i.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var o in n)t.o(n,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0,(()=>{var e=t(379),n=t.n(e),o=t(795),r=t.n(o),i=t(569),a=t.n(i),s=t(565),c=t.n(s),l=t(216),u=t.n(l),d=t(589),A=t.n(d),p=t(426),h={};h.styleTagTransform=A(),h.setAttributes=c(),h.insert=a().bind(null,"head"),h.domAPI=r(),h.insertStyleElement=u(),n()(p.Z,h),p.Z&&p.Z.locals&&p.Z.locals;class f{constructor(e){this.length=e,this.hits=0,this.sunk=!1}setSunk(){this.sunk=!0}hit(){this.hits++}isSunk(){this.length===this.hits&&this.setSunk()}}class g{constructor(){this.hasShip=!1,this.wasGuessed=!1,this.missedHit=!1,this.ship=null}}class m{constructor(){this.grid=function(){let e=[];for(let n=0;n<10;n++){let n=[];for(let e=0;e<10;e++){const e=new g;n.push(e)}e.push(n)}return e}(),this.allShipCoords=[],this.guessedCoords=[]}isOutOfBounds(e,n){return e>9||n>9}checkIfAlreadyPlaced(e,n){return!0===this.grid[n][e].hasShip}populateShipCoordsArray(e,n){this.allShipCoords.push([e,n])}placeShip(e,n,[t,o]){if(this.isOutOfBounds(t,o))return"out of bounds";let r=function(e){if(!(e<1||e>5))return new f(e)}(e);if(r)switch(n){case"horizontal":for(let n=0;n<e;n++){if(this.isOutOfBounds(o,t+n))return"out of bounds";if(this.checkIfAlreadyPlaced(o,t+n))return"position already occupied"}for(let n=0;n<e;n++)this.grid[o][t+n].hasShip=!0,this.grid[o][t+n].ship=r,this.populateShipCoordsArray(t+n,o);break;case"vertical":for(let n=0;n<e;n++){if(this.isOutOfBounds(o+n,t))return"out of bounds";if(this.checkIfAlreadyPlaced(o+n,t))return"position already occupied"}for(let n=0;n<e;n++)this.grid[o+n][t].hasShip=!0,this.grid[o+n][t].ship=r,this.populateShipCoordsArray(t,o+n)}}placeAllShipsOnBoard(){this.placeShip(5,["horizontal","vertical"].Math.round(Math.random()),[Math.floor(10*Math.random()),Math.floor(10*Math.random())])}getPosition(e,n){return this.grid[n][e]}checkShipExists(e,n){return this.grid[n][e].hasShip}getShip(e,n){return this.grid[n][e].ship}checkMissedHit(e,n){return this.grid[n][e].missedHit}checkWasGuessed(e,n){return this.grid[n][e].wasGuessed}checkIsGameOver(){let e=this.allShipCoords.map((e=>JSON.stringify(e))),n=this.guessedCoords.map((e=>JSON.stringify(e)));return console.log(e),console.log(n),console.log(e.every((e=>n.includes(e)))),e.every((e=>n.includes(e)))}receiveAttack(e,n){if(this.checkWasGuessed(e,n))return"already attacked";this.getPosition(e,n).wasGuessed=!0,this.guessedCoords.push([e,n]),this.checkShipExists(e,n)?(this.getShip(e,n).hit(),this.getShip(e,n).isSunk()):this.getPosition(e,n).missedHit=!0}}class v{constructor(e){}attack(e,[n,t]){e.receiveAttack(n,t)}}class C extends v{constructor(){super()}randomAttack(e){const n=Math.floor(10*Math.random()),t=Math.floor(10*Math.random());e.checkWasGuessed(n,t)||this.attack(e,[n,t])}}!function(){let e=document.querySelector("body");function n(e,n=null,t=null,...o){const r=document.createElement(e);return o.forEach((e=>r.classList.add(e))),n&&(r.textContent=n),t&&t.appendChild(r),r}function t(){let e=document.querySelectorAll(".hovering");e&&e.forEach((e=>{e.classList.remove("hovering")}))}function o(){let e=document.querySelector(".selected-ship");e&&e.classList.remove("selected-ship")}function r(e){return e.hasShip||e.wasGuessed?e.hasShip&&!e.wasGuessed?"o":!e.hasShip&&e.wasGuessed?"m":e.hasShip&&e.wasGuessed?"X":void 0:"."}e.addEventListener("mouseover",(e=>{e.target.classList.contains("pregame-space")&&(t(),e.target.classList.add("hovering"),function(){let e=document.querySelector(".selected-ship").classList;function n(e){let n=document.querySelector(".hovering");const t=parseInt(n.dataset.row),o=parseInt(n.dataset.col);console.log(o,t);let r=e-1;for(let e=o+1;e<o+1+r&&!(e>9);e++){let n=document.querySelector(`[data-col="${e}"][data-row="${t}"]`);console.log(n),n.classList.add("hovering")}}switch(!0){case e.contains("five-long"):n(5);break;case e.contains("four-long"):n(4);break;case e.contains("three-long"):n(3);break;case e.contains("two-long"):n(2)}}())})),document.querySelector(".initial-grid").addEventListener("mouseleave",(()=>{t()})),e.addEventListener("click",(e=>{null!==document.querySelector(".selected-ship")&&e.target.classList.contains("pregame-space")&&(document.querySelectorAll(".hovering").forEach((e=>e.classList.add("ship-in-space"))),o(),t())})),e.addEventListener("click",(e=>{e.target.classList.contains("ship")&&(o(),t(),e.target.classList.add("selected-ship"))}));let i=function(){let e=new m,n=new m;const t=new v,o=new C;let r=t,i=n,a=!1;function s(){r=r===t?o:t,i=i===e?n:e}function c(e){e.checkIsGameOver()&&(a=!0)}return e.placeShip(2,"vertical",[1,2]),n.placeShip(3,"vertical",[5,6]),n.placeShip(2,"vertical",[1,2]),{playRound:function(e=null){switch(r){case t:console.log("player"),r.attack(i,e),c(i),s();break;case o:console.log("computer"),function(){let e=JSON.stringify(i.guessedCoords),n=e,t=!1;for(;!t;)r.randomAttack(i),n=JSON.stringify(i.guessedCoords),e!==n&&(t=!0)}(),c(i),s()}},getPlayerGameboard:()=>e,getComputerGameboard:()=>n,getIsGameOver:()=>a}}();function a(){!function(e){let t=document.querySelector(".gameboard-container.right");e.grid.map(((e,o)=>{let i=n("div",null,t,"row");e.map((e=>{n("div",r(e),i,"column")}))}))}(i.getPlayerGameboard()),function(e){let t=document.querySelector(".gameboard-container.left");e.grid.map(((e,o)=>{let i=n("div",null,t,"row");e.map(((e,t)=>{let a=n("div",r(e),i,"column",function(e){return e.hasShip||e.wasGuessed?e.hasShip&&!e.wasGuessed?"clickable":!e.hasShip&&e.wasGuessed||e.hasShip&&e.wasGuessed?"unclickable":void 0:"clickable"}(e));a.dataset.col=t,a.dataset.row=o}))}))}(i.getComputerGameboard())}function s(){document.querySelectorAll(".gameboard-container").forEach((e=>e.textContent=""))}!function(){let e=document.querySelector(".initial-grid");console.log(e);for(let t=0;t<10;t++){let o=n("div",null,e,"row");for(let e=0;e<10;e++){let r=n("div","",o,"column","pregame-space");r.dataset.row=t,r.dataset.col=e}}}(),a(),e.addEventListener("click",(e=>{if(e.target.classList.contains("clickable")){const n=e.target.dataset;i.playRound([parseInt(n.col),parseInt(n.row)]),s(),a(),i.getIsGameOver()?document.querySelectorAll(".clickable").forEach((e=>{e.classList.remove("clickable"),e.classList.add("unclickable")})):(console.log("b"),i.playRound(),s(),a())}}))}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,