(()=>{"use strict";class s{constructor(s){this.length=s,this.hits=0,this.sunk=!1}setSunk(){this.sunk=!0}hit(){this.hits++}isSunk(){this.length===this.hits&&this.setSunk()}}class t{constructor(){this.hasShip=!1,this.wasGuessed=!1,this.missedHit=!1,this.ship=null}}class i{constructor(){this.grid=function(){let s=[];for(let i=0;i<10;i++){let i=[];for(let s=0;s<10;s++){const s=new t;i.push(s)}s.push(i)}return s}(),this.allShipCoords=[],this.guessedCoords=[]}isOutOfBounds(s,t){return s>9||t>9}checkIfAlreadyPlaced(s,t){return!0===this.grid[t][s].hasShip}populateShipCoordsArray(s,t){this.allShipCoords.push([s,t])}placeShip(t,i,[e,r]){if(this.isOutOfBounds(e,r))return"out of bounds";let o=function(t){if(!(t<1||t>5))return new s(t)}(t);if(o)switch(i){case"horizontal":for(let s=0;s<t;s++){if(this.isOutOfBounds(r,e+s))return"out of bounds";if(this.checkIfAlreadyPlaced(r,e+s))return"position already occupied"}for(let s=0;s<t;s++)this.grid[r][e+s].hasShip=!0,this.grid[r][e+s].ship=o,this.populateShipCoordsArray(e+s,r);break;case"vertical":for(let s=0;s<t;s++){if(this.isOutOfBounds(r+s,e))return"out of bounds";if(this.checkIfAlreadyPlaced(r+s,e))return"position already occupied"}for(let s=0;s<t;s++)this.grid[r+s][e].hasShip=!0,this.grid[r+s][e].ship=o,this.populateShipCoordsArray(e,r+s)}}placeAllShipsOnBoard(){this.placeShip(5,["horizontal","vertical"].Math.round(Math.random()),[Math.floor(10*Math.random()),Math.floor(10*Math.random())])}getPosition(s,t){return this.grid[t][s]}checkShipExists(s,t){return this.grid[t][s].hasShip}getShip(s,t){return this.grid[t][s].ship}checkMissedHit(s,t){return this.grid[t][s].missedHit}checkWasGuessed(s,t){return this.grid[t][s].wasGuessed}checkIsGameOver(){let s=this.allShipCoords.map((s=>JSON.stringify(s))),t=this.guessedCoords.map((s=>JSON.stringify(s)));return s.every((s=>t.includes(s)))}receiveAttack(s,t){if(this.checkWasGuessed(s,t))return"already attacked";this.getPosition(s,t).wasGuessed=!0,this.guessedCoords.push([s,t]),this.checkShipExists(s,t)?(this.getShip(s,t).hit(),this.getShip(s,t).isSunk()):this.getPosition(s,t).missedHit=!0}}class e{constructor(s){}attack(s,[t,i]){s.receiveAttack(t,i)}tryAttackUntilSuccess(s,[t,i]){let e,r=JSON.stringify(s.guessedCoords);for(;r!==e;)this.attack(s,[t,i]),e=JSON.stringify(s.guessedCoords)}}class r extends e{constructor(){super()}randomAttack(s){const t=Math.floor(10*Math.random()),i=Math.floor(10*Math.random());s.checkWasGuessed(t,i)||this.attack(s,[t,i])}}(function(){let s=new i,t=new i;const o=new e,h=new r;let a=o,c=t,n=!1;function l(){a=a===o?h:o,c=c===s?t:s}function u(s){s.checkIsGameOver()&&(n=!0)}function d(s){s.grid.map((s=>{console.log(s.map((s=>!1===s.hasShip&&!1===s.wasGuessed?"_":!1===s.hasShip&&!0===s.wasGuessed?"m":!0===s.hasShip&&!1===s.wasGuessed?"o":!0===s.hasShip&&!0===s.wasGuessed?"x":void 0)))}))}function p(){switch(a){case o:console.log("player"),a.tryAttackUntilSuccess(),d(c),u(c),l();break;case h:console.log("computer"),d(),u(c),l()}}return s.placeShip(5,"vertical",[9,6]),s.placeShip(4,"horizontal",[0,8]),s.placeShip(3,"vertical",[5,6]),s.placeShip(3,"horizontal",[2,3]),s.placeShip(2,"vertical",[1,2]),t.placeShip(5,"vertical",[9,6]),t.placeShip(4,"horizontal",[0,8]),t.placeShip(3,"vertical",[5,6]),t.placeShip(3,"horizontal",[2,3]),t.placeShip(2,"vertical",[1,2]),{tryAttackUntilSuccess:function(){let s,[t,i]=prompt('coords to attack, in "[x,y]"').split(","),e=JSON.stringify(c.guessedCoords);switch(a){case o:for(;e===s;)a.attack(c,[t,i]),s=JSON.stringify(c.guessedCoords);break;case o:for(;e!==s;)a.randomAttack(c),s=JSON.stringify(c.guessedCoords)}},playGame:function(){for(;!n;)p()}}})().playGame()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,