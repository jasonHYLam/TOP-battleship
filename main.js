(()=>{"use strict";class s{constructor(s){this.length=s,this.hits=0,this.sunk=!1}setSunk(){this.sunk=!0}hit(){this.hits++}isSunk(){this.length===this.hits&&this.setSunk()}}class t{constructor(){this.hasShip=!1,this.wasGuessed=!1,this.missedHit=!1,this.ship=null}}class i{constructor(){this.grid=function(){let s=[];for(let i=0;i<10;i++){let i=[];for(let s=0;s<10;s++){const s=new t;i.push(s)}s.push(i)}return s}(),this.allShipCoords=[],this.guessedCoords=[]}isOutOfBounds(s,t){return s>9||t>9}checkIfAlreadyPlaced(s,t){return!0===this.grid[t][s].hasShip}populateShipCoordsArray(s,t){this.allShipCoords.push([s,t])}placeShip(t,i,[e,o]){if(this.isOutOfBounds(e,o))return"out of bounds";let r=function(t){if(!(t<1||t>5))return new s(t)}(t);if(r)switch(i){case"horizontal":for(let s=0;s<t;s++){if(this.isOutOfBounds(o,e+s))return"out of bounds";if(this.checkIfAlreadyPlaced(o,e+s))return"position already occupied"}for(let s=0;s<t;s++)this.grid[o][e+s].hasShip=!0,this.grid[o][e+s].ship=r,this.populateShipCoordsArray(e+s,o);break;case"vertical":for(let s=0;s<t;s++){if(this.isOutOfBounds(o+s,e))return"out of bounds";if(this.checkIfAlreadyPlaced(o+s,e))return"position already occupied"}for(let s=0;s<t;s++)this.grid[o+s][e].hasShip=!0,this.grid[o+s][e].ship=r,this.populateShipCoordsArray(e,o+s)}}placeAllShipsOnBoard(){this.placeShip(5,["horizontal","vertical"].Math.round(Math.random()),[Math.floor(10*Math.random()),Math.floor(10*Math.random())])}getPosition(s,t){return this.grid[t][s]}checkShipExists(s,t){return this.grid[t][s].hasShip}getShip(s,t){return this.grid[t][s].ship}checkMissedHit(s,t){return this.grid[t][s].missedHit}checkWasGuessed(s,t){return this.grid[t][s].wasGuessed}checkIsGameOver(){let s=this.allShipCoords.map((s=>JSON.stringify(s))),t=this.guessedCoords.map((s=>JSON.stringify(s)));return s.every((s=>t.includes(s)))}receiveAttack(s,t){if(this.checkWasGuessed(s,t))return"already attacked";this.getPosition(s,t).wasGuessed=!0,this.guessedCoords.push([s,t]),this.checkShipExists(s,t)?(this.getShip(s,t).hit(),this.getShip(s,t).isSunk()):this.getPosition(s,t).missedHit=!0}}class e{constructor(s){}attack(s,[t,i]){s.receiveAttack(t,i)}}class o extends e{constructor(){super()}randomAttack(s){const t=Math.floor(10*Math.random()),i=Math.floor(10*Math.random());s.checkWasGuessed(t,i)||this.attack(s,[t,i])}}(function(){let s=new i,t=new i;const r=new e,h=new o;let a=r,c=t,n=!1;function l(){a=a===r?h:r,c=c===s?t:s}function u(s){s.checkIsGameOver()&&(n=!0)}function d(s){s.grid.map((s=>{console.log(s.map((s=>!1===s.hasShip&&!1===s.wasGuessed?"_":!1===s.hasShip&&!0===s.wasGuessed?"m":!0===s.hasShip&&!1===s.wasGuessed?"o":!0===s.hasShip&&!0===s.wasGuessed?"x":void 0)))}))}function p(){let s=JSON.stringify(c.guessedCoords),t=s;switch(a){case r:let i=!1;for(;!i;){console.log(s===t),console.log("work?");let[e,o]=prompt('coords to attack, in "x,y"').split(",");a.attack(c,[e,o]),t=JSON.stringify(c.guessedCoords),console.log(s),console.log(t),s!==t&&(i=!0)}break;case h:for(;s!==t;)a.randomAttack(c),t=JSON.stringify(c.guessedCoords)}}function f(){switch(a){case r:console.log("player"),d(c),p(),u(c),l(),console.log(a),console.log(c);break;case h:console.log("computer"),d(c),p(),u(c),l()}}return s.placeShip(5,"vertical",[9,6]),s.placeShip(4,"horizontal",[0,8]),s.placeShip(3,"vertical",[5,6]),s.placeShip(3,"horizontal",[2,3]),s.placeShip(2,"vertical",[1,2]),t.placeShip(5,"vertical",[9,3]),t.placeShip(4,"horizontal",[0,8]),t.placeShip(3,"vertical",[5,6]),t.placeShip(3,"horizontal",[2,3]),t.placeShip(2,"vertical",[1,2]),{tryAttackUntilSuccess:p,playGame:function(){for(;!n;)f()}}})().playGame()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,